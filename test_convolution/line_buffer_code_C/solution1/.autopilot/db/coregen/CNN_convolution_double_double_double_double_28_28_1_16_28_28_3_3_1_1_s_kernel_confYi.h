// ==============================================================
// Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __CNN_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_kernel_confYi_H__
#define __CNN_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_kernel_confYi_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct CNN_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_kernel_confYi_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 64;
  static const unsigned AddressRange = 144;
  static const unsigned AddressWidth = 8;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in <sc_lv<AddressWidth> > address1;
sc_core::sc_in <sc_logic> ce1;
sc_core::sc_out <sc_lv<DataWidth> > q1;
sc_core::sc_in <sc_lv<AddressWidth> > address2;
sc_core::sc_in <sc_logic> ce2;
sc_core::sc_out <sc_lv<DataWidth> > q2;
sc_core::sc_in <sc_lv<AddressWidth> > address3;
sc_core::sc_in <sc_logic> ce3;
sc_core::sc_out <sc_lv<DataWidth> > q3;
sc_core::sc_in <sc_lv<AddressWidth> > address4;
sc_core::sc_in <sc_logic> ce4;
sc_core::sc_out <sc_lv<DataWidth> > q4;
sc_core::sc_in <sc_lv<AddressWidth> > address5;
sc_core::sc_in <sc_logic> ce5;
sc_core::sc_out <sc_lv<DataWidth> > q5;
sc_core::sc_in <sc_lv<AddressWidth> > address6;
sc_core::sc_in <sc_logic> ce6;
sc_core::sc_out <sc_lv<DataWidth> > q6;
sc_core::sc_in <sc_lv<AddressWidth> > address7;
sc_core::sc_in <sc_logic> ce7;
sc_core::sc_out <sc_lv<DataWidth> > q7;
sc_core::sc_in <sc_lv<AddressWidth> > address8;
sc_core::sc_in <sc_logic> ce8;
sc_core::sc_out <sc_lv<DataWidth> > q8;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(CNN_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_kernel_confYi_ram) {
        ram[0] = "0b1011111111000100101111100000111010011000111101010000001111111001";
        ram[1] = "0b1011111111001111001111000100110101100011001101010010111010001011";
        ram[2] = "0b0011111110110000100111101011001111011111110000001111000001001011";
        ram[3] = "0b1011111111001010010010010100100100011111001011011100001010110001";
        ram[4] = "0b0011111101101100101100010000000110100110010110011000000110111000";
        ram[5] = "0b0011111111001111100101110110110011011001000111000011101101110101";
        ram[6] = "0b1011111110010101110110010000011101000010101111110110110100111110";
        ram[7] = "0b0011111111001100100100100101100011011101100100011100000100001000";
        ram[8] = "0b0011111111000100111010011100000110111010100111111111100110000101";
        ram[9] = "0b0011111110111100010001110000010011100001101111000001110100100111";
        ram[10] = "0b1011111110100010111011000110011001011110111100110110111100111101";
        ram[11] = "0b1011111111010101101101100001111101110110101111011100110001111111";
        ram[12] = "0b0011111111010100111110011101000011111100010111000101110001110111";
        ram[13] = "0b1011111110111001000010111101100001010000011000111001101010101111";
        ram[14] = "0b1011111111000001011100100110011010111010010010010011110010001010";
        ram[15] = "0b0011111111000001011000000010010100000011110001011000011101011110";
        ram[16] = "0b0011111111010000100100000110111010100010100111111111110110001100";
        ram[17] = "0b0011111110010111001111111111100101000111110111011001011111010100";
        ram[18] = "0b0011111111001010011000100111010011111111101100010101000010011010";
        ram[19] = "0b0011111111000011001011011100101111101011001001010111110101101000";
        ram[20] = "0b0011111111001010001001001111100100001000101111111110110100010101";
        ram[21] = "0b1011111110111010100101111110001011100000001101001000100010011110";
        ram[22] = "0b1011111110111011010011110011110101010100111101010010010011011011";
        ram[23] = "0b0011111110111111000010011011111101000110011111000110011000101101";
        ram[24] = "0b1011111111011001010101011100011111111101110110110000110010101100";
        ram[25] = "0b1011111111001011010111101100110001101001001001001011000110111011";
        ram[26] = "0b0011111111010000101110011000111110100011011101101001001000101110";
        ram[27] = "0b0011111111010001101110111011010000100000101011100111011001001011";
        ram[28] = "0b0011111111001011010000111110101011111011111000011110001100110100";
        ram[29] = "0b0011111111000100011101011111111011011111110001000111011000111100";
        ram[30] = "0b0011111110000000101010100010101110111000000101001010111011100100";
        ram[31] = "0b1011111110110101010110111101101111011110011000101010000101100000";
        ram[32] = "0b1011111110100110010111011011011010111111011011110100000100101011";
        ram[33] = "0b0011111110100110110111100111111111111101100100010011101011010000";
        ram[34] = "0b0011111111001001110000011100010001000101100101001011010010101101";
        ram[35] = "0b0011111110111011010000011111111010101000000100010010101110100001";
        ram[36] = "0b1011111110011101100010000001010110100111011101011110101000000001";
        ram[37] = "0b1011111111000111100110001111101100111001000110111101010101110100";
        ram[38] = "0b1011111111000110100110100010000110101001110010001110011010111001";
        ram[39] = "0b1011111110000110101010100110100101100100011000010110110101000111";
        ram[40] = "0b1011111110111100100110011100100011111110111000011111001011001111";
        ram[41] = "0b1011111110111011000100101100110100001100001101111100011011000001";
        ram[42] = "0b1011111101101101011110111011101011010000001110011101100010000011";
        ram[43] = "0b1011111110110000010000110001100110110000001010100101010010111101";
        ram[44] = "0b1011111101100111110100010101110101010101010001011010110010110010";
        ram[45] = "0b1011111111001111101001010110001011100101111111100100110000100001";
        ram[46] = "0b0011111110100010001010110010110011111111011001110111111010111111";
        ram[47] = "0b1011111110111111111101101010100010010011010111001001001110101010";
        ram[48] = "0b0011111110100100011100100111110001100011000101101011111101111001";
        ram[49] = "0b1011111110000010010101101010111001001000101110010110100001111101";
        ram[50] = "0b0011111101110110100100110011010100101111000101000111001100110010";
        ram[51] = "0b0011111110110001110011011111011101000100010001001010100001111100";
        ram[52] = "0b0011111111010001000011110101110000101000111101011100001010001111";
        ram[53] = "0b0011111111000101010110111100100000100111110011000111011110111101";
        ram[54] = "0b0011111111000001111010011010110110101110001000111001010001011010";
        ram[55] = "0b1011111110110000111101011111100101000000111101000001000100001001";
        ram[56] = "0b0011111111000001101011110110110000111110110000101000100001111011";
        ram[57] = "0b0011111111010000011101000111000011000000001100011000100011100100";
        ram[58] = "0b0011111110110011001011101001011100000001101110011011111001111101";
        ram[59] = "0b0011111111000101111010000000100001111100111111000010101000001000";
        ram[60] = "0b0011111111001111011100101010010000110111010101110101101000101111";
        ram[61] = "0b0011111110111001101111111100011000111110100100110011100010101100";
        ram[62] = "0b0011111111001010000111000000000001100110101011010011001100101001";
        ram[63] = "0b1011111110111010111011011101011000110001110100000101110010100100";
        ram[64] = "0b1011111101110001111100001100000100100110010110010000110111000001";
        ram[65] = "0b1011111110011010010001001010011101010111011110101110111010111100";
        ram[66] = "0b0011111110100000000010101110000101111100110101001000100101010001";
        ram[67] = "0b1011111110010101100110110111011000010010101010111101010000101111";
        ram[68] = "0b0011111111011110010000011001010001011111011100110000001000101011";
        ram[69] = "0b0011111110001010101001001101101011110011110111111001001111010111";
        ram[70] = "0b0011111101110100000101010110101101110111000111000110110000011100";
        ram[71] = "0b0011111110011101111101100111010111111001101111011000000111100111";
        ram[72] = "0b1011111111100001000111110010010001010010110001011001111110110010";
        ram[73] = "0b1011111110110101110001110101111100100100101010001010101111011011";
        ram[74] = "0b1011111101101111111010000101100000011000100110101101011010000110";
        ram[75] = "0b0011111110111101001110110111111110100001101110101001010000101010";
        ram[76] = "0b1011111110101000101111110011010101011111100010000101000011000111";
        ram[77] = "0b1011111110001001010001011110100101011101000101010001110110111000";
        ram[78] = "0b0011111111011010111000010101001111000010011101001101101000011101";
        ram[79] = "0b0011111110110110000011000000100101111000101001001010110001110010";
        ram[80] = "0b0011111110010000110011100011111111101001011110100000000110100100";
        ram[81] = "0b1011111110000101000000000011001010010001000010000000101111001110";
        ram[82] = "0b0011111110110101101111001001111110000011000100101001100110001011";
        ram[83] = "0b0011111110101100100110101101101001100001010111111110110001001111";
        ram[84] = "0b1011111110111111010101011011010010000001010000000100101100111000";
        ram[85] = "0b0011111110111101100010111000101010111000001010100101001101100110";
        ram[86] = "0b0011111110101010111101101100011110011101000011010001011010010100";
        ram[87] = "0b0011111111010110101001000100010110000100100110011000001001001000";
        ram[88] = "0b0011111111001010001111010101001000011010111111111110000010100000";
        ram[89] = "0b1011111110111000001111001101011001110101000101110010111001000101";
        ram[90] = "0b1100000000000111101011001010111110100110010010110101100011000100";
        ram[91] = "0b1011111110110110001001110010101110010011000000001100111000110001";
        ram[92] = "0b1011111111011001000000010000100010111110100101010111110001111111";
        ram[93] = "0b1011111111001110111110100101110011111101110111001110010100011110";
        ram[94] = "0b0011111110100011101010010011001000100100001001011011010101010111";
        ram[95] = "0b0011111110101011110011000110001100100011000110001001000101111010";
        ram[96] = "0b1011111111001101111100101011111011111001110100000110011000001001";
        ram[97] = "0b1011111110100111110011010000101010000001101100001001000100100100";
        ram[98] = "0b0011111111011100011011111111010000011001010000011111000001100101";
        ram[99] = "0b1011111101111111011011000001011111010110001101011000000101000001";
        ram[100] = "0b0011111110100001111100101100010001011000001101000001111010010110";
        ram[101] = "0b1011111100111010110110001110001100011111011000110110000101101000";
        ram[102] = "0b1011111101110101101011110111010111001110111001000010100100110101";
        ram[103] = "0b0011111111100100111111100100101010111110011010100011001101111011";
        ram[104] = "0b1011111110001101000101000110110010001101011000001011111111111000";
        ram[105] = "0b1011111110000001000010111110011001001110011001000100110101000011";
        ram[106] = "0b0011111110010100100011000011001010100000001100101011001001010001";
        ram[107] = "0b1011111101110010100100000000001111101110101000100000100110101011";
        ram[108] = "0b1011111111111000110011111101000101100100000010110100001001010011";
        ram[109] = "0b1011111111010010010110010100000001000010111001100010111010011110";
        ram[110] = "0b1011111110101000111100000010110100000001110010010110000101100110";
        ram[111] = "0b1011111111011111010101001110011011100010001000011100100010101000";
        ram[112] = "0b0011111110110000111001000000100010111110000101001010001100100101";
        ram[113] = "0b1011111111010001111011101011111110011011100010111110001000100001";
        ram[114] = "0b0011111110101111011100010110000000010100100100101011010000100010";
        ram[115] = "0b0011111111011110100010100111010100000011101110000001101101100101";
        ram[116] = "0b1011111111001100011111100110101110000000010101101010011110000010";
        ram[117] = "0b1011111111100111001011001001101011011101111001110101000101011101";
        ram[118] = "0b1011111111000110000000111010100001000000101001100110001101010111";
        ram[119] = "0b0011111111010000110101000111001011011110011011101110000010110011";
        ram[120] = "0b1011111111100010011101111010011001011111011110101011100111011011";
        ram[121] = "0b0011111111010011110000101110111100111101111001011110100110101001";
        ram[122] = "0b0011111111010110010001001001111100000000111000011010011101001111";
        ram[123] = "0b1011111111101001110001100110000101000011000100001111011011001000";
        ram[124] = "0b1011111111011001110101111011101001100110100110001011101101001101";
        ram[125] = "0b1011111111010101101100010110100011100011011011100100111011101000";
        ram[126] = "0b0011111110110010101101100110111000010000101010011100011001100010";
        ram[127] = "0b0011111111010101100010110000110110111010101010001011001011100111";
        ram[128] = "0b0011111111011101000111000010010101100101000101000101011011001111";
        ram[129] = "0b0011111110011111111000010001100001100110110111001011011010000010";
        ram[130] = "0b1011111110010111100001000101111011111101011011110000100110101100";
        ram[131] = "0b0011111111000100101101110001111011100101100111100101010011101010";
        ram[132] = "0b0011111101001100011000000001010011100000000000110101011111000110";
        ram[133] = "0b1011111110110111111101011101011100110010001010110111011001010000";
        ram[134] = "0b0011111110111100010000101001011110111111101001001100011000011110";
        ram[135] = "0b1011111111010010110001111111011010000100000000000101010100111010";
        ram[136] = "0b1011111111010101101101100001111010011111111111100011011110101001";
        ram[137] = "0b1011111111001100010001011011001011100111100111100101111101010001";
        ram[138] = "0b0011111110111001111101101101001010000100110001111010010101110001";
        ram[139] = "0b0011111110110010100111011111100000100011000100011101001011100110";
        ram[140] = "0b1011111111000101000101100111101111010111111001111011001100000010";
        ram[141] = "0b0011111111100001000101111100111000011101001011101110010011110000";
        ram[142] = "0b1011111110110110000000111010011110111111110011010000101000001001";
        ram[143] = "0b1011111111010000011111110001100110011011010111001001001001010010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();


SC_METHOD(prc_write_1);
  sensitive<<clk.pos();


SC_METHOD(prc_write_2);
  sensitive<<clk.pos();


SC_METHOD(prc_write_3);
  sensitive<<clk.pos();


SC_METHOD(prc_write_4);
  sensitive<<clk.pos();


SC_METHOD(prc_write_5);
  sensitive<<clk.pos();


SC_METHOD(prc_write_6);
  sensitive<<clk.pos();


SC_METHOD(prc_write_7);
  sensitive<<clk.pos();


SC_METHOD(prc_write_8);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


void prc_write_1()
{
    if (ce1.read() == sc_dt::Log_1) 
    {
            if(address1.read().is_01() && address1.read().to_uint()<AddressRange)
              q1 = ram[address1.read().to_uint()];
            else
              q1 = sc_lv<DataWidth>();
    }
}


void prc_write_2()
{
    if (ce2.read() == sc_dt::Log_1) 
    {
            if(address2.read().is_01() && address2.read().to_uint()<AddressRange)
              q2 = ram[address2.read().to_uint()];
            else
              q2 = sc_lv<DataWidth>();
    }
}


void prc_write_3()
{
    if (ce3.read() == sc_dt::Log_1) 
    {
            if(address3.read().is_01() && address3.read().to_uint()<AddressRange)
              q3 = ram[address3.read().to_uint()];
            else
              q3 = sc_lv<DataWidth>();
    }
}


void prc_write_4()
{
    if (ce4.read() == sc_dt::Log_1) 
    {
            if(address4.read().is_01() && address4.read().to_uint()<AddressRange)
              q4 = ram[address4.read().to_uint()];
            else
              q4 = sc_lv<DataWidth>();
    }
}


void prc_write_5()
{
    if (ce5.read() == sc_dt::Log_1) 
    {
            if(address5.read().is_01() && address5.read().to_uint()<AddressRange)
              q5 = ram[address5.read().to_uint()];
            else
              q5 = sc_lv<DataWidth>();
    }
}


void prc_write_6()
{
    if (ce6.read() == sc_dt::Log_1) 
    {
            if(address6.read().is_01() && address6.read().to_uint()<AddressRange)
              q6 = ram[address6.read().to_uint()];
            else
              q6 = sc_lv<DataWidth>();
    }
}


void prc_write_7()
{
    if (ce7.read() == sc_dt::Log_1) 
    {
            if(address7.read().is_01() && address7.read().to_uint()<AddressRange)
              q7 = ram[address7.read().to_uint()];
            else
              q7 = sc_lv<DataWidth>();
    }
}


void prc_write_8()
{
    if (ce8.read() == sc_dt::Log_1) 
    {
            if(address8.read().is_01() && address8.read().to_uint()<AddressRange)
              q8 = ram[address8.read().to_uint()];
            else
              q8 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(CNN_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_kernel_confYi) {


static const unsigned DataWidth = 64;
static const unsigned AddressRange = 144;
static const unsigned AddressWidth = 8;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in <sc_lv<AddressWidth> > address1;
sc_core::sc_in<sc_logic> ce1;
sc_core::sc_out <sc_lv<DataWidth> > q1;
sc_core::sc_in <sc_lv<AddressWidth> > address2;
sc_core::sc_in<sc_logic> ce2;
sc_core::sc_out <sc_lv<DataWidth> > q2;
sc_core::sc_in <sc_lv<AddressWidth> > address3;
sc_core::sc_in<sc_logic> ce3;
sc_core::sc_out <sc_lv<DataWidth> > q3;
sc_core::sc_in <sc_lv<AddressWidth> > address4;
sc_core::sc_in<sc_logic> ce4;
sc_core::sc_out <sc_lv<DataWidth> > q4;
sc_core::sc_in <sc_lv<AddressWidth> > address5;
sc_core::sc_in<sc_logic> ce5;
sc_core::sc_out <sc_lv<DataWidth> > q5;
sc_core::sc_in <sc_lv<AddressWidth> > address6;
sc_core::sc_in<sc_logic> ce6;
sc_core::sc_out <sc_lv<DataWidth> > q6;
sc_core::sc_in <sc_lv<AddressWidth> > address7;
sc_core::sc_in<sc_logic> ce7;
sc_core::sc_out <sc_lv<DataWidth> > q7;
sc_core::sc_in <sc_lv<AddressWidth> > address8;
sc_core::sc_in<sc_logic> ce8;
sc_core::sc_out <sc_lv<DataWidth> > q8;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


CNN_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_kernel_confYi_ram* meminst;


SC_CTOR(CNN_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_kernel_confYi) {
meminst = new CNN_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_kernel_confYi_ram("CNN_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_kernel_confYi_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->address1(address1);
meminst->ce1(ce1);
meminst->q1(q1);

meminst->address2(address2);
meminst->ce2(ce2);
meminst->q2(q2);

meminst->address3(address3);
meminst->ce3(ce3);
meminst->q3(q3);

meminst->address4(address4);
meminst->ce4(ce4);
meminst->q4(q4);

meminst->address5(address5);
meminst->ce5(ce5);
meminst->q5(q5);

meminst->address6(address6);
meminst->ce6(ce6);
meminst->q6(q6);

meminst->address7(address7);
meminst->ce7(ce7);
meminst->q7(q7);

meminst->address8(address8);
meminst->ce8(ce8);
meminst->q8(q8);

meminst->reset(reset);
meminst->clk(clk);
}
~CNN_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_kernel_confYi() {
    delete meminst;
}


};//endmodule
#endif
