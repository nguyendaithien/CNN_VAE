-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CNN_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_Pipeline_Shift_win_right is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    line_buffer_2_load_2 : IN STD_LOGIC_VECTOR (63 downto 0);
    line_buffer_2_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    line_buffer_1_load_2 : IN STD_LOGIC_VECTOR (63 downto 0);
    line_buffer_1_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    line_buffer_0_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    line_buffer_0_load : IN STD_LOGIC_VECTOR (63 downto 0);
    kernel_conv1_load : IN STD_LOGIC_VECTOR (63 downto 0);
    kernel_conv1_load_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    kernel_conv1_load_2 : IN STD_LOGIC_VECTOR (63 downto 0);
    kernel_conv1_load_3 : IN STD_LOGIC_VECTOR (63 downto 0);
    kernel_conv1_load_4 : IN STD_LOGIC_VECTOR (63 downto 0);
    kernel_conv1_load_5 : IN STD_LOGIC_VECTOR (63 downto 0);
    kernel_conv1_load_6 : IN STD_LOGIC_VECTOR (63 downto 0);
    kernel_conv1_load_7 : IN STD_LOGIC_VECTOR (63 downto 0);
    kernel_conv1_load_8 : IN STD_LOGIC_VECTOR (63 downto 0);
    bias_conv1_load : IN STD_LOGIC_VECTOR (63 downto 0);
    output_conv1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    output_conv1_ap_vld : OUT STD_LOGIC;
    line_buffer_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    line_buffer_0_ce0 : OUT STD_LOGIC;
    line_buffer_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    line_buffer_1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    line_buffer_1_ce0 : OUT STD_LOGIC;
    line_buffer_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    line_buffer_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    line_buffer_2_ce0 : OUT STD_LOGIC;
    line_buffer_2_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of CNN_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_Pipeline_Shift_win_right is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter41 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter42 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter43 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter44 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter45 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter46 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter29 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter30 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter31 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter32 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter33 : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter34 : BOOLEAN;
    signal ap_block_state36_pp0_stage0_iter35 : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter36 : BOOLEAN;
    signal ap_block_state38_pp0_stage0_iter37 : BOOLEAN;
    signal ap_block_state39_pp0_stage0_iter38 : BOOLEAN;
    signal ap_block_state40_pp0_stage0_iter39 : BOOLEAN;
    signal ap_block_state41_pp0_stage0_iter40 : BOOLEAN;
    signal ap_block_state42_pp0_stage0_iter41 : BOOLEAN;
    signal ap_block_state43_pp0_stage0_iter42 : BOOLEAN;
    signal ap_block_state44_pp0_stage0_iter43 : BOOLEAN;
    signal ap_block_state45_pp0_stage0_iter44 : BOOLEAN;
    signal ap_block_state46_pp0_stage0_iter45 : BOOLEAN;
    signal ap_block_state47_pp0_stage0_iter46 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln68_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln68_reg_605 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_605_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_605_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_605_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_605_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_605_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_605_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_605_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_605_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_605_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_605_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_605_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_605_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_605_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_605_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_605_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_605_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_605_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_605_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_605_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_605_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_605_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_605_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_605_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_605_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast4_fu_392_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_reg_609 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_reg_609_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_reg_609_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_reg_609_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_reg_609_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_reg_609_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_reg_609_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_reg_609_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_reg_609_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_reg_609_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_reg_609_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_reg_609_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_reg_609_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_reg_609_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_reg_609_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_reg_609_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_reg_609_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_reg_609_pp0_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_reg_609_pp0_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_reg_609_pp0_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_reg_609_pp0_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_reg_609_pp0_iter21_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_reg_609_pp0_iter22_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_reg_609_pp0_iter23_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_0_load_2_reg_630 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_295_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_reg_635 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_299_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_1_reg_640 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_1_reg_640_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_1_reg_640_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_1_reg_640_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_1_reg_640_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_303_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_2_reg_645 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_2_reg_645_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_2_reg_645_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_2_reg_645_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_2_reg_645_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_2_reg_645_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_2_reg_645_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_2_reg_645_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_254_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_1_reg_650 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_259_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_1_0_1_reg_660 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_1_load_reg_675 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_263_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_1_0_2_reg_680 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_307_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_reg_685 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_311_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_1_reg_690 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_1_reg_690_pp0_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_1_reg_690_pp0_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_1_reg_690_pp0_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_1_reg_690_pp0_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_315_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_695 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_695_pp0_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_695_pp0_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_695_pp0_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_695_pp0_iter21_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_695_pp0_iter22_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_695_pp0_iter23_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_695_pp0_iter24_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_267_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_1_1_reg_700 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_271_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_1_1_1_reg_710 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_2_load_reg_725 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_275_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_1_1_2_reg_730 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_319_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_reg_735 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_323_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_1_reg_740 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_1_reg_740_pp0_iter29_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_1_reg_740_pp0_iter30_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_1_reg_740_pp0_iter31_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_1_reg_740_pp0_iter32_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_327_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_745 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_745_pp0_iter30_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_745_pp0_iter31_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_745_pp0_iter32_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_745_pp0_iter33_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_745_pp0_iter34_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_745_pp0_iter35_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_745_pp0_iter36_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_279_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_1_2_reg_750 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_283_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_1_2_1_reg_755 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_287_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_1_2_2_reg_760 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_291_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_reg_765 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_reg_765_pp0_iter45_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_condition_exit_pp0_iter25_stage0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal b_fu_84 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln68_fu_380_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_b_1 : STD_LOGIC_VECTOR (4 downto 0);
    signal window_buffer_load_0_fu_88 : STD_LOGIC_VECTOR (63 downto 0);
    signal window_buffer_load_13_fu_92 : STD_LOGIC_VECTOR (63 downto 0);
    signal window_buffer_load_24_fu_96 : STD_LOGIC_VECTOR (63 downto 0);
    signal window_buffer_load_1_0_fu_100 : STD_LOGIC_VECTOR (63 downto 0);
    signal window_buffer_load_1_1_fu_104 : STD_LOGIC_VECTOR (63 downto 0);
    signal window_buffer_load_1_2_fu_108 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal empty_19_fu_386_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal bitcast_ln15_fu_456_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_459_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln15_fu_469_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln15_1_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln15_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln15_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln15_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter24_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter25_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter26_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter27_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter28_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter29_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter30_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter31_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter32_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter33_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter34_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter35_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter36_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter37_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter38_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter39_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter40_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter41_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter42_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter43_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter44_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter45_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component CNN_dadd_64ns_64ns_64_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component CNN_dmul_64ns_64ns_64_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component CNN_dcmp_64ns_64ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component CNN_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    dadd_64ns_64ns_64_4_full_dsp_1_U6 : component CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_reg_635,
        din1 => ap_const_lv64_0,
        ce => ap_const_logic_1,
        dout => grp_fu_254_p2);

    dadd_64ns_64ns_64_4_full_dsp_1_U7 : component CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_1_reg_650,
        din1 => mul_0_1_reg_640_pp0_iter8_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_259_p2);

    dadd_64ns_64ns_64_4_full_dsp_1_U8 : component CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_1_0_1_reg_660,
        din1 => mul_0_2_reg_645_pp0_iter12_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_263_p2);

    dadd_64ns_64ns_64_4_full_dsp_1_U9 : component CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_1_0_2_reg_680,
        din1 => mul_1_reg_685,
        ce => ap_const_logic_1,
        dout => grp_fu_267_p2);

    dadd_64ns_64ns_64_4_full_dsp_1_U10 : component CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_1_1_reg_700,
        din1 => mul_1_1_reg_690_pp0_iter20_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_271_p2);

    dadd_64ns_64ns_64_4_full_dsp_1_U11 : component CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_1_1_1_reg_710,
        din1 => mul_1_2_reg_695_pp0_iter24_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_275_p2);

    dadd_64ns_64ns_64_4_full_dsp_1_U12 : component CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_1_1_2_reg_730,
        din1 => mul_2_reg_735,
        ce => ap_const_logic_1,
        dout => grp_fu_279_p2);

    dadd_64ns_64ns_64_4_full_dsp_1_U13 : component CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_1_2_reg_750,
        din1 => mul_2_1_reg_740_pp0_iter32_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_283_p2);

    dadd_64ns_64ns_64_4_full_dsp_1_U14 : component CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_1_2_1_reg_755,
        din1 => mul_2_2_reg_745_pp0_iter36_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_287_p2);

    dadd_64ns_64ns_64_4_full_dsp_1_U15 : component CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_1_2_2_reg_760,
        din1 => bias_conv1_load,
        ce => ap_const_logic_1,
        dout => grp_fu_291_p2);

    dmul_64ns_64ns_64_4_max_dsp_1_U16 : component CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => window_buffer_load_0_fu_88,
        din1 => kernel_conv1_load,
        ce => ap_const_logic_1,
        dout => grp_fu_295_p2);

    dmul_64ns_64ns_64_4_max_dsp_1_U17 : component CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => window_buffer_load_1_0_fu_100,
        din1 => kernel_conv1_load_1,
        ce => ap_const_logic_1,
        dout => grp_fu_299_p2);

    dmul_64ns_64ns_64_4_max_dsp_1_U18 : component CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => line_buffer_0_load_2_reg_630,
        din1 => kernel_conv1_load_2,
        ce => ap_const_logic_1,
        dout => grp_fu_303_p2);

    dmul_64ns_64ns_64_4_max_dsp_1_U19 : component CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => window_buffer_load_13_fu_92,
        din1 => kernel_conv1_load_3,
        ce => ap_const_logic_1,
        dout => grp_fu_307_p2);

    dmul_64ns_64ns_64_4_max_dsp_1_U20 : component CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => window_buffer_load_1_1_fu_104,
        din1 => kernel_conv1_load_4,
        ce => ap_const_logic_1,
        dout => grp_fu_311_p2);

    dmul_64ns_64ns_64_4_max_dsp_1_U21 : component CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => line_buffer_1_load_reg_675,
        din1 => kernel_conv1_load_5,
        ce => ap_const_logic_1,
        dout => grp_fu_315_p2);

    dmul_64ns_64ns_64_4_max_dsp_1_U22 : component CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => window_buffer_load_24_fu_96,
        din1 => kernel_conv1_load_6,
        ce => ap_const_logic_1,
        dout => grp_fu_319_p2);

    dmul_64ns_64ns_64_4_max_dsp_1_U23 : component CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => window_buffer_load_1_2_fu_108,
        din1 => kernel_conv1_load_7,
        ce => ap_const_logic_1,
        dout => grp_fu_323_p2);

    dmul_64ns_64ns_64_4_max_dsp_1_U24 : component CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => line_buffer_2_load_reg_725,
        din1 => kernel_conv1_load_8,
        ce => ap_const_logic_1,
        dout => grp_fu_327_p2);

    dcmp_64ns_64ns_1_2_no_dsp_1_U25 : component CNN_dcmp_64ns_64ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_reg_765,
        din1 => ap_const_lv64_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_331_p2);

    flow_control_loop_pipe_sequential_init_U : component CNN_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter45_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter25_stage0)) then 
                    ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter39 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter40 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter41 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter42 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter43 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter44_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter44 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter45_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter45 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter46_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter46 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    b_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln68_fu_374_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    b_fu_84 <= add_ln68_fu_380_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    b_fu_84 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    window_buffer_load_0_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    window_buffer_load_0_fu_88 <= line_buffer_0_load;
                elsif (((icmp_ln68_reg_605 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    window_buffer_load_0_fu_88 <= window_buffer_load_1_0_fu_100;
                end if;
            end if; 
        end if;
    end process;

    window_buffer_load_13_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    window_buffer_load_13_fu_92 <= line_buffer_1_load_1;
                elsif (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (icmp_ln68_reg_605_pp0_iter12_reg = ap_const_lv1_0))) then 
                    window_buffer_load_13_fu_92 <= window_buffer_load_1_1_fu_104;
                end if;
            end if; 
        end if;
    end process;

    window_buffer_load_1_0_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    window_buffer_load_1_0_fu_100 <= line_buffer_0_load_1;
                elsif (((icmp_ln68_reg_605 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    window_buffer_load_1_0_fu_100 <= line_buffer_0_q0;
                end if;
            end if; 
        end if;
    end process;

    window_buffer_load_1_1_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    window_buffer_load_1_1_fu_104 <= line_buffer_1_load_2;
                elsif (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (icmp_ln68_reg_605_pp0_iter12_reg = ap_const_lv1_0))) then 
                    window_buffer_load_1_1_fu_104 <= line_buffer_1_q0;
                end if;
            end if; 
        end if;
    end process;

    window_buffer_load_1_2_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    window_buffer_load_1_2_fu_108 <= line_buffer_2_load_2;
                elsif (((ap_enable_reg_pp0_iter25 = ap_const_logic_1) and (icmp_ln68_reg_605_pp0_iter24_reg = ap_const_lv1_0))) then 
                    window_buffer_load_1_2_fu_108 <= line_buffer_2_q0;
                end if;
            end if; 
        end if;
    end process;

    window_buffer_load_24_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    window_buffer_load_24_fu_96 <= line_buffer_2_load_1;
                elsif (((ap_enable_reg_pp0_iter25 = ap_const_logic_1) and (icmp_ln68_reg_605_pp0_iter24_reg = ap_const_lv1_0))) then 
                    window_buffer_load_24_fu_96 <= window_buffer_load_1_2_fu_108;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
                ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
                ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
                ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
                ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
                ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
                ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
                ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
                ap_loop_exit_ready_pp0_iter31_reg <= ap_loop_exit_ready_pp0_iter30_reg;
                ap_loop_exit_ready_pp0_iter32_reg <= ap_loop_exit_ready_pp0_iter31_reg;
                ap_loop_exit_ready_pp0_iter33_reg <= ap_loop_exit_ready_pp0_iter32_reg;
                ap_loop_exit_ready_pp0_iter34_reg <= ap_loop_exit_ready_pp0_iter33_reg;
                ap_loop_exit_ready_pp0_iter35_reg <= ap_loop_exit_ready_pp0_iter34_reg;
                ap_loop_exit_ready_pp0_iter36_reg <= ap_loop_exit_ready_pp0_iter35_reg;
                ap_loop_exit_ready_pp0_iter37_reg <= ap_loop_exit_ready_pp0_iter36_reg;
                ap_loop_exit_ready_pp0_iter38_reg <= ap_loop_exit_ready_pp0_iter37_reg;
                ap_loop_exit_ready_pp0_iter39_reg <= ap_loop_exit_ready_pp0_iter38_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter40_reg <= ap_loop_exit_ready_pp0_iter39_reg;
                ap_loop_exit_ready_pp0_iter41_reg <= ap_loop_exit_ready_pp0_iter40_reg;
                ap_loop_exit_ready_pp0_iter42_reg <= ap_loop_exit_ready_pp0_iter41_reg;
                ap_loop_exit_ready_pp0_iter43_reg <= ap_loop_exit_ready_pp0_iter42_reg;
                ap_loop_exit_ready_pp0_iter44_reg <= ap_loop_exit_ready_pp0_iter43_reg;
                ap_loop_exit_ready_pp0_iter45_reg <= ap_loop_exit_ready_pp0_iter44_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                icmp_ln68_reg_605_pp0_iter10_reg <= icmp_ln68_reg_605_pp0_iter9_reg;
                icmp_ln68_reg_605_pp0_iter11_reg <= icmp_ln68_reg_605_pp0_iter10_reg;
                icmp_ln68_reg_605_pp0_iter12_reg <= icmp_ln68_reg_605_pp0_iter11_reg;
                icmp_ln68_reg_605_pp0_iter13_reg <= icmp_ln68_reg_605_pp0_iter12_reg;
                icmp_ln68_reg_605_pp0_iter14_reg <= icmp_ln68_reg_605_pp0_iter13_reg;
                icmp_ln68_reg_605_pp0_iter15_reg <= icmp_ln68_reg_605_pp0_iter14_reg;
                icmp_ln68_reg_605_pp0_iter16_reg <= icmp_ln68_reg_605_pp0_iter15_reg;
                icmp_ln68_reg_605_pp0_iter17_reg <= icmp_ln68_reg_605_pp0_iter16_reg;
                icmp_ln68_reg_605_pp0_iter18_reg <= icmp_ln68_reg_605_pp0_iter17_reg;
                icmp_ln68_reg_605_pp0_iter19_reg <= icmp_ln68_reg_605_pp0_iter18_reg;
                icmp_ln68_reg_605_pp0_iter20_reg <= icmp_ln68_reg_605_pp0_iter19_reg;
                icmp_ln68_reg_605_pp0_iter21_reg <= icmp_ln68_reg_605_pp0_iter20_reg;
                icmp_ln68_reg_605_pp0_iter22_reg <= icmp_ln68_reg_605_pp0_iter21_reg;
                icmp_ln68_reg_605_pp0_iter23_reg <= icmp_ln68_reg_605_pp0_iter22_reg;
                icmp_ln68_reg_605_pp0_iter24_reg <= icmp_ln68_reg_605_pp0_iter23_reg;
                icmp_ln68_reg_605_pp0_iter2_reg <= icmp_ln68_reg_605_pp0_iter1_reg;
                icmp_ln68_reg_605_pp0_iter3_reg <= icmp_ln68_reg_605_pp0_iter2_reg;
                icmp_ln68_reg_605_pp0_iter4_reg <= icmp_ln68_reg_605_pp0_iter3_reg;
                icmp_ln68_reg_605_pp0_iter5_reg <= icmp_ln68_reg_605_pp0_iter4_reg;
                icmp_ln68_reg_605_pp0_iter6_reg <= icmp_ln68_reg_605_pp0_iter5_reg;
                icmp_ln68_reg_605_pp0_iter7_reg <= icmp_ln68_reg_605_pp0_iter6_reg;
                icmp_ln68_reg_605_pp0_iter8_reg <= icmp_ln68_reg_605_pp0_iter7_reg;
                icmp_ln68_reg_605_pp0_iter9_reg <= icmp_ln68_reg_605_pp0_iter8_reg;
                mul_0_1_reg_640_pp0_iter5_reg <= mul_0_1_reg_640;
                mul_0_1_reg_640_pp0_iter6_reg <= mul_0_1_reg_640_pp0_iter5_reg;
                mul_0_1_reg_640_pp0_iter7_reg <= mul_0_1_reg_640_pp0_iter6_reg;
                mul_0_1_reg_640_pp0_iter8_reg <= mul_0_1_reg_640_pp0_iter7_reg;
                mul_0_2_reg_645_pp0_iter10_reg <= mul_0_2_reg_645_pp0_iter9_reg;
                mul_0_2_reg_645_pp0_iter11_reg <= mul_0_2_reg_645_pp0_iter10_reg;
                mul_0_2_reg_645_pp0_iter12_reg <= mul_0_2_reg_645_pp0_iter11_reg;
                mul_0_2_reg_645_pp0_iter6_reg <= mul_0_2_reg_645;
                mul_0_2_reg_645_pp0_iter7_reg <= mul_0_2_reg_645_pp0_iter6_reg;
                mul_0_2_reg_645_pp0_iter8_reg <= mul_0_2_reg_645_pp0_iter7_reg;
                mul_0_2_reg_645_pp0_iter9_reg <= mul_0_2_reg_645_pp0_iter8_reg;
                mul_1_1_reg_690_pp0_iter17_reg <= mul_1_1_reg_690;
                mul_1_1_reg_690_pp0_iter18_reg <= mul_1_1_reg_690_pp0_iter17_reg;
                mul_1_1_reg_690_pp0_iter19_reg <= mul_1_1_reg_690_pp0_iter18_reg;
                mul_1_1_reg_690_pp0_iter20_reg <= mul_1_1_reg_690_pp0_iter19_reg;
                mul_1_2_reg_695_pp0_iter18_reg <= mul_1_2_reg_695;
                mul_1_2_reg_695_pp0_iter19_reg <= mul_1_2_reg_695_pp0_iter18_reg;
                mul_1_2_reg_695_pp0_iter20_reg <= mul_1_2_reg_695_pp0_iter19_reg;
                mul_1_2_reg_695_pp0_iter21_reg <= mul_1_2_reg_695_pp0_iter20_reg;
                mul_1_2_reg_695_pp0_iter22_reg <= mul_1_2_reg_695_pp0_iter21_reg;
                mul_1_2_reg_695_pp0_iter23_reg <= mul_1_2_reg_695_pp0_iter22_reg;
                mul_1_2_reg_695_pp0_iter24_reg <= mul_1_2_reg_695_pp0_iter23_reg;
                mul_2_1_reg_740 <= grp_fu_323_p2;
                mul_2_1_reg_740_pp0_iter29_reg <= mul_2_1_reg_740;
                mul_2_1_reg_740_pp0_iter30_reg <= mul_2_1_reg_740_pp0_iter29_reg;
                mul_2_1_reg_740_pp0_iter31_reg <= mul_2_1_reg_740_pp0_iter30_reg;
                mul_2_1_reg_740_pp0_iter32_reg <= mul_2_1_reg_740_pp0_iter31_reg;
                mul_2_2_reg_745 <= grp_fu_327_p2;
                mul_2_2_reg_745_pp0_iter30_reg <= mul_2_2_reg_745;
                mul_2_2_reg_745_pp0_iter31_reg <= mul_2_2_reg_745_pp0_iter30_reg;
                mul_2_2_reg_745_pp0_iter32_reg <= mul_2_2_reg_745_pp0_iter31_reg;
                mul_2_2_reg_745_pp0_iter33_reg <= mul_2_2_reg_745_pp0_iter32_reg;
                mul_2_2_reg_745_pp0_iter34_reg <= mul_2_2_reg_745_pp0_iter33_reg;
                mul_2_2_reg_745_pp0_iter35_reg <= mul_2_2_reg_745_pp0_iter34_reg;
                mul_2_2_reg_745_pp0_iter36_reg <= mul_2_2_reg_745_pp0_iter35_reg;
                mul_2_reg_735 <= grp_fu_319_p2;
                    p_cast4_reg_609_pp0_iter10_reg(4 downto 0) <= p_cast4_reg_609_pp0_iter9_reg(4 downto 0);
                    p_cast4_reg_609_pp0_iter11_reg(4 downto 0) <= p_cast4_reg_609_pp0_iter10_reg(4 downto 0);
                    p_cast4_reg_609_pp0_iter12_reg(4 downto 0) <= p_cast4_reg_609_pp0_iter11_reg(4 downto 0);
                    p_cast4_reg_609_pp0_iter13_reg(4 downto 0) <= p_cast4_reg_609_pp0_iter12_reg(4 downto 0);
                    p_cast4_reg_609_pp0_iter14_reg(4 downto 0) <= p_cast4_reg_609_pp0_iter13_reg(4 downto 0);
                    p_cast4_reg_609_pp0_iter15_reg(4 downto 0) <= p_cast4_reg_609_pp0_iter14_reg(4 downto 0);
                    p_cast4_reg_609_pp0_iter16_reg(4 downto 0) <= p_cast4_reg_609_pp0_iter15_reg(4 downto 0);
                    p_cast4_reg_609_pp0_iter17_reg(4 downto 0) <= p_cast4_reg_609_pp0_iter16_reg(4 downto 0);
                    p_cast4_reg_609_pp0_iter18_reg(4 downto 0) <= p_cast4_reg_609_pp0_iter17_reg(4 downto 0);
                    p_cast4_reg_609_pp0_iter19_reg(4 downto 0) <= p_cast4_reg_609_pp0_iter18_reg(4 downto 0);
                    p_cast4_reg_609_pp0_iter20_reg(4 downto 0) <= p_cast4_reg_609_pp0_iter19_reg(4 downto 0);
                    p_cast4_reg_609_pp0_iter21_reg(4 downto 0) <= p_cast4_reg_609_pp0_iter20_reg(4 downto 0);
                    p_cast4_reg_609_pp0_iter22_reg(4 downto 0) <= p_cast4_reg_609_pp0_iter21_reg(4 downto 0);
                    p_cast4_reg_609_pp0_iter23_reg(4 downto 0) <= p_cast4_reg_609_pp0_iter22_reg(4 downto 0);
                    p_cast4_reg_609_pp0_iter2_reg(4 downto 0) <= p_cast4_reg_609_pp0_iter1_reg(4 downto 0);
                    p_cast4_reg_609_pp0_iter3_reg(4 downto 0) <= p_cast4_reg_609_pp0_iter2_reg(4 downto 0);
                    p_cast4_reg_609_pp0_iter4_reg(4 downto 0) <= p_cast4_reg_609_pp0_iter3_reg(4 downto 0);
                    p_cast4_reg_609_pp0_iter5_reg(4 downto 0) <= p_cast4_reg_609_pp0_iter4_reg(4 downto 0);
                    p_cast4_reg_609_pp0_iter6_reg(4 downto 0) <= p_cast4_reg_609_pp0_iter5_reg(4 downto 0);
                    p_cast4_reg_609_pp0_iter7_reg(4 downto 0) <= p_cast4_reg_609_pp0_iter6_reg(4 downto 0);
                    p_cast4_reg_609_pp0_iter8_reg(4 downto 0) <= p_cast4_reg_609_pp0_iter7_reg(4 downto 0);
                    p_cast4_reg_609_pp0_iter9_reg(4 downto 0) <= p_cast4_reg_609_pp0_iter8_reg(4 downto 0);
                sum_1_1_2_reg_730 <= grp_fu_275_p2;
                sum_1_2_1_reg_755 <= grp_fu_283_p2;
                sum_1_2_2_reg_760 <= grp_fu_287_p2;
                sum_1_2_reg_750 <= grp_fu_279_p2;
                sum_reg_765 <= grp_fu_291_p2;
                sum_reg_765_pp0_iter45_reg <= sum_reg_765;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln68_reg_605 <= icmp_ln68_fu_374_p2;
                icmp_ln68_reg_605_pp0_iter1_reg <= icmp_ln68_reg_605;
                    p_cast4_reg_609_pp0_iter1_reg(4 downto 0) <= p_cast4_reg_609(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_reg_605 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                line_buffer_0_load_2_reg_630 <= line_buffer_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_reg_605_pp0_iter12_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                line_buffer_1_load_reg_675 <= line_buffer_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_reg_605_pp0_iter24_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                line_buffer_2_load_reg_725 <= line_buffer_2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_reg_605_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul_0_1_reg_640 <= grp_fu_299_p2;
                mul_reg_635 <= grp_fu_295_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_reg_605_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul_0_2_reg_645 <= grp_fu_303_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_reg_605_pp0_iter15_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul_1_1_reg_690 <= grp_fu_311_p2;
                mul_1_reg_685 <= grp_fu_307_p2;
                sum_1_0_2_reg_680 <= grp_fu_263_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_reg_605_pp0_iter16_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul_1_2_reg_695 <= grp_fu_315_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_fu_374_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    p_cast4_reg_609(4 downto 0) <= p_cast4_fu_392_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_reg_605_pp0_iter11_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                sum_1_0_1_reg_660 <= grp_fu_259_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_reg_605_pp0_iter23_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                sum_1_1_1_reg_710 <= grp_fu_271_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_reg_605_pp0_iter19_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                sum_1_1_reg_700 <= grp_fu_267_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_reg_605_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                sum_1_reg_650 <= grp_fu_254_p2;
            end if;
        end if;
    end process;
    p_cast4_reg_609(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast4_reg_609_pp0_iter1_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast4_reg_609_pp0_iter2_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast4_reg_609_pp0_iter3_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast4_reg_609_pp0_iter4_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast4_reg_609_pp0_iter5_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast4_reg_609_pp0_iter6_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast4_reg_609_pp0_iter7_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast4_reg_609_pp0_iter8_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast4_reg_609_pp0_iter9_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast4_reg_609_pp0_iter10_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast4_reg_609_pp0_iter11_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast4_reg_609_pp0_iter12_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast4_reg_609_pp0_iter13_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast4_reg_609_pp0_iter14_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast4_reg_609_pp0_iter15_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast4_reg_609_pp0_iter16_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast4_reg_609_pp0_iter17_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast4_reg_609_pp0_iter18_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast4_reg_609_pp0_iter19_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast4_reg_609_pp0_iter20_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast4_reg_609_pp0_iter21_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast4_reg_609_pp0_iter22_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast4_reg_609_pp0_iter23_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln68_fu_380_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_b_1) + unsigned(ap_const_lv5_1));
    and_ln15_fu_491_p2 <= (or_ln15_fu_485_p2 and grp_fu_331_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage0_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage0_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage0_iter37 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage0_iter38 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage0_iter39 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage0_iter40 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage0_iter41 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp0_stage0_iter42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage0_iter43 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp0_stage0_iter44 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp0_stage0_iter45 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp0_stage0_iter46 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln68_fu_374_p2)
    begin
        if (((icmp_ln68_fu_374_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter25_stage0_assign_proc : process(ap_enable_reg_pp0_iter25, ap_block_pp0_stage0_subdone, icmp_ln68_reg_605_pp0_iter24_reg)
    begin
        if (((ap_enable_reg_pp0_iter25 = ap_const_logic_1) and (icmp_ln68_reg_605_pp0_iter24_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter25_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter25_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter45_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter45_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41, ap_enable_reg_pp0_iter42, ap_enable_reg_pp0_iter43, ap_enable_reg_pp0_iter44, ap_enable_reg_pp0_iter45, ap_enable_reg_pp0_iter46)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter46 = ap_const_logic_0) and (ap_enable_reg_pp0_iter45 = ap_const_logic_0) and (ap_enable_reg_pp0_iter44 = ap_const_logic_0) and (ap_enable_reg_pp0_iter43 = ap_const_logic_0) and (ap_enable_reg_pp0_iter42 = ap_const_logic_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_b_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, b_fu_84, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_b_1 <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_b_1 <= b_fu_84;
        end if; 
    end process;

    bitcast_ln15_fu_456_p1 <= sum_reg_765_pp0_iter45_reg;
    empty_19_fu_386_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_b_1) + unsigned(ap_const_lv5_2));
    icmp_ln15_1_fu_479_p2 <= "1" when (trunc_ln15_fu_469_p1 = ap_const_lv52_0) else "0";
    icmp_ln15_fu_473_p2 <= "0" when (tmp_fu_459_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln68_fu_374_p2 <= "1" when (ap_sig_allocacmp_b_1 = ap_const_lv5_1C) else "0";
    line_buffer_0_address0 <= p_cast4_fu_392_p1(5 - 1 downto 0);

    line_buffer_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_0_ce0 <= ap_const_logic_1;
        else 
            line_buffer_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_1_address0 <= p_cast4_reg_609_pp0_iter11_reg(5 - 1 downto 0);

    line_buffer_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buffer_1_ce0 <= ap_const_logic_1;
        else 
            line_buffer_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_2_address0 <= p_cast4_reg_609_pp0_iter23_reg(5 - 1 downto 0);

    line_buffer_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter24, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buffer_2_ce0 <= ap_const_logic_1;
        else 
            line_buffer_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln15_fu_485_p2 <= (icmp_ln15_fu_473_p2 or icmp_ln15_1_fu_479_p2);
    output_conv1 <= 
        bitcast_ln15_fu_456_p1 when (and_ln15_fu_491_p2(0) = '1') else 
        ap_const_lv64_0;

    output_conv1_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter46, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter46 = ap_const_logic_1))) then 
            output_conv1_ap_vld <= ap_const_logic_1;
        else 
            output_conv1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_cast4_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_19_fu_386_p2),64));
    tmp_fu_459_p4 <= bitcast_ln15_fu_456_p1(62 downto 52);
    trunc_ln15_fu_469_p1 <= bitcast_ln15_fu_456_p1(52 - 1 downto 0);
end behav;
