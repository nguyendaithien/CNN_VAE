-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CNN_convolution_double_double_double_double_16_16_8_16_14_14_3_3_1_0_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (63 downto 0);
    output_conv6 : OUT STD_LOGIC_VECTOR (63 downto 0);
    output_conv6_ap_vld : OUT STD_LOGIC;
    padding : IN STD_LOGIC_VECTOR (30 downto 0) );
end;


architecture behav of CNN_convolution_double_double_double_double_16_16_8_16_14_14_3_3_1_0_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv12_800 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv10_100 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv11_3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000011";
    constant ap_const_lv11_4 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_const_lv11_5 : STD_LOGIC_VECTOR (10 downto 0) := "00000000101";
    constant ap_const_lv11_6 : STD_LOGIC_VECTOR (10 downto 0) := "00000000110";
    constant ap_const_lv11_7 : STD_LOGIC_VECTOR (10 downto 0) := "00000000111";
    constant ap_const_lv11_8 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_const_lv64_BF82DC17BAD41E47 : STD_LOGIC_VECTOR (63 downto 0) := "1011111110000010110111000001011110111010110101000001111001000111";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal bias_conv6_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal bias_conv6_ce0 : STD_LOGIC;
    signal bias_conv6_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_1_3_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal line_buffer_1_3_ce0 : STD_LOGIC;
    signal line_buffer_1_3_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_1_3_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal line_buffer_1_3_ce1 : STD_LOGIC;
    signal line_buffer_1_3_we1 : STD_LOGIC;
    signal line_buffer_1_3_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_0_3_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal line_buffer_0_3_ce0 : STD_LOGIC;
    signal line_buffer_0_3_we0 : STD_LOGIC;
    signal line_buffer_0_3_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_0_3_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal line_buffer_0_3_ce1 : STD_LOGIC;
    signal line_buffer_0_3_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_2_3_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal line_buffer_2_3_ce0 : STD_LOGIC;
    signal line_buffer_2_3_we0 : STD_LOGIC;
    signal line_buffer_2_3_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_2_3_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_2_3_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal line_buffer_2_3_ce1 : STD_LOGIC;
    signal line_buffer_2_3_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv6_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal kernel_conv6_ce0 : STD_LOGIC;
    signal kernel_conv6_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv6_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal kernel_conv6_ce1 : STD_LOGIC;
    signal kernel_conv6_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv6_address2 : STD_LOGIC_VECTOR (10 downto 0);
    signal kernel_conv6_ce2 : STD_LOGIC;
    signal kernel_conv6_q2 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv6_address3 : STD_LOGIC_VECTOR (10 downto 0);
    signal kernel_conv6_ce3 : STD_LOGIC;
    signal kernel_conv6_q3 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv6_address4 : STD_LOGIC_VECTOR (10 downto 0);
    signal kernel_conv6_ce4 : STD_LOGIC;
    signal kernel_conv6_q4 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv6_address5 : STD_LOGIC_VECTOR (10 downto 0);
    signal kernel_conv6_ce5 : STD_LOGIC;
    signal kernel_conv6_q5 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv6_address6 : STD_LOGIC_VECTOR (10 downto 0);
    signal kernel_conv6_ce6 : STD_LOGIC;
    signal kernel_conv6_q6 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv6_address7 : STD_LOGIC_VECTOR (10 downto 0);
    signal kernel_conv6_ce7 : STD_LOGIC;
    signal kernel_conv6_q7 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv6_address8 : STD_LOGIC_VECTOR (10 downto 0);
    signal kernel_conv6_ce8 : STD_LOGIC;
    signal kernel_conv6_q8 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_reg_440 : STD_LOGIC_VECTOR (4 downto 0);
    signal b_reg_451 : STD_LOGIC_VECTOR (30 downto 0);
    signal window_buffer_load_11_0_reg_462 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state9_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state12_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state13_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_state14_pp1_stage0_iter5 : BOOLEAN;
    signal ap_block_state15_pp1_stage0_iter6 : BOOLEAN;
    signal ap_block_state16_pp1_stage0_iter7 : BOOLEAN;
    signal ap_block_state17_pp1_stage0_iter8 : BOOLEAN;
    signal ap_block_state18_pp1_stage0_iter9 : BOOLEAN;
    signal ap_block_state19_pp1_stage0_iter10 : BOOLEAN;
    signal ap_block_state20_pp1_stage0_iter11 : BOOLEAN;
    signal ap_block_state21_pp1_stage0_iter12 : BOOLEAN;
    signal ap_block_state22_pp1_stage0_iter13 : BOOLEAN;
    signal ap_block_state23_pp1_stage0_iter14 : BOOLEAN;
    signal ap_block_state24_pp1_stage0_iter15 : BOOLEAN;
    signal ap_block_state25_pp1_stage0_iter16 : BOOLEAN;
    signal ap_block_state26_pp1_stage0_iter17 : BOOLEAN;
    signal ap_block_state27_pp1_stage0_iter18 : BOOLEAN;
    signal ap_block_state28_pp1_stage0_iter19 : BOOLEAN;
    signal ap_block_state29_pp1_stage0_iter20 : BOOLEAN;
    signal ap_block_state30_pp1_stage0_iter21 : BOOLEAN;
    signal ap_block_state31_pp1_stage0_iter22 : BOOLEAN;
    signal ap_block_state32_pp1_stage0_iter23 : BOOLEAN;
    signal ap_block_state33_pp1_stage0_iter24 : BOOLEAN;
    signal ap_block_state34_pp1_stage0_iter25 : BOOLEAN;
    signal ap_block_state35_pp1_stage0_iter26 : BOOLEAN;
    signal ap_block_state36_pp1_stage0_iter27 : BOOLEAN;
    signal ap_block_state37_pp1_stage0_iter28 : BOOLEAN;
    signal ap_block_state38_pp1_stage0_iter29 : BOOLEAN;
    signal ap_block_state39_pp1_stage0_iter30 : BOOLEAN;
    signal ap_block_state40_pp1_stage0_iter31 : BOOLEAN;
    signal ap_block_state41_pp1_stage0_iter32 : BOOLEAN;
    signal ap_block_state42_pp1_stage0_iter33 : BOOLEAN;
    signal ap_block_state43_pp1_stage0_iter34 : BOOLEAN;
    signal ap_block_state44_pp1_stage0_iter35 : BOOLEAN;
    signal ap_block_state45_pp1_stage0_iter36 : BOOLEAN;
    signal ap_block_state46_pp1_stage0_iter37 : BOOLEAN;
    signal ap_block_state47_pp1_stage0_iter38 : BOOLEAN;
    signal ap_block_state48_pp1_stage0_iter39 : BOOLEAN;
    signal ap_block_state49_pp1_stage0_iter40 : BOOLEAN;
    signal ap_block_state50_pp1_stage0_iter41 : BOOLEAN;
    signal ap_block_state51_pp1_stage0_iter42 : BOOLEAN;
    signal ap_block_state52_pp1_stage0_iter43 : BOOLEAN;
    signal ap_block_state53_pp1_stage0_iter44 : BOOLEAN;
    signal ap_block_state54_pp1_stage0_iter45 : BOOLEAN;
    signal ap_block_state55_pp1_stage0_iter46 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal window_buffer_load_0_reg_472 : STD_LOGIC_VECTOR (63 downto 0);
    signal window_buffer_load_11_1_reg_483 : STD_LOGIC_VECTOR (63 downto 0);
    signal window_buffer_load_1_reg_493 : STD_LOGIC_VECTOR (63 downto 0);
    signal window_buffer_load_11_2_reg_504 : STD_LOGIC_VECTOR (63 downto 0);
    signal window_buffer_load_2_reg_514 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln31_fu_621_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln31_reg_1199 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln42_fu_627_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_reg_1204 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub13_fu_633_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub13_reg_1208 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub47_fu_639_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub47_reg_1213 : STD_LOGIC_VECTOR (31 downto 0);
    signal cmp4827_fu_645_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp4827_reg_1218 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln49_fu_651_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln49_reg_1222 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_52_fu_660_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_52_reg_1227 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal bias_conv6_load_reg_1238 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln39_fu_730_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln39_reg_1246 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln40_fu_736_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_reg_1251 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_fu_724_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln39_fu_814_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln39_reg_1258 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln39_18_fu_820_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln39_18_reg_1264 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln40_17_fu_980_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln40_17_reg_1319 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln40_fu_998_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln40_reg_1324 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal select_ln40_15_fu_1006_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln40_15_reg_1330 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv6_load_reg_1335 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv6_load_1_reg_1340 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv6_load_2_reg_1345 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv6_load_3_reg_1350 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv6_load_4_reg_1355 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv6_load_5_reg_1360 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv6_load_6_reg_1365 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv6_load_7_reg_1370 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv6_load_8_reg_1375 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln45_fu_1029_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln45_reg_1380 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_6_fu_1039_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_6_reg_1385 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state5_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln42_fu_1044_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal j_cast4_fu_1050_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_cast4_reg_1394 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_1_3_addr_reg_1399 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln52_fu_1095_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln64_fu_1105_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1444 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal icmp_ln64_reg_1444_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1444_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1444_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1444_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1444_pp1_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1444_pp1_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1444_pp1_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1444_pp1_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1444_pp1_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1444_pp1_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1444_pp1_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1444_pp1_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1444_pp1_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1444_pp1_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1444_pp1_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1444_pp1_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1444_pp1_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1444_pp1_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1444_pp1_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1444_pp1_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1444_pp1_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1444_pp1_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1444_pp1_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1444_pp1_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1444_pp1_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1444_pp1_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1444_pp1_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1444_pp1_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1444_pp1_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1444_pp1_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1444_pp1_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1444_pp1_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1444_pp1_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1444_pp1_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1444_pp1_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1444_pp1_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1444_pp1_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1444_pp1_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1444_pp1_iter39_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1444_pp1_iter40_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1444_pp1_iter41_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1444_pp1_iter42_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1444_pp1_iter43_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1444_pp1_iter44_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1444_pp1_iter45_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln64_fu_1110_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal p_cast_fu_1126_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_1453 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_1453_pp1_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_1453_pp1_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_1453_pp1_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_1453_pp1_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_1453_pp1_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_1453_pp1_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_1453_pp1_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_1453_pp1_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_1453_pp1_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_1453_pp1_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_1453_pp1_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_1453_pp1_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_1453_pp1_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_1453_pp1_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_1453_pp1_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_1453_pp1_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_1453_pp1_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_1453_pp1_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_1453_pp1_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_1453_pp1_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_1453_pp1_iter21_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_1453_pp1_iter22_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_1453_pp1_iter23_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_0_3_load_2_reg_1464 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal line_buffer_0_3_load_2_reg_1464_pp1_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_566_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_reg_1470 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_571_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_1_reg_1475 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_1_reg_1475_pp1_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_1_reg_1475_pp1_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_1_reg_1475_pp1_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_576_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_2_reg_1480 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_2_reg_1480_pp1_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_2_reg_1480_pp1_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_2_reg_1480_pp1_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_2_reg_1480_pp1_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_2_reg_1480_pp1_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_2_reg_1480_pp1_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_525_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_s_reg_1485 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_530_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_22_0_1_reg_1495 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_1_3_load_3_reg_1500 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp1_iter13 : STD_LOGIC := '0';
    signal line_buffer_1_3_load_3_reg_1500_pp1_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_534_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_22_0_2_reg_1506 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_580_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_reg_1511 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_585_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_1_reg_1516 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_1_reg_1516_pp1_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_1_reg_1516_pp1_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_1_reg_1516_pp1_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_590_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_1521 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_1521_pp1_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_1521_pp1_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_1521_pp1_iter21_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_1521_pp1_iter22_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_1521_pp1_iter23_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_1521_pp1_iter24_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_538_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_22_1_reg_1526 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_542_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_22_1_1_reg_1536 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_2_3_load_3_reg_1541 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp1_iter25 : STD_LOGIC := '0';
    signal line_buffer_2_3_load_3_reg_1541_pp1_iter26_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_546_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_22_1_2_reg_1547 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_594_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_reg_1552 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_599_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_1_reg_1557 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_1_reg_1557_pp1_iter30_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_1_reg_1557_pp1_iter31_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_1_reg_1557_pp1_iter32_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_604_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1562 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1562_pp1_iter31_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1562_pp1_iter32_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1562_pp1_iter33_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1562_pp1_iter34_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1562_pp1_iter35_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1562_pp1_iter36_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_550_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_22_2_reg_1567 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_554_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_22_2_1_reg_1572 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_558_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_22_2_2_reg_1577 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_562_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_reg_1582 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_reg_1582_pp1_iter45_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln41_fu_1181_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal select_ln40_18_fu_1192_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter26 : STD_LOGIC := '0';
    signal ap_condition_pp1_exit_iter25_state34 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter41 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter42 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter43 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter44 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter45 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter46 : STD_LOGIC := '0';
    signal num_ker_reg_382 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten113_reg_394 : STD_LOGIC_VECTOR (11 downto 0);
    signal num_channel_reg_405 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_reg_416 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_428 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_window_buffer_load_0_phi_fu_475_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_window_buffer_load_1_phi_fu_496_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_window_buffer_load_2_phi_fu_517_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_fu_655_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_38_fu_834_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln83_14_fu_887_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_39_fu_898_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_40_fu_909_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_41_fu_920_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_42_fu_931_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_43_fu_942_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_44_fu_953_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_45_fu_964_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_46_fu_975_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal shl_ln_fu_613_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_668_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln83_10_fu_680_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln83_10_fu_680_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln83_10_fu_680_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl1_fu_690_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl2_fu_701_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl2_cast_fu_708_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast_fu_697_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln83_11_fu_712_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln83_fu_686_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln39_13_fu_750_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_59_fu_760_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln83_12_fu_772_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln83_12_fu_772_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln83_12_fu_772_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln39_15_fu_782_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln83_13_fu_778_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln83_fu_718_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln41_fu_808_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln39_fu_802_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln39_fu_742_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln40_fu_828_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_60_fu_839_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl1_mid1_fu_843_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl2_mid1_fu_855_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl2_cast_mid1_fu_863_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast_mid1_fu_851_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln83_13_fu_867_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln40_47_fu_790_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln83_14_fu_873_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln39_17_fu_794_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln40_16_fu_879_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_37_fu_892_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_38_fu_903_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_39_fu_914_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_40_fu_925_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_41_fu_936_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_42_fu_947_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_43_fu_958_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_44_fu_969_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln40_fu_994_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln39_16_fu_988_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_53_fu_1013_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln45_12_fu_1017_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_13_fu_1023_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_cast_fu_1035_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln45_6_fu_1062_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_fu_1056_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln45_11_fu_1067_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln45_12_fu_1073_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_1086_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_cast_fu_1101_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_57_fu_1120_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_57_fu_1120_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal bitcast_ln11_fu_1131_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_1134_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln11_fu_1144_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln11_6_fu_1154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_fu_1148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_fu_1160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_608_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_fu_1166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln40_45_fu_1186_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp1_stage0_00001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component CNN_CNN_dcmp_64ns_64ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component CNN_CNN_add_32ns_32ns_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CNN_CNN_add_6ns_6ns_6_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component CNN_CNN_add_12ns_12ns_12_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component CNN_CNN_add_4ns_4ns_4_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component CNN_CNN_add_5ns_5ns_5_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component CNN_CNN_add_11ns_11ns_11_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component CNN_CNN_add_31ns_31ns_31_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component CNN_CNN_add_10ns_10ns_10_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component CNN_convolution_double_double_double_double_16_16_8_16_14_14_3_3_1_0_s_bias_conv6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component CNN_convolution_double_double_double_double_16_16_8_16_14_14_3_3_1_0_s_line_buffehbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component CNN_convolution_double_double_double_double_16_16_8_16_14_14_3_3_1_0_s_line_buffeibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component CNN_convolution_double_double_double_double_16_16_8_16_14_14_3_3_1_0_s_kernel_conv6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address2 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address3 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address4 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address5 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce5 : IN STD_LOGIC;
        q5 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address6 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce6 : IN STD_LOGIC;
        q6 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address7 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce7 : IN STD_LOGIC;
        q7 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address8 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce8 : IN STD_LOGIC;
        q8 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    bias_conv6_U : component CNN_convolution_double_double_double_double_16_16_8_16_14_14_3_3_1_0_s_bias_conv6
    generic map (
        DataWidth => 64,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bias_conv6_address0,
        ce0 => bias_conv6_ce0,
        q0 => bias_conv6_q0);

    line_buffer_1_3_U : component CNN_convolution_double_double_double_double_16_16_8_16_14_14_3_3_1_0_s_line_buffehbi
    generic map (
        DataWidth => 64,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_1_3_address0,
        ce0 => line_buffer_1_3_ce0,
        q0 => line_buffer_1_3_q0,
        address1 => line_buffer_1_3_address1,
        ce1 => line_buffer_1_3_ce1,
        we1 => line_buffer_1_3_we1,
        d1 => line_buffer_2_3_q0,
        q1 => line_buffer_1_3_q1);

    line_buffer_0_3_U : component CNN_convolution_double_double_double_double_16_16_8_16_14_14_3_3_1_0_s_line_buffeibs
    generic map (
        DataWidth => 64,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_0_3_address0,
        ce0 => line_buffer_0_3_ce0,
        we0 => line_buffer_0_3_we0,
        d0 => line_buffer_1_3_q0,
        q0 => line_buffer_0_3_q0,
        address1 => line_buffer_0_3_address1,
        ce1 => line_buffer_0_3_ce1,
        q1 => line_buffer_0_3_q1);

    line_buffer_2_3_U : component CNN_convolution_double_double_double_double_16_16_8_16_14_14_3_3_1_0_s_line_buffeibs
    generic map (
        DataWidth => 64,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_2_3_address0,
        ce0 => line_buffer_2_3_ce0,
        we0 => line_buffer_2_3_we0,
        d0 => line_buffer_2_3_d0,
        q0 => line_buffer_2_3_q0,
        address1 => line_buffer_2_3_address1,
        ce1 => line_buffer_2_3_ce1,
        q1 => line_buffer_2_3_q1);

    kernel_conv6_U : component CNN_convolution_double_double_double_double_16_16_8_16_14_14_3_3_1_0_s_kernel_conv6
    generic map (
        DataWidth => 64,
        AddressRange => 1152,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => kernel_conv6_address0,
        ce0 => kernel_conv6_ce0,
        q0 => kernel_conv6_q0,
        address1 => kernel_conv6_address1,
        ce1 => kernel_conv6_ce1,
        q1 => kernel_conv6_q1,
        address2 => kernel_conv6_address2,
        ce2 => kernel_conv6_ce2,
        q2 => kernel_conv6_q2,
        address3 => kernel_conv6_address3,
        ce3 => kernel_conv6_ce3,
        q3 => kernel_conv6_q3,
        address4 => kernel_conv6_address4,
        ce4 => kernel_conv6_ce4,
        q4 => kernel_conv6_q4,
        address5 => kernel_conv6_address5,
        ce5 => kernel_conv6_ce5,
        q5 => kernel_conv6_q5,
        address6 => kernel_conv6_address6,
        ce6 => kernel_conv6_ce6,
        q6 => kernel_conv6_q6,
        address7 => kernel_conv6_address7,
        ce7 => kernel_conv6_ce7,
        q7 => kernel_conv6_q7,
        address8 => kernel_conv6_address8,
        ce8 => kernel_conv6_ce8,
        q8 => kernel_conv6_q8);

    CNN_dadd_64ns_64ns_64_4_full_dsp_1_U262 : component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_reg_1470,
        din1 => ap_const_lv64_0,
        ce => ap_const_logic_1,
        dout => grp_fu_525_p2);

    CNN_dadd_64ns_64ns_64_4_full_dsp_1_U263 : component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_s_reg_1485,
        din1 => mul_0_1_reg_1475_pp1_iter8_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_530_p2);

    CNN_dadd_64ns_64ns_64_4_full_dsp_1_U264 : component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_22_0_1_reg_1495,
        din1 => mul_0_2_reg_1480_pp1_iter12_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_534_p2);

    CNN_dadd_64ns_64ns_64_4_full_dsp_1_U265 : component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_22_0_2_reg_1506,
        din1 => mul_1_reg_1511,
        ce => ap_const_logic_1,
        dout => grp_fu_538_p2);

    CNN_dadd_64ns_64ns_64_4_full_dsp_1_U266 : component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_22_1_reg_1526,
        din1 => mul_1_1_reg_1516_pp1_iter20_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_542_p2);

    CNN_dadd_64ns_64ns_64_4_full_dsp_1_U267 : component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_22_1_1_reg_1536,
        din1 => mul_1_2_reg_1521_pp1_iter24_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_546_p2);

    CNN_dadd_64ns_64ns_64_4_full_dsp_1_U268 : component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_22_1_2_reg_1547,
        din1 => mul_2_reg_1552,
        ce => ap_const_logic_1,
        dout => grp_fu_550_p2);

    CNN_dadd_64ns_64ns_64_4_full_dsp_1_U269 : component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_22_2_reg_1567,
        din1 => mul_2_1_reg_1557_pp1_iter32_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_554_p2);

    CNN_dadd_64ns_64ns_64_4_full_dsp_1_U270 : component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_22_2_1_reg_1572,
        din1 => mul_2_2_reg_1562_pp1_iter36_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_558_p2);

    CNN_dadd_64ns_64ns_64_4_full_dsp_1_U271 : component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_22_2_2_reg_1577,
        din1 => select_ln40_15_reg_1330,
        ce => ap_const_logic_1,
        dout => grp_fu_562_p2);

    CNN_dmul_64ns_64ns_64_4_max_dsp_1_U272 : component CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_phi_mux_window_buffer_load_0_phi_fu_475_p4,
        din1 => kernel_conv6_load_reg_1335,
        ce => ap_const_logic_1,
        dout => grp_fu_566_p2);

    CNN_dmul_64ns_64ns_64_4_max_dsp_1_U273 : component CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => window_buffer_load_11_0_reg_462,
        din1 => kernel_conv6_load_1_reg_1340,
        ce => ap_const_logic_1,
        dout => grp_fu_571_p2);

    CNN_dmul_64ns_64ns_64_4_max_dsp_1_U274 : component CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => line_buffer_0_3_load_2_reg_1464_pp1_iter2_reg,
        din1 => kernel_conv6_load_2_reg_1345,
        ce => ap_const_logic_1,
        dout => grp_fu_576_p2);

    CNN_dmul_64ns_64ns_64_4_max_dsp_1_U275 : component CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_phi_mux_window_buffer_load_1_phi_fu_496_p4,
        din1 => kernel_conv6_load_3_reg_1350,
        ce => ap_const_logic_1,
        dout => grp_fu_580_p2);

    CNN_dmul_64ns_64ns_64_4_max_dsp_1_U276 : component CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => window_buffer_load_11_1_reg_483,
        din1 => kernel_conv6_load_4_reg_1355,
        ce => ap_const_logic_1,
        dout => grp_fu_585_p2);

    CNN_dmul_64ns_64ns_64_4_max_dsp_1_U277 : component CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => line_buffer_1_3_load_3_reg_1500_pp1_iter14_reg,
        din1 => kernel_conv6_load_5_reg_1360,
        ce => ap_const_logic_1,
        dout => grp_fu_590_p2);

    CNN_dmul_64ns_64ns_64_4_max_dsp_1_U278 : component CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_phi_mux_window_buffer_load_2_phi_fu_517_p4,
        din1 => kernel_conv6_load_6_reg_1365,
        ce => ap_const_logic_1,
        dout => grp_fu_594_p2);

    CNN_dmul_64ns_64ns_64_4_max_dsp_1_U279 : component CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => window_buffer_load_11_2_reg_504,
        din1 => kernel_conv6_load_7_reg_1370,
        ce => ap_const_logic_1,
        dout => grp_fu_599_p2);

    CNN_dmul_64ns_64ns_64_4_max_dsp_1_U280 : component CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => line_buffer_2_3_load_3_reg_1541_pp1_iter26_reg,
        din1 => kernel_conv6_load_8_reg_1375,
        ce => ap_const_logic_1,
        dout => grp_fu_604_p2);

    CNN_dcmp_64ns_64ns_1_2_no_dsp_1_U281 : component CNN_CNN_dcmp_64ns_64ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_reg_1582,
        din1 => ap_const_lv64_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_608_p2);

    CNN_add_32ns_32ns_32_1_1_U282 : component CNN_CNN_add_32ns_32ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => shl_ln_fu_613_p3,
        din1 => ap_const_lv32_10,
        dout => add_ln31_fu_621_p2);

    CNN_add_32ns_32ns_32_1_1_U283 : component CNN_CNN_add_32ns_32ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => shl_ln_fu_613_p3,
        din1 => ap_const_lv32_F,
        dout => sub13_fu_633_p2);

    CNN_add_32ns_32ns_32_1_1_U284 : component CNN_CNN_add_32ns_32ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => shl_ln_fu_613_p3,
        din1 => ap_const_lv32_E,
        dout => sub47_fu_639_p2);

    CNN_add_6ns_6ns_6_1_1_U285 : component CNN_CNN_add_6ns_6ns_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        dout_WIDTH => 6)
    port map (
        din0 => add_ln83_10_fu_680_p0,
        din1 => add_ln83_10_fu_680_p1,
        dout => add_ln83_10_fu_680_p2);

    CNN_add_12ns_12ns_12_1_1_U286 : component CNN_CNN_add_12ns_12ns_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        din0 => ap_const_lv12_1,
        din1 => indvar_flatten113_reg_394,
        dout => add_ln39_fu_730_p2);

    CNN_add_4ns_4ns_4_1_1_U287 : component CNN_CNN_add_4ns_4ns_4_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        dout_WIDTH => 4)
    port map (
        din0 => ap_const_lv4_1,
        din1 => num_channel_reg_405,
        dout => add_ln39_13_fu_750_p2);

    CNN_add_6ns_6ns_6_1_1_U288 : component CNN_CNN_add_6ns_6ns_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        dout_WIDTH => 6)
    port map (
        din0 => add_ln83_12_fu_772_p0,
        din1 => add_ln83_12_fu_772_p1,
        dout => add_ln83_12_fu_772_p2);

    CNN_add_5ns_5ns_5_1_1_U289 : component CNN_CNN_add_5ns_5ns_5_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        din0 => ap_const_lv5_1,
        din1 => select_ln39_fu_742_p3,
        dout => add_ln40_fu_828_p2);

    CNN_add_11ns_11ns_11_1_1_U290 : component CNN_CNN_add_11ns_11ns_11_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        dout_WIDTH => 11)
    port map (
        din0 => ap_const_lv11_1,
        din1 => select_ln40_16_fu_879_p3,
        dout => add_ln40_37_fu_892_p2);

    CNN_add_11ns_11ns_11_1_1_U291 : component CNN_CNN_add_11ns_11ns_11_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        dout_WIDTH => 11)
    port map (
        din0 => ap_const_lv11_2,
        din1 => select_ln40_16_fu_879_p3,
        dout => add_ln40_38_fu_903_p2);

    CNN_add_11ns_11ns_11_1_1_U292 : component CNN_CNN_add_11ns_11ns_11_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        dout_WIDTH => 11)
    port map (
        din0 => ap_const_lv11_3,
        din1 => select_ln40_16_fu_879_p3,
        dout => add_ln40_39_fu_914_p2);

    CNN_add_11ns_11ns_11_1_1_U293 : component CNN_CNN_add_11ns_11ns_11_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        dout_WIDTH => 11)
    port map (
        din0 => ap_const_lv11_4,
        din1 => select_ln40_16_fu_879_p3,
        dout => add_ln40_40_fu_925_p2);

    CNN_add_11ns_11ns_11_1_1_U294 : component CNN_CNN_add_11ns_11ns_11_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        dout_WIDTH => 11)
    port map (
        din0 => ap_const_lv11_5,
        din1 => select_ln40_16_fu_879_p3,
        dout => add_ln40_41_fu_936_p2);

    CNN_add_11ns_11ns_11_1_1_U295 : component CNN_CNN_add_11ns_11ns_11_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        dout_WIDTH => 11)
    port map (
        din0 => ap_const_lv11_6,
        din1 => select_ln40_16_fu_879_p3,
        dout => add_ln40_42_fu_947_p2);

    CNN_add_11ns_11ns_11_1_1_U296 : component CNN_CNN_add_11ns_11ns_11_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        dout_WIDTH => 11)
    port map (
        din0 => ap_const_lv11_7,
        din1 => select_ln40_16_fu_879_p3,
        dout => add_ln40_43_fu_958_p2);

    CNN_add_11ns_11ns_11_1_1_U297 : component CNN_CNN_add_11ns_11ns_11_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        dout_WIDTH => 11)
    port map (
        din0 => ap_const_lv11_8,
        din1 => select_ln40_16_fu_879_p3,
        dout => add_ln40_44_fu_969_p2);

    CNN_add_5ns_5ns_5_1_1_U298 : component CNN_CNN_add_5ns_5ns_5_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        din0 => j_reg_440,
        din1 => ap_const_lv5_1,
        dout => add_ln42_fu_1044_p2);

    CNN_add_31ns_31ns_31_1_1_U299 : component CNN_CNN_add_31ns_31ns_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        din0 => b_reg_451,
        din1 => ap_const_lv31_1,
        dout => add_ln64_fu_1110_p2);

    CNN_add_4ns_4ns_4_1_1_U300 : component CNN_CNN_add_4ns_4ns_4_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        dout_WIDTH => 4)
    port map (
        din0 => ap_const_lv4_2,
        din1 => empty_57_fu_1120_p1,
        dout => empty_57_fu_1120_p2);

    CNN_add_5ns_5ns_5_1_1_U301 : component CNN_CNN_add_5ns_5ns_5_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        din0 => select_ln40_reg_1324,
        din1 => ap_const_lv5_1,
        dout => add_ln41_fu_1181_p2);

    CNN_add_10ns_10ns_10_1_1_U302 : component CNN_CNN_add_10ns_10ns_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => indvar_flatten_reg_416,
        din1 => ap_const_lv10_1,
        dout => add_ln40_45_fu_1186_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln42_reg_1204 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state5);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln42_reg_1204 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp1_flush_enable)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((cmp4827_reg_1218 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter11 <= ap_enable_reg_pp1_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter12 <= ap_enable_reg_pp1_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter13 <= ap_enable_reg_pp1_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter14 <= ap_enable_reg_pp1_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter15 <= ap_enable_reg_pp1_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter16 <= ap_enable_reg_pp1_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter17 <= ap_enable_reg_pp1_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter18 <= ap_enable_reg_pp1_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter19 <= ap_enable_reg_pp1_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter20 <= ap_enable_reg_pp1_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter21 <= ap_enable_reg_pp1_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter22 <= ap_enable_reg_pp1_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter23 <= ap_enable_reg_pp1_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter24 <= ap_enable_reg_pp1_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter25 <= ap_enable_reg_pp1_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter25_state34)) then 
                        ap_enable_reg_pp1_iter26 <= ap_enable_reg_pp1_iter24;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter26 <= ap_enable_reg_pp1_iter25;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter27 <= ap_enable_reg_pp1_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter28 <= ap_enable_reg_pp1_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter29 <= ap_enable_reg_pp1_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter30 <= ap_enable_reg_pp1_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter31 <= ap_enable_reg_pp1_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter32 <= ap_enable_reg_pp1_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter33 <= ap_enable_reg_pp1_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter34 <= ap_enable_reg_pp1_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter35 <= ap_enable_reg_pp1_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter36 <= ap_enable_reg_pp1_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter37 <= ap_enable_reg_pp1_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter38 <= ap_enable_reg_pp1_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter39 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter39 <= ap_enable_reg_pp1_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter40 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter40 <= ap_enable_reg_pp1_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter41 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter41 <= ap_enable_reg_pp1_iter40;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter42 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter42 <= ap_enable_reg_pp1_iter41;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter43 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter43 <= ap_enable_reg_pp1_iter42;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter44_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter44 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter44 <= ap_enable_reg_pp1_iter43;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter45_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter45 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter45 <= ap_enable_reg_pp1_iter44;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter46_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter46 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter46 <= ap_enable_reg_pp1_iter45;
                elsif (((cmp4827_reg_1218 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                    ap_enable_reg_pp1_iter46 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
                end if; 
            end if;
        end if;
    end process;


    b_reg_451_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp4827_reg_1218 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                b_reg_451 <= ap_const_lv31_0;
            elsif (((icmp_ln64_fu_1105_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                b_reg_451 <= add_ln64_fu_1110_p2;
            end if; 
        end if;
    end process;

    i_reg_428_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                i_reg_428 <= add_ln41_fu_1181_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_428 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten113_reg_394_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                indvar_flatten113_reg_394 <= add_ln39_reg_1246;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten113_reg_394 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_416_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                indvar_flatten_reg_416 <= select_ln40_18_fu_1192_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_416 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    j_reg_440_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln42_6_fu_1039_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_reg_440 <= add_ln42_fu_1044_p2;
            elsif (((icmp_ln42_reg_1204 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_reg_440 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    num_channel_reg_405_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                num_channel_reg_405 <= select_ln39_18_reg_1264;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                num_channel_reg_405 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    num_ker_reg_382_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                num_ker_reg_382 <= select_ln40_17_reg_1319;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                num_ker_reg_382 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    window_buffer_load_0_reg_472_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp4827_reg_1218 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                window_buffer_load_0_reg_472 <= line_buffer_0_3_q0;
            elsif (((icmp_ln64_reg_1444_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                window_buffer_load_0_reg_472 <= window_buffer_load_11_0_reg_462;
            end if; 
        end if;
    end process;

    window_buffer_load_11_0_reg_462_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp4827_reg_1218 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                window_buffer_load_11_0_reg_462 <= line_buffer_0_3_q1;
            elsif (((icmp_ln64_reg_1444_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                window_buffer_load_11_0_reg_462 <= line_buffer_0_3_load_2_reg_1464;
            end if; 
        end if;
    end process;

    window_buffer_load_11_1_reg_483_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp4827_reg_1218 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                window_buffer_load_11_1_reg_483 <= line_buffer_1_3_q1;
            elsif (((icmp_ln64_reg_1444_pp1_iter13_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                window_buffer_load_11_1_reg_483 <= line_buffer_1_3_load_3_reg_1500;
            end if; 
        end if;
    end process;

    window_buffer_load_11_2_reg_504_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp4827_reg_1218 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                window_buffer_load_11_2_reg_504 <= line_buffer_2_3_q1;
            elsif (((icmp_ln64_reg_1444_pp1_iter25_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                window_buffer_load_11_2_reg_504 <= line_buffer_2_3_load_3_reg_1541;
            end if; 
        end if;
    end process;

    window_buffer_load_1_reg_493_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp4827_reg_1218 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                window_buffer_load_1_reg_493 <= line_buffer_1_3_q0;
            elsif (((icmp_ln64_reg_1444_pp1_iter13_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                window_buffer_load_1_reg_493 <= window_buffer_load_11_1_reg_483;
            end if; 
        end if;
    end process;

    window_buffer_load_2_reg_514_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp4827_reg_1218 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                window_buffer_load_2_reg_514 <= line_buffer_2_3_q0;
            elsif (((icmp_ln64_reg_1444_pp1_iter25_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                window_buffer_load_2_reg_514 <= window_buffer_load_11_2_reg_504;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                add_ln31_reg_1199 <= add_ln31_fu_621_p2;
                bitcast_ln49_reg_1222 <= bitcast_ln49_fu_651_p1;
                cmp4827_reg_1218 <= cmp4827_fu_645_p2;
                icmp_ln42_reg_1204 <= icmp_ln42_fu_627_p2;
                sub13_reg_1208 <= sub13_fu_633_p2;
                sub47_reg_1213 <= sub47_fu_639_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln39_reg_1246 <= add_ln39_fu_730_p2;
                bias_conv6_load_reg_1238 <= bias_conv6_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln39_fu_724_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                and_ln39_reg_1258 <= and_ln39_fu_814_p2;
                icmp_ln40_reg_1251 <= icmp_ln40_fu_736_p2;
                select_ln39_18_reg_1264 <= select_ln39_18_fu_820_p3;
                select_ln40_17_reg_1319 <= select_ln40_17_fu_980_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                empty_52_reg_1227 <= empty_52_fu_660_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln42_6_reg_1385 <= icmp_ln42_6_fu_1039_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln64_reg_1444 <= icmp_ln64_fu_1105_p2;
                icmp_ln64_reg_1444_pp1_iter1_reg <= icmp_ln64_reg_1444;
                    p_cast_reg_1453_pp1_iter1_reg(3 downto 0) <= p_cast_reg_1453(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                icmp_ln64_reg_1444_pp1_iter10_reg <= icmp_ln64_reg_1444_pp1_iter9_reg;
                icmp_ln64_reg_1444_pp1_iter11_reg <= icmp_ln64_reg_1444_pp1_iter10_reg;
                icmp_ln64_reg_1444_pp1_iter12_reg <= icmp_ln64_reg_1444_pp1_iter11_reg;
                icmp_ln64_reg_1444_pp1_iter13_reg <= icmp_ln64_reg_1444_pp1_iter12_reg;
                icmp_ln64_reg_1444_pp1_iter14_reg <= icmp_ln64_reg_1444_pp1_iter13_reg;
                icmp_ln64_reg_1444_pp1_iter15_reg <= icmp_ln64_reg_1444_pp1_iter14_reg;
                icmp_ln64_reg_1444_pp1_iter16_reg <= icmp_ln64_reg_1444_pp1_iter15_reg;
                icmp_ln64_reg_1444_pp1_iter17_reg <= icmp_ln64_reg_1444_pp1_iter16_reg;
                icmp_ln64_reg_1444_pp1_iter18_reg <= icmp_ln64_reg_1444_pp1_iter17_reg;
                icmp_ln64_reg_1444_pp1_iter19_reg <= icmp_ln64_reg_1444_pp1_iter18_reg;
                icmp_ln64_reg_1444_pp1_iter20_reg <= icmp_ln64_reg_1444_pp1_iter19_reg;
                icmp_ln64_reg_1444_pp1_iter21_reg <= icmp_ln64_reg_1444_pp1_iter20_reg;
                icmp_ln64_reg_1444_pp1_iter22_reg <= icmp_ln64_reg_1444_pp1_iter21_reg;
                icmp_ln64_reg_1444_pp1_iter23_reg <= icmp_ln64_reg_1444_pp1_iter22_reg;
                icmp_ln64_reg_1444_pp1_iter24_reg <= icmp_ln64_reg_1444_pp1_iter23_reg;
                icmp_ln64_reg_1444_pp1_iter25_reg <= icmp_ln64_reg_1444_pp1_iter24_reg;
                icmp_ln64_reg_1444_pp1_iter26_reg <= icmp_ln64_reg_1444_pp1_iter25_reg;
                icmp_ln64_reg_1444_pp1_iter27_reg <= icmp_ln64_reg_1444_pp1_iter26_reg;
                icmp_ln64_reg_1444_pp1_iter28_reg <= icmp_ln64_reg_1444_pp1_iter27_reg;
                icmp_ln64_reg_1444_pp1_iter29_reg <= icmp_ln64_reg_1444_pp1_iter28_reg;
                icmp_ln64_reg_1444_pp1_iter2_reg <= icmp_ln64_reg_1444_pp1_iter1_reg;
                icmp_ln64_reg_1444_pp1_iter30_reg <= icmp_ln64_reg_1444_pp1_iter29_reg;
                icmp_ln64_reg_1444_pp1_iter31_reg <= icmp_ln64_reg_1444_pp1_iter30_reg;
                icmp_ln64_reg_1444_pp1_iter32_reg <= icmp_ln64_reg_1444_pp1_iter31_reg;
                icmp_ln64_reg_1444_pp1_iter33_reg <= icmp_ln64_reg_1444_pp1_iter32_reg;
                icmp_ln64_reg_1444_pp1_iter34_reg <= icmp_ln64_reg_1444_pp1_iter33_reg;
                icmp_ln64_reg_1444_pp1_iter35_reg <= icmp_ln64_reg_1444_pp1_iter34_reg;
                icmp_ln64_reg_1444_pp1_iter36_reg <= icmp_ln64_reg_1444_pp1_iter35_reg;
                icmp_ln64_reg_1444_pp1_iter37_reg <= icmp_ln64_reg_1444_pp1_iter36_reg;
                icmp_ln64_reg_1444_pp1_iter38_reg <= icmp_ln64_reg_1444_pp1_iter37_reg;
                icmp_ln64_reg_1444_pp1_iter39_reg <= icmp_ln64_reg_1444_pp1_iter38_reg;
                icmp_ln64_reg_1444_pp1_iter3_reg <= icmp_ln64_reg_1444_pp1_iter2_reg;
                icmp_ln64_reg_1444_pp1_iter40_reg <= icmp_ln64_reg_1444_pp1_iter39_reg;
                icmp_ln64_reg_1444_pp1_iter41_reg <= icmp_ln64_reg_1444_pp1_iter40_reg;
                icmp_ln64_reg_1444_pp1_iter42_reg <= icmp_ln64_reg_1444_pp1_iter41_reg;
                icmp_ln64_reg_1444_pp1_iter43_reg <= icmp_ln64_reg_1444_pp1_iter42_reg;
                icmp_ln64_reg_1444_pp1_iter44_reg <= icmp_ln64_reg_1444_pp1_iter43_reg;
                icmp_ln64_reg_1444_pp1_iter45_reg <= icmp_ln64_reg_1444_pp1_iter44_reg;
                icmp_ln64_reg_1444_pp1_iter4_reg <= icmp_ln64_reg_1444_pp1_iter3_reg;
                icmp_ln64_reg_1444_pp1_iter5_reg <= icmp_ln64_reg_1444_pp1_iter4_reg;
                icmp_ln64_reg_1444_pp1_iter6_reg <= icmp_ln64_reg_1444_pp1_iter5_reg;
                icmp_ln64_reg_1444_pp1_iter7_reg <= icmp_ln64_reg_1444_pp1_iter6_reg;
                icmp_ln64_reg_1444_pp1_iter8_reg <= icmp_ln64_reg_1444_pp1_iter7_reg;
                icmp_ln64_reg_1444_pp1_iter9_reg <= icmp_ln64_reg_1444_pp1_iter8_reg;
                line_buffer_0_3_load_2_reg_1464_pp1_iter2_reg <= line_buffer_0_3_load_2_reg_1464;
                line_buffer_1_3_load_3_reg_1500_pp1_iter14_reg <= line_buffer_1_3_load_3_reg_1500;
                line_buffer_2_3_load_3_reg_1541_pp1_iter26_reg <= line_buffer_2_3_load_3_reg_1541;
                mul_0_1_reg_1475_pp1_iter6_reg <= mul_0_1_reg_1475;
                mul_0_1_reg_1475_pp1_iter7_reg <= mul_0_1_reg_1475_pp1_iter6_reg;
                mul_0_1_reg_1475_pp1_iter8_reg <= mul_0_1_reg_1475_pp1_iter7_reg;
                mul_0_2_reg_1480_pp1_iter10_reg <= mul_0_2_reg_1480_pp1_iter9_reg;
                mul_0_2_reg_1480_pp1_iter11_reg <= mul_0_2_reg_1480_pp1_iter10_reg;
                mul_0_2_reg_1480_pp1_iter12_reg <= mul_0_2_reg_1480_pp1_iter11_reg;
                mul_0_2_reg_1480_pp1_iter7_reg <= mul_0_2_reg_1480;
                mul_0_2_reg_1480_pp1_iter8_reg <= mul_0_2_reg_1480_pp1_iter7_reg;
                mul_0_2_reg_1480_pp1_iter9_reg <= mul_0_2_reg_1480_pp1_iter8_reg;
                mul_1_1_reg_1516_pp1_iter18_reg <= mul_1_1_reg_1516;
                mul_1_1_reg_1516_pp1_iter19_reg <= mul_1_1_reg_1516_pp1_iter18_reg;
                mul_1_1_reg_1516_pp1_iter20_reg <= mul_1_1_reg_1516_pp1_iter19_reg;
                mul_1_2_reg_1521_pp1_iter19_reg <= mul_1_2_reg_1521;
                mul_1_2_reg_1521_pp1_iter20_reg <= mul_1_2_reg_1521_pp1_iter19_reg;
                mul_1_2_reg_1521_pp1_iter21_reg <= mul_1_2_reg_1521_pp1_iter20_reg;
                mul_1_2_reg_1521_pp1_iter22_reg <= mul_1_2_reg_1521_pp1_iter21_reg;
                mul_1_2_reg_1521_pp1_iter23_reg <= mul_1_2_reg_1521_pp1_iter22_reg;
                mul_1_2_reg_1521_pp1_iter24_reg <= mul_1_2_reg_1521_pp1_iter23_reg;
                mul_2_1_reg_1557_pp1_iter30_reg <= mul_2_1_reg_1557;
                mul_2_1_reg_1557_pp1_iter31_reg <= mul_2_1_reg_1557_pp1_iter30_reg;
                mul_2_1_reg_1557_pp1_iter32_reg <= mul_2_1_reg_1557_pp1_iter31_reg;
                mul_2_2_reg_1562_pp1_iter31_reg <= mul_2_2_reg_1562;
                mul_2_2_reg_1562_pp1_iter32_reg <= mul_2_2_reg_1562_pp1_iter31_reg;
                mul_2_2_reg_1562_pp1_iter33_reg <= mul_2_2_reg_1562_pp1_iter32_reg;
                mul_2_2_reg_1562_pp1_iter34_reg <= mul_2_2_reg_1562_pp1_iter33_reg;
                mul_2_2_reg_1562_pp1_iter35_reg <= mul_2_2_reg_1562_pp1_iter34_reg;
                mul_2_2_reg_1562_pp1_iter36_reg <= mul_2_2_reg_1562_pp1_iter35_reg;
                    p_cast_reg_1453_pp1_iter10_reg(3 downto 0) <= p_cast_reg_1453_pp1_iter9_reg(3 downto 0);
                    p_cast_reg_1453_pp1_iter11_reg(3 downto 0) <= p_cast_reg_1453_pp1_iter10_reg(3 downto 0);
                    p_cast_reg_1453_pp1_iter12_reg(3 downto 0) <= p_cast_reg_1453_pp1_iter11_reg(3 downto 0);
                    p_cast_reg_1453_pp1_iter13_reg(3 downto 0) <= p_cast_reg_1453_pp1_iter12_reg(3 downto 0);
                    p_cast_reg_1453_pp1_iter14_reg(3 downto 0) <= p_cast_reg_1453_pp1_iter13_reg(3 downto 0);
                    p_cast_reg_1453_pp1_iter15_reg(3 downto 0) <= p_cast_reg_1453_pp1_iter14_reg(3 downto 0);
                    p_cast_reg_1453_pp1_iter16_reg(3 downto 0) <= p_cast_reg_1453_pp1_iter15_reg(3 downto 0);
                    p_cast_reg_1453_pp1_iter17_reg(3 downto 0) <= p_cast_reg_1453_pp1_iter16_reg(3 downto 0);
                    p_cast_reg_1453_pp1_iter18_reg(3 downto 0) <= p_cast_reg_1453_pp1_iter17_reg(3 downto 0);
                    p_cast_reg_1453_pp1_iter19_reg(3 downto 0) <= p_cast_reg_1453_pp1_iter18_reg(3 downto 0);
                    p_cast_reg_1453_pp1_iter20_reg(3 downto 0) <= p_cast_reg_1453_pp1_iter19_reg(3 downto 0);
                    p_cast_reg_1453_pp1_iter21_reg(3 downto 0) <= p_cast_reg_1453_pp1_iter20_reg(3 downto 0);
                    p_cast_reg_1453_pp1_iter22_reg(3 downto 0) <= p_cast_reg_1453_pp1_iter21_reg(3 downto 0);
                    p_cast_reg_1453_pp1_iter23_reg(3 downto 0) <= p_cast_reg_1453_pp1_iter22_reg(3 downto 0);
                    p_cast_reg_1453_pp1_iter2_reg(3 downto 0) <= p_cast_reg_1453_pp1_iter1_reg(3 downto 0);
                    p_cast_reg_1453_pp1_iter3_reg(3 downto 0) <= p_cast_reg_1453_pp1_iter2_reg(3 downto 0);
                    p_cast_reg_1453_pp1_iter4_reg(3 downto 0) <= p_cast_reg_1453_pp1_iter3_reg(3 downto 0);
                    p_cast_reg_1453_pp1_iter5_reg(3 downto 0) <= p_cast_reg_1453_pp1_iter4_reg(3 downto 0);
                    p_cast_reg_1453_pp1_iter6_reg(3 downto 0) <= p_cast_reg_1453_pp1_iter5_reg(3 downto 0);
                    p_cast_reg_1453_pp1_iter7_reg(3 downto 0) <= p_cast_reg_1453_pp1_iter6_reg(3 downto 0);
                    p_cast_reg_1453_pp1_iter8_reg(3 downto 0) <= p_cast_reg_1453_pp1_iter7_reg(3 downto 0);
                    p_cast_reg_1453_pp1_iter9_reg(3 downto 0) <= p_cast_reg_1453_pp1_iter8_reg(3 downto 0);
                sum_reg_1582_pp1_iter45_reg <= sum_reg_1582;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln42_6_fu_1039_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    j_cast4_reg_1394(4 downto 0) <= j_cast4_fu_1050_p1(4 downto 0);
                line_buffer_1_3_addr_reg_1399 <= j_cast4_fu_1050_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                kernel_conv6_load_1_reg_1340 <= kernel_conv6_q1;
                kernel_conv6_load_2_reg_1345 <= kernel_conv6_q2;
                kernel_conv6_load_3_reg_1350 <= kernel_conv6_q3;
                kernel_conv6_load_4_reg_1355 <= kernel_conv6_q4;
                kernel_conv6_load_5_reg_1360 <= kernel_conv6_q5;
                kernel_conv6_load_6_reg_1365 <= kernel_conv6_q6;
                kernel_conv6_load_7_reg_1370 <= kernel_conv6_q7;
                kernel_conv6_load_8_reg_1375 <= kernel_conv6_q8;
                kernel_conv6_load_reg_1335 <= kernel_conv6_q0;
                select_ln40_15_reg_1330 <= select_ln40_15_fu_1006_p3;
                select_ln40_reg_1324 <= select_ln40_fu_998_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1444 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                line_buffer_0_3_load_2_reg_1464 <= line_buffer_0_3_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1444_pp1_iter12_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                line_buffer_1_3_load_3_reg_1500 <= line_buffer_1_3_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1444_pp1_iter24_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter25 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                line_buffer_2_3_load_3_reg_1541 <= line_buffer_2_3_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1444_pp1_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                mul_0_1_reg_1475 <= grp_fu_571_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1444_pp1_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                mul_0_2_reg_1480 <= grp_fu_576_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1444_pp1_iter16_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                mul_1_1_reg_1516 <= grp_fu_585_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1444_pp1_iter17_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                mul_1_2_reg_1521 <= grp_fu_590_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1444_pp1_iter15_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                mul_1_reg_1511 <= grp_fu_580_p2;
                sum_22_0_2_reg_1506 <= grp_fu_534_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1444_pp1_iter28_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                mul_2_1_reg_1557 <= grp_fu_599_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1444_pp1_iter29_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                mul_2_2_reg_1562 <= grp_fu_604_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1444_pp1_iter27_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                mul_2_reg_1552 <= grp_fu_594_p2;
                sum_22_1_2_reg_1547 <= grp_fu_546_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1444_pp1_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                mul_reg_1470 <= grp_fu_566_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln42_reg_1204 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                or_ln45_reg_1380 <= or_ln45_fu_1029_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_fu_1105_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                    p_cast_reg_1453(3 downto 0) <= p_cast_fu_1126_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1444_pp1_iter11_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                sum_22_0_1_reg_1495 <= grp_fu_530_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1444_pp1_iter23_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                sum_22_1_1_reg_1536 <= grp_fu_542_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1444_pp1_iter19_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                sum_22_1_reg_1526 <= grp_fu_538_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1444_pp1_iter35_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                sum_22_2_1_reg_1572 <= grp_fu_554_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1444_pp1_iter39_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                sum_22_2_2_reg_1577 <= grp_fu_558_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1444_pp1_iter31_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                sum_22_2_reg_1567 <= grp_fu_550_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1444_pp1_iter43_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                sum_reg_1582 <= grp_fu_562_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1444_pp1_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                sum_s_reg_1485 <= grp_fu_525_p2;
            end if;
        end if;
    end process;
    j_cast4_reg_1394(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast_reg_1453(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    p_cast_reg_1453_pp1_iter1_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    p_cast_reg_1453_pp1_iter2_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    p_cast_reg_1453_pp1_iter3_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    p_cast_reg_1453_pp1_iter4_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    p_cast_reg_1453_pp1_iter5_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    p_cast_reg_1453_pp1_iter6_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    p_cast_reg_1453_pp1_iter7_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    p_cast_reg_1453_pp1_iter8_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    p_cast_reg_1453_pp1_iter9_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    p_cast_reg_1453_pp1_iter10_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    p_cast_reg_1453_pp1_iter11_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    p_cast_reg_1453_pp1_iter12_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    p_cast_reg_1453_pp1_iter13_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    p_cast_reg_1453_pp1_iter14_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    p_cast_reg_1453_pp1_iter15_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    p_cast_reg_1453_pp1_iter16_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    p_cast_reg_1453_pp1_iter17_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    p_cast_reg_1453_pp1_iter18_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    p_cast_reg_1453_pp1_iter19_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    p_cast_reg_1453_pp1_iter20_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    p_cast_reg_1453_pp1_iter21_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    p_cast_reg_1453_pp1_iter22_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    p_cast_reg_1453_pp1_iter23_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln42_reg_1204, cmp4827_reg_1218, ap_CS_fsm_state3, icmp_ln39_fu_724_p2, ap_CS_fsm_state4, icmp_ln42_6_fu_1039_p2, ap_enable_reg_pp0_iter0, icmp_ln52_fu_1095_p2, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_enable_reg_pp1_iter25, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter24, ap_enable_reg_pp1_iter26, ap_enable_reg_pp1_iter45, ap_enable_reg_pp1_iter46)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln39_fu_724_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln42_reg_1204 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln42_6_fu_1039_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln42_6_fu_1039_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln52_fu_1095_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((cmp4827_reg_1218 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter26 = ap_const_logic_0) and (ap_enable_reg_pp1_iter24 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter25 = ap_const_logic_1))) and not(((ap_enable_reg_pp1_iter45 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter46 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter45 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter46 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter26 = ap_const_logic_0) and (ap_enable_reg_pp1_iter24 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter25 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln83_10_fu_680_p0 <= (empty_fu_668_p1 & ap_const_lv3_0);
    add_ln83_10_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(num_channel_reg_405),6));
    add_ln83_11_fu_712_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_708_p1) + unsigned(p_shl1_cast_fu_697_p1));
    add_ln83_12_fu_772_p0 <= (empty_59_fu_760_p1 & ap_const_lv3_0);
    add_ln83_12_fu_772_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln39_13_fu_750_p2),6));
    add_ln83_13_fu_867_p2 <= std_logic_vector(unsigned(p_shl2_cast_mid1_fu_863_p1) + unsigned(p_shl1_cast_mid1_fu_851_p1));
    add_ln83_14_fu_873_p2 <= std_logic_vector(unsigned(add_ln83_13_fu_867_p2) + unsigned(zext_ln40_47_fu_790_p1));
    add_ln83_fu_718_p2 <= std_logic_vector(unsigned(add_ln83_11_fu_712_p2) + unsigned(zext_ln83_fu_686_p1));
    and_ln11_fu_1166_p2 <= (or_ln11_fu_1160_p2 and grp_fu_608_p2);
    and_ln39_fu_814_p2 <= (xor_ln39_fu_802_p2 and icmp_ln41_fu_808_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state56 <= ap_CS_fsm(8);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp1_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp1_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp1_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp1_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp1_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp1_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp1_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp1_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp1_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp1_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp1_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp1_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp1_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp1_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp1_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp1_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp1_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp1_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp1_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp1_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp1_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp1_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp1_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp1_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp1_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp1_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp1_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp1_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp1_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp1_stage0_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp1_stage0_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp1_stage0_iter36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp1_stage0_iter37 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp1_stage0_iter38 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp1_stage0_iter39 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp1_stage0_iter40 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp1_stage0_iter41 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp1_stage0_iter42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp1_stage0_iter43 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp1_stage0_iter44 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp1_stage0_iter45 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp1_stage0_iter46 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state5_assign_proc : process(icmp_ln42_6_fu_1039_p2)
    begin
        if ((icmp_ln42_6_fu_1039_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter25_state34_assign_proc : process(ap_enable_reg_pp1_iter25, ap_enable_reg_pp1_iter24)
    begin
        if (((ap_enable_reg_pp1_iter24 = ap_const_logic_0) and (ap_enable_reg_pp1_iter25 = ap_const_logic_1))) then 
            ap_condition_pp1_exit_iter25_state34 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter25_state34 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_flush_enable_assign_proc : process(icmp_ln64_fu_1105_p2, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln64_fu_1105_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_condition_pp1_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp1_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln39_fu_724_p2)
    begin
        if ((((icmp_ln39_fu_724_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter13, ap_enable_reg_pp1_iter25, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter5, ap_enable_reg_pp1_iter6, ap_enable_reg_pp1_iter7, ap_enable_reg_pp1_iter8, ap_enable_reg_pp1_iter9, ap_enable_reg_pp1_iter10, ap_enable_reg_pp1_iter11, ap_enable_reg_pp1_iter12, ap_enable_reg_pp1_iter14, ap_enable_reg_pp1_iter15, ap_enable_reg_pp1_iter16, ap_enable_reg_pp1_iter17, ap_enable_reg_pp1_iter18, ap_enable_reg_pp1_iter19, ap_enable_reg_pp1_iter20, ap_enable_reg_pp1_iter21, ap_enable_reg_pp1_iter22, ap_enable_reg_pp1_iter23, ap_enable_reg_pp1_iter24, ap_enable_reg_pp1_iter26, ap_enable_reg_pp1_iter27, ap_enable_reg_pp1_iter28, ap_enable_reg_pp1_iter29, ap_enable_reg_pp1_iter30, ap_enable_reg_pp1_iter31, ap_enable_reg_pp1_iter32, ap_enable_reg_pp1_iter33, ap_enable_reg_pp1_iter34, ap_enable_reg_pp1_iter35, ap_enable_reg_pp1_iter36, ap_enable_reg_pp1_iter37, ap_enable_reg_pp1_iter38, ap_enable_reg_pp1_iter39, ap_enable_reg_pp1_iter40, ap_enable_reg_pp1_iter41, ap_enable_reg_pp1_iter42, ap_enable_reg_pp1_iter43, ap_enable_reg_pp1_iter44, ap_enable_reg_pp1_iter45, ap_enable_reg_pp1_iter46)
    begin
        if (((ap_enable_reg_pp1_iter46 = ap_const_logic_0) and (ap_enable_reg_pp1_iter45 = ap_const_logic_0) and (ap_enable_reg_pp1_iter44 = ap_const_logic_0) and (ap_enable_reg_pp1_iter43 = ap_const_logic_0) and (ap_enable_reg_pp1_iter42 = ap_const_logic_0) and (ap_enable_reg_pp1_iter41 = ap_const_logic_0) and (ap_enable_reg_pp1_iter40 = ap_const_logic_0) and (ap_enable_reg_pp1_iter39 = ap_const_logic_0) and (ap_enable_reg_pp1_iter38 = ap_const_logic_0) and (ap_enable_reg_pp1_iter37 = ap_const_logic_0) and (ap_enable_reg_pp1_iter36 = ap_const_logic_0) and (ap_enable_reg_pp1_iter35 = ap_const_logic_0) and (ap_enable_reg_pp1_iter34 = ap_const_logic_0) and (ap_enable_reg_pp1_iter33 = ap_const_logic_0) and (ap_enable_reg_pp1_iter32 = ap_const_logic_0) and (ap_enable_reg_pp1_iter31 = ap_const_logic_0) and (ap_enable_reg_pp1_iter30 = ap_const_logic_0) and (ap_enable_reg_pp1_iter29 = ap_const_logic_0) and (ap_enable_reg_pp1_iter28 = ap_const_logic_0) and (ap_enable_reg_pp1_iter27 = ap_const_logic_0) and (ap_enable_reg_pp1_iter26 = ap_const_logic_0) and (ap_enable_reg_pp1_iter24 = ap_const_logic_0) and (ap_enable_reg_pp1_iter23 = ap_const_logic_0) and (ap_enable_reg_pp1_iter22 = ap_const_logic_0) and (ap_enable_reg_pp1_iter21 = ap_const_logic_0) and (ap_enable_reg_pp1_iter20 = ap_const_logic_0) and (ap_enable_reg_pp1_iter19 = ap_const_logic_0) and (ap_enable_reg_pp1_iter18 = ap_const_logic_0) and (ap_enable_reg_pp1_iter17 = ap_const_logic_0) and (ap_enable_reg_pp1_iter16 = ap_const_logic_0) and (ap_enable_reg_pp1_iter15 = ap_const_logic_0) and (ap_enable_reg_pp1_iter14 = ap_const_logic_0) and (ap_enable_reg_pp1_iter12 = ap_const_logic_0) and (ap_enable_reg_pp1_iter11 = ap_const_logic_0) and (ap_enable_reg_pp1_iter10 = ap_const_logic_0) and (ap_enable_reg_pp1_iter9 = ap_const_logic_0) and (ap_enable_reg_pp1_iter8 = ap_const_logic_0) and (ap_enable_reg_pp1_iter7 = ap_const_logic_0) and (ap_enable_reg_pp1_iter6 = ap_const_logic_0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter25 = ap_const_logic_0) and (ap_enable_reg_pp1_iter13 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_window_buffer_load_0_phi_fu_475_p4_assign_proc : process(window_buffer_load_11_0_reg_462, window_buffer_load_0_reg_472, icmp_ln64_reg_1444_pp1_iter1_reg, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln64_reg_1444_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            ap_phi_mux_window_buffer_load_0_phi_fu_475_p4 <= window_buffer_load_11_0_reg_462;
        else 
            ap_phi_mux_window_buffer_load_0_phi_fu_475_p4 <= window_buffer_load_0_reg_472;
        end if; 
    end process;


    ap_phi_mux_window_buffer_load_1_phi_fu_496_p4_assign_proc : process(window_buffer_load_11_1_reg_483, window_buffer_load_1_reg_493, icmp_ln64_reg_1444_pp1_iter13_reg, ap_enable_reg_pp1_iter14, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln64_reg_1444_pp1_iter13_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter14 = ap_const_logic_1))) then 
            ap_phi_mux_window_buffer_load_1_phi_fu_496_p4 <= window_buffer_load_11_1_reg_483;
        else 
            ap_phi_mux_window_buffer_load_1_phi_fu_496_p4 <= window_buffer_load_1_reg_493;
        end if; 
    end process;


    ap_phi_mux_window_buffer_load_2_phi_fu_517_p4_assign_proc : process(window_buffer_load_11_2_reg_504, window_buffer_load_2_reg_514, icmp_ln64_reg_1444_pp1_iter25_reg, ap_enable_reg_pp1_iter26, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln64_reg_1444_pp1_iter25_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter26 = ap_const_logic_1))) then 
            ap_phi_mux_window_buffer_load_2_phi_fu_517_p4 <= window_buffer_load_11_2_reg_504;
        else 
            ap_phi_mux_window_buffer_load_2_phi_fu_517_p4 <= window_buffer_load_2_reg_514;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, icmp_ln39_fu_724_p2)
    begin
        if (((icmp_ln39_fu_724_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_cast_fu_1101_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_reg_451),32));

    bias_conv6_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, zext_ln40_fu_655_p1, zext_ln40_38_fu_834_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bias_conv6_address0 <= zext_ln40_38_fu_834_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            bias_conv6_address0 <= zext_ln40_fu_655_p1(4 - 1 downto 0);
        else 
            bias_conv6_address0 <= "XXXX";
        end if; 
    end process;


    bias_conv6_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            bias_conv6_ce0 <= ap_const_logic_1;
        else 
            bias_conv6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln11_fu_1131_p1 <= sum_reg_1582_pp1_iter45_reg;
    bitcast_ln49_fu_651_p1 <= p_read;
    cmp4827_fu_645_p2 <= "1" when (signed(sub47_fu_639_p2) > signed(ap_const_lv32_0)) else "0";
    empty_52_fu_660_p1 <= num_ker_reg_382(4 - 1 downto 0);
    empty_53_fu_1013_p1 <= select_ln40_fu_998_p3(4 - 1 downto 0);
    empty_57_fu_1120_p1 <= b_reg_451(4 - 1 downto 0);
    empty_59_fu_760_p1 <= add_ln39_13_fu_750_p2(3 - 1 downto 0);
    empty_60_fu_839_p1 <= add_ln40_fu_828_p2(4 - 1 downto 0);
    empty_fu_668_p1 <= num_channel_reg_405(3 - 1 downto 0);
    icmp_ln11_6_fu_1154_p2 <= "1" when (trunc_ln11_fu_1144_p1 = ap_const_lv52_0) else "0";
    icmp_ln11_fu_1148_p2 <= "0" when (tmp_fu_1134_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln39_fu_724_p2 <= "1" when (indvar_flatten113_reg_394 = ap_const_lv12_800) else "0";
    icmp_ln40_fu_736_p2 <= "1" when (indvar_flatten_reg_416 = ap_const_lv10_100) else "0";
    icmp_ln41_fu_808_p2 <= "1" when (i_reg_428 = ap_const_lv5_10) else "0";
    icmp_ln42_6_fu_1039_p2 <= "1" when (j_cast_fu_1035_p1 = add_ln31_reg_1199) else "0";
    icmp_ln42_fu_627_p2 <= "1" when (signed(add_ln31_fu_621_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln45_12_fu_1017_p2 <= "1" when (empty_53_fu_1013_p1 = ap_const_lv4_0) else "0";
    icmp_ln45_13_fu_1023_p2 <= "1" when (empty_53_fu_1013_p1 = ap_const_lv4_F) else "0";
    icmp_ln45_6_fu_1062_p2 <= "1" when (j_cast_fu_1035_p1 = sub13_reg_1208) else "0";
    icmp_ln45_fu_1056_p2 <= "1" when (j_reg_440 = ap_const_lv5_0) else "0";
    icmp_ln52_fu_1095_p2 <= "1" when (tmp_5_fu_1086_p4 = ap_const_lv4_0) else "0";
    icmp_ln64_fu_1105_p2 <= "1" when (b_cast_fu_1101_p1 = sub47_reg_1213) else "0";
    j_cast4_fu_1050_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_440),64));
    j_cast_fu_1035_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_440),32));
    kernel_conv6_address0 <= zext_ln83_14_fu_887_p1(11 - 1 downto 0);
    kernel_conv6_address1 <= zext_ln40_39_fu_898_p1(11 - 1 downto 0);
    kernel_conv6_address2 <= zext_ln40_40_fu_909_p1(11 - 1 downto 0);
    kernel_conv6_address3 <= zext_ln40_41_fu_920_p1(11 - 1 downto 0);
    kernel_conv6_address4 <= zext_ln40_42_fu_931_p1(11 - 1 downto 0);
    kernel_conv6_address5 <= zext_ln40_43_fu_942_p1(11 - 1 downto 0);
    kernel_conv6_address6 <= zext_ln40_44_fu_953_p1(11 - 1 downto 0);
    kernel_conv6_address7 <= zext_ln40_45_fu_964_p1(11 - 1 downto 0);
    kernel_conv6_address8 <= zext_ln40_46_fu_975_p1(11 - 1 downto 0);

    kernel_conv6_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            kernel_conv6_ce0 <= ap_const_logic_1;
        else 
            kernel_conv6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_conv6_ce1_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            kernel_conv6_ce1 <= ap_const_logic_1;
        else 
            kernel_conv6_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_conv6_ce2_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            kernel_conv6_ce2 <= ap_const_logic_1;
        else 
            kernel_conv6_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_conv6_ce3_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            kernel_conv6_ce3 <= ap_const_logic_1;
        else 
            kernel_conv6_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_conv6_ce4_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            kernel_conv6_ce4 <= ap_const_logic_1;
        else 
            kernel_conv6_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_conv6_ce5_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            kernel_conv6_ce5 <= ap_const_logic_1;
        else 
            kernel_conv6_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_conv6_ce6_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            kernel_conv6_ce6 <= ap_const_logic_1;
        else 
            kernel_conv6_ce6 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_conv6_ce7_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            kernel_conv6_ce7 <= ap_const_logic_1;
        else 
            kernel_conv6_ce7 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_conv6_ce8_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            kernel_conv6_ce8 <= ap_const_logic_1;
        else 
            kernel_conv6_ce8 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_0_3_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, j_cast4_reg_1394, ap_CS_fsm_state7, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            line_buffer_0_3_address0 <= ap_const_lv4_0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_0_3_address0 <= j_cast4_reg_1394(4 - 1 downto 0);
        else 
            line_buffer_0_3_address0 <= "XXXX";
        end if; 
    end process;


    line_buffer_0_3_address1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, p_cast_fu_1126_p1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            line_buffer_0_3_address1 <= p_cast_fu_1126_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            line_buffer_0_3_address1 <= ap_const_lv4_1;
        else 
            line_buffer_0_3_address1 <= "XXXX";
        end if; 
    end process;


    line_buffer_0_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state7, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            line_buffer_0_3_ce0 <= ap_const_logic_1;
        else 
            line_buffer_0_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_0_3_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_state7, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            line_buffer_0_3_ce1 <= ap_const_logic_1;
        else 
            line_buffer_0_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_0_3_we0_assign_proc : process(icmp_ln42_6_reg_1385, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln42_6_reg_1385 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_0_3_we0 <= ap_const_logic_1;
        else 
            line_buffer_0_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_1_3_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, j_cast4_fu_1050_p1, ap_CS_fsm_state7, p_cast_reg_1453_pp1_iter11_reg, ap_enable_reg_pp1_iter12, ap_block_pp1_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter12 = ap_const_logic_1))) then 
            line_buffer_1_3_address0 <= p_cast_reg_1453_pp1_iter11_reg(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            line_buffer_1_3_address0 <= ap_const_lv4_0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_1_3_address0 <= j_cast4_fu_1050_p1(4 - 1 downto 0);
        else 
            line_buffer_1_3_address0 <= "XXXX";
        end if; 
    end process;


    line_buffer_1_3_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, line_buffer_1_3_addr_reg_1399, ap_CS_fsm_state7, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            line_buffer_1_3_address1 <= ap_const_lv4_1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_1_3_address1 <= line_buffer_1_3_addr_reg_1399;
        else 
            line_buffer_1_3_address1 <= "XXXX";
        end if; 
    end process;


    line_buffer_1_3_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state7, ap_enable_reg_pp1_iter12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp1_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            line_buffer_1_3_ce0 <= ap_const_logic_1;
        else 
            line_buffer_1_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_1_3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state7, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            line_buffer_1_3_ce1 <= ap_const_logic_1;
        else 
            line_buffer_1_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_1_3_we1_assign_proc : process(icmp_ln42_6_reg_1385, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln42_6_reg_1385 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_1_3_we1 <= ap_const_logic_1;
        else 
            line_buffer_1_3_we1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_2_3_address0_assign_proc : process(icmp_ln42_6_fu_1039_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, j_cast4_fu_1050_p1, ap_CS_fsm_state7, ap_block_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            line_buffer_2_3_address0 <= ap_const_lv4_0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln42_6_fu_1039_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_2_3_address0 <= j_cast4_fu_1050_p1(4 - 1 downto 0);
        else 
            line_buffer_2_3_address0 <= "XXXX";
        end if; 
    end process;


    line_buffer_2_3_address1_assign_proc : process(ap_CS_fsm_state7, p_cast_reg_1453_pp1_iter23_reg, ap_enable_reg_pp1_iter24, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter24 = ap_const_logic_1))) then 
            line_buffer_2_3_address1 <= p_cast_reg_1453_pp1_iter23_reg(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            line_buffer_2_3_address1 <= ap_const_lv4_1;
        else 
            line_buffer_2_3_address1 <= "XXXX";
        end if; 
    end process;


    line_buffer_2_3_ce0_assign_proc : process(icmp_ln42_6_fu_1039_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln42_6_fu_1039_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            line_buffer_2_3_ce0 <= ap_const_logic_1;
        else 
            line_buffer_2_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_2_3_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_state7, ap_enable_reg_pp1_iter24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_enable_reg_pp1_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            line_buffer_2_3_ce1 <= ap_const_logic_1;
        else 
            line_buffer_2_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_2_3_d0 <= 
        ap_const_lv64_0 when (or_ln45_12_fu_1073_p2(0) = '1') else 
        bitcast_ln49_reg_1222;

    line_buffer_2_3_we0_assign_proc : process(icmp_ln42_6_fu_1039_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln42_6_fu_1039_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_2_3_we0 <= ap_const_logic_1;
        else 
            line_buffer_2_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln11_fu_1160_p2 <= (icmp_ln11_fu_1148_p2 or icmp_ln11_6_fu_1154_p2);
    or_ln40_fu_994_p2 <= (icmp_ln40_reg_1251 or and_ln39_reg_1258);
    or_ln45_11_fu_1067_p2 <= (icmp_ln45_fu_1056_p2 or icmp_ln45_6_fu_1062_p2);
    or_ln45_12_fu_1073_p2 <= (or_ln45_reg_1380 or or_ln45_11_fu_1067_p2);
    or_ln45_fu_1029_p2 <= (icmp_ln45_13_fu_1023_p2 or icmp_ln45_12_fu_1017_p2);
    output_conv6 <= 
        bitcast_ln11_fu_1131_p1 when (and_ln11_fu_1166_p2(0) = '1') else 
        ap_const_lv64_0;

    output_conv6_ap_vld_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln64_reg_1444_pp1_iter45_reg, ap_enable_reg_pp1_iter46)
    begin
        if (((icmp_ln64_reg_1444_pp1_iter45_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter46 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            output_conv6_ap_vld <= ap_const_logic_1;
        else 
            output_conv6_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_cast_fu_1126_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_57_fu_1120_p2),64));
    p_shl1_cast_fu_697_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_690_p3),11));
    p_shl1_cast_mid1_fu_851_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_mid1_fu_843_p3),11));
    p_shl1_fu_690_p3 <= (empty_52_reg_1227 & ap_const_lv6_0);
    p_shl1_mid1_fu_843_p3 <= (empty_60_fu_839_p1 & ap_const_lv6_0);
    p_shl2_cast_fu_708_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_fu_701_p3),11));
    p_shl2_cast_mid1_fu_863_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_mid1_fu_855_p3),11));
    p_shl2_fu_701_p3 <= (empty_52_reg_1227 & ap_const_lv3_0);
    p_shl2_mid1_fu_855_p3 <= (empty_60_fu_839_p1 & ap_const_lv3_0);
    select_ln39_15_fu_782_p3 <= 
        add_ln83_12_fu_772_p2 when (icmp_ln40_fu_736_p2(0) = '1') else 
        add_ln83_10_fu_680_p2;
    select_ln39_16_fu_988_p3 <= 
        ap_const_lv64_BF82DC17BAD41E47 when (icmp_ln40_reg_1251(0) = '1') else 
        bias_conv6_load_reg_1238;
    select_ln39_17_fu_794_p3 <= 
        zext_ln83_13_fu_778_p1 when (icmp_ln40_fu_736_p2(0) = '1') else 
        add_ln83_fu_718_p2;
    select_ln39_18_fu_820_p3 <= 
        add_ln39_13_fu_750_p2 when (icmp_ln40_fu_736_p2(0) = '1') else 
        num_channel_reg_405;
    select_ln39_fu_742_p3 <= 
        ap_const_lv5_0 when (icmp_ln40_fu_736_p2(0) = '1') else 
        num_ker_reg_382;
    select_ln40_15_fu_1006_p3 <= 
        bias_conv6_q0 when (and_ln39_reg_1258(0) = '1') else 
        select_ln39_16_fu_988_p3;
    select_ln40_16_fu_879_p3 <= 
        add_ln83_14_fu_873_p2 when (and_ln39_fu_814_p2(0) = '1') else 
        select_ln39_17_fu_794_p3;
    select_ln40_17_fu_980_p3 <= 
        add_ln40_fu_828_p2 when (and_ln39_fu_814_p2(0) = '1') else 
        select_ln39_fu_742_p3;
    select_ln40_18_fu_1192_p3 <= 
        ap_const_lv10_1 when (icmp_ln40_reg_1251(0) = '1') else 
        add_ln40_45_fu_1186_p2;
    select_ln40_fu_998_p3 <= 
        ap_const_lv5_0 when (or_ln40_fu_994_p2(0) = '1') else 
        i_reg_428;
    shl_ln_fu_613_p3 <= (padding & ap_const_lv1_0);
    tmp_5_fu_1086_p4 <= select_ln40_reg_1324(4 downto 1);
    tmp_fu_1134_p4 <= bitcast_ln11_fu_1131_p1(62 downto 52);
    trunc_ln11_fu_1144_p1 <= bitcast_ln11_fu_1131_p1(52 - 1 downto 0);
    xor_ln39_fu_802_p2 <= (icmp_ln40_fu_736_p2 xor ap_const_lv1_1);
    zext_ln40_38_fu_834_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_fu_828_p2),64));
    zext_ln40_39_fu_898_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_37_fu_892_p2),64));
    zext_ln40_40_fu_909_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_38_fu_903_p2),64));
    zext_ln40_41_fu_920_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_39_fu_914_p2),64));
    zext_ln40_42_fu_931_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_40_fu_925_p2),64));
    zext_ln40_43_fu_942_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_41_fu_936_p2),64));
    zext_ln40_44_fu_953_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_42_fu_947_p2),64));
    zext_ln40_45_fu_964_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_43_fu_958_p2),64));
    zext_ln40_46_fu_975_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_44_fu_969_p2),64));
    zext_ln40_47_fu_790_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln39_15_fu_782_p3),11));
    zext_ln40_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(num_ker_reg_382),64));
    zext_ln83_13_fu_778_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln83_12_fu_772_p2),11));
    zext_ln83_14_fu_887_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln40_16_fu_879_p3),64));
    zext_ln83_fu_686_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln83_10_fu_680_p2),11));
end behav;
