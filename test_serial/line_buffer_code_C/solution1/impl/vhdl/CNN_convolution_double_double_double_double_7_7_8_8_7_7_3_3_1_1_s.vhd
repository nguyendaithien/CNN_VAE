-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CNN_convolution_double_double_double_double_7_7_8_8_7_7_3_3_1_1_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (63 downto 0);
    output_conv3 : OUT STD_LOGIC_VECTOR (63 downto 0);
    output_conv3_ap_vld : OUT STD_LOGIC;
    padding : IN STD_LOGIC_VECTOR (30 downto 0) );
end;


architecture behav of CNN_convolution_double_double_double_double_7_7_8_8_7_7_3_3_1_1_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv10_240 : STD_LOGIC_VECTOR (9 downto 0) := "1001000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv8_48 : STD_LOGIC_VECTOR (7 downto 0) := "01001000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv10_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000011";
    constant ap_const_lv10_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_const_lv10_5 : STD_LOGIC_VECTOR (9 downto 0) := "0000000101";
    constant ap_const_lv10_6 : STD_LOGIC_VECTOR (9 downto 0) := "0000000110";
    constant ap_const_lv10_7 : STD_LOGIC_VECTOR (9 downto 0) := "0000000111";
    constant ap_const_lv10_8 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_const_lv64_BFB93BC47C464C96 : STD_LOGIC_VECTOR (63 downto 0) := "1011111110111001001110111100010001111100010001100100110010010110";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal bias_conv3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal bias_conv3_ce0 : STD_LOGIC;
    signal bias_conv3_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_1_5_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal line_buffer_1_5_ce0 : STD_LOGIC;
    signal line_buffer_1_5_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_1_5_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal line_buffer_1_5_ce1 : STD_LOGIC;
    signal line_buffer_1_5_we1 : STD_LOGIC;
    signal line_buffer_1_5_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_0_5_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal line_buffer_0_5_ce0 : STD_LOGIC;
    signal line_buffer_0_5_we0 : STD_LOGIC;
    signal line_buffer_0_5_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_0_5_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal line_buffer_0_5_ce1 : STD_LOGIC;
    signal line_buffer_0_5_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_2_5_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal line_buffer_2_5_ce0 : STD_LOGIC;
    signal line_buffer_2_5_we0 : STD_LOGIC;
    signal line_buffer_2_5_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_2_5_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_2_5_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal line_buffer_2_5_ce1 : STD_LOGIC;
    signal line_buffer_2_5_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv3_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal kernel_conv3_ce0 : STD_LOGIC;
    signal kernel_conv3_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv3_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal kernel_conv3_ce1 : STD_LOGIC;
    signal kernel_conv3_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv3_address2 : STD_LOGIC_VECTOR (9 downto 0);
    signal kernel_conv3_ce2 : STD_LOGIC;
    signal kernel_conv3_q2 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv3_address3 : STD_LOGIC_VECTOR (9 downto 0);
    signal kernel_conv3_ce3 : STD_LOGIC;
    signal kernel_conv3_q3 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv3_address4 : STD_LOGIC_VECTOR (9 downto 0);
    signal kernel_conv3_ce4 : STD_LOGIC;
    signal kernel_conv3_q4 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv3_address5 : STD_LOGIC_VECTOR (9 downto 0);
    signal kernel_conv3_ce5 : STD_LOGIC;
    signal kernel_conv3_q5 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv3_address6 : STD_LOGIC_VECTOR (9 downto 0);
    signal kernel_conv3_ce6 : STD_LOGIC;
    signal kernel_conv3_q6 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv3_address7 : STD_LOGIC_VECTOR (9 downto 0);
    signal kernel_conv3_ce7 : STD_LOGIC;
    signal kernel_conv3_q7 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv3_address8 : STD_LOGIC_VECTOR (9 downto 0);
    signal kernel_conv3_ce8 : STD_LOGIC;
    signal kernel_conv3_q8 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_reg_432 : STD_LOGIC_VECTOR (2 downto 0);
    signal b_reg_443 : STD_LOGIC_VECTOR (30 downto 0);
    signal window_buffer_load_3_0_reg_454 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state9_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state12_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state13_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_state14_pp1_stage0_iter5 : BOOLEAN;
    signal ap_block_state15_pp1_stage0_iter6 : BOOLEAN;
    signal ap_block_state16_pp1_stage0_iter7 : BOOLEAN;
    signal ap_block_state17_pp1_stage0_iter8 : BOOLEAN;
    signal ap_block_state18_pp1_stage0_iter9 : BOOLEAN;
    signal ap_block_state19_pp1_stage0_iter10 : BOOLEAN;
    signal ap_block_state20_pp1_stage0_iter11 : BOOLEAN;
    signal ap_block_state21_pp1_stage0_iter12 : BOOLEAN;
    signal ap_block_state22_pp1_stage0_iter13 : BOOLEAN;
    signal ap_block_state23_pp1_stage0_iter14 : BOOLEAN;
    signal ap_block_state24_pp1_stage0_iter15 : BOOLEAN;
    signal ap_block_state25_pp1_stage0_iter16 : BOOLEAN;
    signal ap_block_state26_pp1_stage0_iter17 : BOOLEAN;
    signal ap_block_state27_pp1_stage0_iter18 : BOOLEAN;
    signal ap_block_state28_pp1_stage0_iter19 : BOOLEAN;
    signal ap_block_state29_pp1_stage0_iter20 : BOOLEAN;
    signal ap_block_state30_pp1_stage0_iter21 : BOOLEAN;
    signal ap_block_state31_pp1_stage0_iter22 : BOOLEAN;
    signal ap_block_state32_pp1_stage0_iter23 : BOOLEAN;
    signal ap_block_state33_pp1_stage0_iter24 : BOOLEAN;
    signal ap_block_state34_pp1_stage0_iter25 : BOOLEAN;
    signal ap_block_state35_pp1_stage0_iter26 : BOOLEAN;
    signal ap_block_state36_pp1_stage0_iter27 : BOOLEAN;
    signal ap_block_state37_pp1_stage0_iter28 : BOOLEAN;
    signal ap_block_state38_pp1_stage0_iter29 : BOOLEAN;
    signal ap_block_state39_pp1_stage0_iter30 : BOOLEAN;
    signal ap_block_state40_pp1_stage0_iter31 : BOOLEAN;
    signal ap_block_state41_pp1_stage0_iter32 : BOOLEAN;
    signal ap_block_state42_pp1_stage0_iter33 : BOOLEAN;
    signal ap_block_state43_pp1_stage0_iter34 : BOOLEAN;
    signal ap_block_state44_pp1_stage0_iter35 : BOOLEAN;
    signal ap_block_state45_pp1_stage0_iter36 : BOOLEAN;
    signal ap_block_state46_pp1_stage0_iter37 : BOOLEAN;
    signal ap_block_state47_pp1_stage0_iter38 : BOOLEAN;
    signal ap_block_state48_pp1_stage0_iter39 : BOOLEAN;
    signal ap_block_state49_pp1_stage0_iter40 : BOOLEAN;
    signal ap_block_state50_pp1_stage0_iter41 : BOOLEAN;
    signal ap_block_state51_pp1_stage0_iter42 : BOOLEAN;
    signal ap_block_state52_pp1_stage0_iter43 : BOOLEAN;
    signal ap_block_state53_pp1_stage0_iter44 : BOOLEAN;
    signal ap_block_state54_pp1_stage0_iter45 : BOOLEAN;
    signal ap_block_state55_pp1_stage0_iter46 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal window_buffer_load_0_reg_464 : STD_LOGIC_VECTOR (63 downto 0);
    signal window_buffer_load_3_1_reg_475 : STD_LOGIC_VECTOR (63 downto 0);
    signal window_buffer_load_1_reg_485 : STD_LOGIC_VECTOR (63 downto 0);
    signal window_buffer_load_3_2_reg_496 : STD_LOGIC_VECTOR (63 downto 0);
    signal window_buffer_load_2_reg_506 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln31_fu_613_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln31_reg_1155 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln42_fu_619_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_reg_1160 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub13_fu_625_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub13_reg_1164 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub47_fu_631_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub47_reg_1169 : STD_LOGIC_VECTOR (31 downto 0);
    signal cmp4827_fu_637_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp4827_reg_1174 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln49_fu_643_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln49_reg_1178 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_23_fu_652_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_23_reg_1183 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal bias_conv3_load_reg_1194 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln39_fu_706_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln39_reg_1202 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln40_fu_712_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_reg_1207 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_fu_700_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln39_fu_790_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln39_reg_1214 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln39_8_fu_796_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln39_8_reg_1220 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln40_7_fu_940_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln40_7_reg_1275 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln40_fu_958_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln40_reg_1280 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal select_ln40_5_fu_966_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln40_5_reg_1286 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv3_load_reg_1291 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv3_load_1_reg_1296 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv3_load_2_reg_1301 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv3_load_3_reg_1306 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv3_load_4_reg_1311 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv3_load_5_reg_1316 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv3_load_6_reg_1321 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv3_load_7_reg_1326 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv3_load_8_reg_1331 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln45_fu_985_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln45_reg_1336 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_2_fu_995_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_2_reg_1341 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state5_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln42_fu_1000_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal j_cast4_fu_1006_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_cast4_reg_1350 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_1_5_addr_reg_1355 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln52_fu_1051_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln64_fu_1061_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1400 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal icmp_ln64_reg_1400_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1400_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1400_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1400_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1400_pp1_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1400_pp1_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1400_pp1_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1400_pp1_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1400_pp1_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1400_pp1_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1400_pp1_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1400_pp1_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1400_pp1_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1400_pp1_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1400_pp1_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1400_pp1_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1400_pp1_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1400_pp1_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1400_pp1_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1400_pp1_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1400_pp1_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1400_pp1_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1400_pp1_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1400_pp1_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1400_pp1_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1400_pp1_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1400_pp1_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1400_pp1_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1400_pp1_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1400_pp1_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1400_pp1_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1400_pp1_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1400_pp1_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1400_pp1_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1400_pp1_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1400_pp1_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1400_pp1_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1400_pp1_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1400_pp1_iter39_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1400_pp1_iter40_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1400_pp1_iter41_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1400_pp1_iter42_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1400_pp1_iter43_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1400_pp1_iter44_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1400_pp1_iter45_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln64_fu_1066_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal p_cast_fu_1082_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_1409 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_1409_pp1_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_1409_pp1_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_1409_pp1_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_1409_pp1_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_1409_pp1_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_1409_pp1_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_1409_pp1_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_1409_pp1_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_1409_pp1_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_1409_pp1_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_1409_pp1_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_1409_pp1_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_1409_pp1_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_1409_pp1_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_1409_pp1_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_1409_pp1_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_1409_pp1_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_1409_pp1_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_1409_pp1_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_1409_pp1_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_1409_pp1_iter21_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_1409_pp1_iter22_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_reg_1409_pp1_iter23_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_0_5_load_2_reg_1420 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal line_buffer_0_5_load_2_reg_1420_pp1_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_558_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_reg_1426 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_563_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_1_reg_1431 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_1_reg_1431_pp1_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_1_reg_1431_pp1_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_1_reg_1431_pp1_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_568_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_2_reg_1436 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_2_reg_1436_pp1_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_2_reg_1436_pp1_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_2_reg_1436_pp1_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_2_reg_1436_pp1_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_2_reg_1436_pp1_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_2_reg_1436_pp1_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_517_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_4_reg_1441 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_522_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_4_0_1_reg_1451 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_1_5_load_3_reg_1456 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp1_iter13 : STD_LOGIC := '0';
    signal line_buffer_1_5_load_3_reg_1456_pp1_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_526_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_4_0_2_reg_1462 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_572_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_reg_1467 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_577_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_1_reg_1472 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_1_reg_1472_pp1_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_1_reg_1472_pp1_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_1_reg_1472_pp1_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_582_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_1477 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_1477_pp1_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_1477_pp1_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_1477_pp1_iter21_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_1477_pp1_iter22_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_1477_pp1_iter23_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_1477_pp1_iter24_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_530_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_4_1_reg_1482 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_534_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_4_1_1_reg_1492 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_2_5_load_3_reg_1497 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp1_iter25 : STD_LOGIC := '0';
    signal line_buffer_2_5_load_3_reg_1497_pp1_iter26_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_538_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_4_1_2_reg_1503 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_586_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_reg_1508 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_591_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_1_reg_1513 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_1_reg_1513_pp1_iter30_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_1_reg_1513_pp1_iter31_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_1_reg_1513_pp1_iter32_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_596_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1518 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1518_pp1_iter31_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1518_pp1_iter32_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1518_pp1_iter33_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1518_pp1_iter34_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1518_pp1_iter35_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1518_pp1_iter36_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_542_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_4_2_reg_1523 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_546_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_4_2_1_reg_1528 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_550_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_4_2_2_reg_1533 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_554_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_reg_1538 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_reg_1538_pp1_iter45_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln41_fu_1137_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal select_ln40_8_fu_1148_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter26 : STD_LOGIC := '0';
    signal ap_condition_pp1_exit_iter25_state34 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter41 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter42 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter43 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter44 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter45 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter46 : STD_LOGIC := '0';
    signal num_ker_reg_374 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten109_reg_386 : STD_LOGIC_VECTOR (9 downto 0);
    signal num_channel_reg_397 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_reg_408 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_420 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_window_buffer_load_0_phi_fu_467_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_window_buffer_load_1_phi_fu_488_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_window_buffer_load_2_phi_fu_509_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_fu_647_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_10_fu_810_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln83_8_fu_847_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_11_fu_858_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_12_fu_869_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_13_fu_880_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_14_fu_891_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_15_fu_902_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_16_fu_913_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_17_fu_924_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_18_fu_935_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal shl_ln_fu_605_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_660_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln83_4_fu_672_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln83_4_fu_672_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln83_4_fu_672_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_682_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln83_fu_694_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln83_fu_694_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln39_2_fu_726_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_29_fu_736_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln83_5_fu_748_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln83_5_fu_748_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln83_5_fu_748_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln39_5_fu_758_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln83_6_fu_754_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln83_fu_694_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln41_fu_784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln39_fu_778_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln39_fu_718_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln40_fu_804_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_30_fu_815_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_mid1_fu_819_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln83_6_fu_833_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln83_6_fu_833_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln83_6_fu_833_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln39_7_fu_770_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln40_6_fu_839_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln40_10_fu_852_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln40_11_fu_863_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln40_12_fu_874_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln40_13_fu_885_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln40_14_fu_896_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln40_15_fu_907_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln40_16_fu_918_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln40_17_fu_929_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln40_fu_954_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln39_6_fu_948_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln45_4_fu_973_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_5_fu_979_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_cast_fu_991_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln45_2_fu_1018_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_fu_1012_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln45_3_fu_1023_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln45_4_fu_1029_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_1042_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal b_cast_fu_1057_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_27_fu_1076_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_27_fu_1076_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal bitcast_ln11_fu_1087_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_1090_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln11_fu_1100_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln11_2_fu_1110_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_fu_1104_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_fu_1116_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_fu_1122_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln40_18_fu_1142_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp1_stage0_00001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component CNN_CNN_dcmp_64ns_64ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component CNN_CNN_add_32ns_32ns_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CNN_CNN_add_6ns_6ns_6_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component CNN_CNN_add_10ns_10ns_10_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component CNN_CNN_add_4ns_4ns_4_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component CNN_CNN_add_3ns_3ns_3_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component CNN_CNN_add_31ns_31ns_31_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component CNN_CNN_add_8ns_8ns_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component CNN_convolution_double_double_double_double_7_7_8_8_7_7_3_3_1_1_s_bias_conv3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component CNN_convolution_double_double_double_double_7_7_8_8_7_7_3_3_1_1_s_line_buffer_1_5 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component CNN_convolution_double_double_double_double_7_7_8_8_7_7_3_3_1_1_s_line_buffer_0_5 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component CNN_convolution_double_double_double_double_7_7_8_8_7_7_3_3_1_1_s_kernel_conv3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address3 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address4 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address5 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce5 : IN STD_LOGIC;
        q5 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address6 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce6 : IN STD_LOGIC;
        q6 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address7 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce7 : IN STD_LOGIC;
        q7 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address8 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce8 : IN STD_LOGIC;
        q8 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    bias_conv3_U : component CNN_convolution_double_double_double_double_7_7_8_8_7_7_3_3_1_1_s_bias_conv3
    generic map (
        DataWidth => 64,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bias_conv3_address0,
        ce0 => bias_conv3_ce0,
        q0 => bias_conv3_q0);

    line_buffer_1_5_U : component CNN_convolution_double_double_double_double_7_7_8_8_7_7_3_3_1_1_s_line_buffer_1_5
    generic map (
        DataWidth => 64,
        AddressRange => 7,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_1_5_address0,
        ce0 => line_buffer_1_5_ce0,
        q0 => line_buffer_1_5_q0,
        address1 => line_buffer_1_5_address1,
        ce1 => line_buffer_1_5_ce1,
        we1 => line_buffer_1_5_we1,
        d1 => line_buffer_2_5_q0,
        q1 => line_buffer_1_5_q1);

    line_buffer_0_5_U : component CNN_convolution_double_double_double_double_7_7_8_8_7_7_3_3_1_1_s_line_buffer_0_5
    generic map (
        DataWidth => 64,
        AddressRange => 7,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_0_5_address0,
        ce0 => line_buffer_0_5_ce0,
        we0 => line_buffer_0_5_we0,
        d0 => line_buffer_1_5_q0,
        q0 => line_buffer_0_5_q0,
        address1 => line_buffer_0_5_address1,
        ce1 => line_buffer_0_5_ce1,
        q1 => line_buffer_0_5_q1);

    line_buffer_2_5_U : component CNN_convolution_double_double_double_double_7_7_8_8_7_7_3_3_1_1_s_line_buffer_0_5
    generic map (
        DataWidth => 64,
        AddressRange => 7,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_2_5_address0,
        ce0 => line_buffer_2_5_ce0,
        we0 => line_buffer_2_5_we0,
        d0 => line_buffer_2_5_d0,
        q0 => line_buffer_2_5_q0,
        address1 => line_buffer_2_5_address1,
        ce1 => line_buffer_2_5_ce1,
        q1 => line_buffer_2_5_q1);

    kernel_conv3_U : component CNN_convolution_double_double_double_double_7_7_8_8_7_7_3_3_1_1_s_kernel_conv3
    generic map (
        DataWidth => 64,
        AddressRange => 576,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => kernel_conv3_address0,
        ce0 => kernel_conv3_ce0,
        q0 => kernel_conv3_q0,
        address1 => kernel_conv3_address1,
        ce1 => kernel_conv3_ce1,
        q1 => kernel_conv3_q1,
        address2 => kernel_conv3_address2,
        ce2 => kernel_conv3_ce2,
        q2 => kernel_conv3_q2,
        address3 => kernel_conv3_address3,
        ce3 => kernel_conv3_ce3,
        q3 => kernel_conv3_q3,
        address4 => kernel_conv3_address4,
        ce4 => kernel_conv3_ce4,
        q4 => kernel_conv3_q4,
        address5 => kernel_conv3_address5,
        ce5 => kernel_conv3_ce5,
        q5 => kernel_conv3_q5,
        address6 => kernel_conv3_address6,
        ce6 => kernel_conv3_ce6,
        q6 => kernel_conv3_q6,
        address7 => kernel_conv3_address7,
        ce7 => kernel_conv3_ce7,
        q7 => kernel_conv3_q7,
        address8 => kernel_conv3_address8,
        ce8 => kernel_conv3_ce8,
        q8 => kernel_conv3_q8);

    CNN_dadd_64ns_64ns_64_4_full_dsp_1_U108 : component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_reg_1426,
        din1 => ap_const_lv64_0,
        ce => ap_const_logic_1,
        dout => grp_fu_517_p2);

    CNN_dadd_64ns_64ns_64_4_full_dsp_1_U109 : component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_4_reg_1441,
        din1 => mul_0_1_reg_1431_pp1_iter8_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_522_p2);

    CNN_dadd_64ns_64ns_64_4_full_dsp_1_U110 : component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_4_0_1_reg_1451,
        din1 => mul_0_2_reg_1436_pp1_iter12_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_526_p2);

    CNN_dadd_64ns_64ns_64_4_full_dsp_1_U111 : component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_4_0_2_reg_1462,
        din1 => mul_1_reg_1467,
        ce => ap_const_logic_1,
        dout => grp_fu_530_p2);

    CNN_dadd_64ns_64ns_64_4_full_dsp_1_U112 : component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_4_1_reg_1482,
        din1 => mul_1_1_reg_1472_pp1_iter20_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_534_p2);

    CNN_dadd_64ns_64ns_64_4_full_dsp_1_U113 : component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_4_1_1_reg_1492,
        din1 => mul_1_2_reg_1477_pp1_iter24_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_538_p2);

    CNN_dadd_64ns_64ns_64_4_full_dsp_1_U114 : component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_4_1_2_reg_1503,
        din1 => mul_2_reg_1508,
        ce => ap_const_logic_1,
        dout => grp_fu_542_p2);

    CNN_dadd_64ns_64ns_64_4_full_dsp_1_U115 : component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_4_2_reg_1523,
        din1 => mul_2_1_reg_1513_pp1_iter32_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_546_p2);

    CNN_dadd_64ns_64ns_64_4_full_dsp_1_U116 : component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_4_2_1_reg_1528,
        din1 => mul_2_2_reg_1518_pp1_iter36_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_550_p2);

    CNN_dadd_64ns_64ns_64_4_full_dsp_1_U117 : component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_4_2_2_reg_1533,
        din1 => select_ln40_5_reg_1286,
        ce => ap_const_logic_1,
        dout => grp_fu_554_p2);

    CNN_dmul_64ns_64ns_64_4_max_dsp_1_U118 : component CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_phi_mux_window_buffer_load_0_phi_fu_467_p4,
        din1 => kernel_conv3_load_reg_1291,
        ce => ap_const_logic_1,
        dout => grp_fu_558_p2);

    CNN_dmul_64ns_64ns_64_4_max_dsp_1_U119 : component CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => window_buffer_load_3_0_reg_454,
        din1 => kernel_conv3_load_1_reg_1296,
        ce => ap_const_logic_1,
        dout => grp_fu_563_p2);

    CNN_dmul_64ns_64ns_64_4_max_dsp_1_U120 : component CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => line_buffer_0_5_load_2_reg_1420_pp1_iter2_reg,
        din1 => kernel_conv3_load_2_reg_1301,
        ce => ap_const_logic_1,
        dout => grp_fu_568_p2);

    CNN_dmul_64ns_64ns_64_4_max_dsp_1_U121 : component CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_phi_mux_window_buffer_load_1_phi_fu_488_p4,
        din1 => kernel_conv3_load_3_reg_1306,
        ce => ap_const_logic_1,
        dout => grp_fu_572_p2);

    CNN_dmul_64ns_64ns_64_4_max_dsp_1_U122 : component CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => window_buffer_load_3_1_reg_475,
        din1 => kernel_conv3_load_4_reg_1311,
        ce => ap_const_logic_1,
        dout => grp_fu_577_p2);

    CNN_dmul_64ns_64ns_64_4_max_dsp_1_U123 : component CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => line_buffer_1_5_load_3_reg_1456_pp1_iter14_reg,
        din1 => kernel_conv3_load_5_reg_1316,
        ce => ap_const_logic_1,
        dout => grp_fu_582_p2);

    CNN_dmul_64ns_64ns_64_4_max_dsp_1_U124 : component CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_phi_mux_window_buffer_load_2_phi_fu_509_p4,
        din1 => kernel_conv3_load_6_reg_1321,
        ce => ap_const_logic_1,
        dout => grp_fu_586_p2);

    CNN_dmul_64ns_64ns_64_4_max_dsp_1_U125 : component CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => window_buffer_load_3_2_reg_496,
        din1 => kernel_conv3_load_7_reg_1326,
        ce => ap_const_logic_1,
        dout => grp_fu_591_p2);

    CNN_dmul_64ns_64ns_64_4_max_dsp_1_U126 : component CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => line_buffer_2_5_load_3_reg_1497_pp1_iter26_reg,
        din1 => kernel_conv3_load_8_reg_1331,
        ce => ap_const_logic_1,
        dout => grp_fu_596_p2);

    CNN_dcmp_64ns_64ns_1_2_no_dsp_1_U127 : component CNN_CNN_dcmp_64ns_64ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_reg_1538,
        din1 => ap_const_lv64_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_600_p2);

    CNN_add_32ns_32ns_32_1_1_U128 : component CNN_CNN_add_32ns_32ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => shl_ln_fu_605_p3,
        din1 => ap_const_lv32_7,
        dout => add_ln31_fu_613_p2);

    CNN_add_32ns_32ns_32_1_1_U129 : component CNN_CNN_add_32ns_32ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => shl_ln_fu_605_p3,
        din1 => ap_const_lv32_6,
        dout => sub13_fu_625_p2);

    CNN_add_32ns_32ns_32_1_1_U130 : component CNN_CNN_add_32ns_32ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => shl_ln_fu_605_p3,
        din1 => ap_const_lv32_5,
        dout => sub47_fu_631_p2);

    CNN_add_6ns_6ns_6_1_1_U131 : component CNN_CNN_add_6ns_6ns_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        dout_WIDTH => 6)
    port map (
        din0 => add_ln83_4_fu_672_p0,
        din1 => add_ln83_4_fu_672_p1,
        dout => add_ln83_4_fu_672_p2);

    CNN_add_10ns_10ns_10_1_1_U132 : component CNN_CNN_add_10ns_10ns_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => add_ln83_fu_694_p0,
        din1 => add_ln83_fu_694_p1,
        dout => add_ln83_fu_694_p2);

    CNN_add_10ns_10ns_10_1_1_U133 : component CNN_CNN_add_10ns_10ns_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => ap_const_lv10_1,
        din1 => indvar_flatten109_reg_386,
        dout => add_ln39_fu_706_p2);

    CNN_add_4ns_4ns_4_1_1_U134 : component CNN_CNN_add_4ns_4ns_4_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        dout_WIDTH => 4)
    port map (
        din0 => ap_const_lv4_1,
        din1 => num_channel_reg_397,
        dout => add_ln39_2_fu_726_p2);

    CNN_add_6ns_6ns_6_1_1_U135 : component CNN_CNN_add_6ns_6ns_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        dout_WIDTH => 6)
    port map (
        din0 => add_ln83_5_fu_748_p0,
        din1 => add_ln83_5_fu_748_p1,
        dout => add_ln83_5_fu_748_p2);

    CNN_add_4ns_4ns_4_1_1_U136 : component CNN_CNN_add_4ns_4ns_4_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        dout_WIDTH => 4)
    port map (
        din0 => ap_const_lv4_1,
        din1 => select_ln39_fu_718_p3,
        dout => add_ln40_fu_804_p2);

    CNN_add_10ns_10ns_10_1_1_U137 : component CNN_CNN_add_10ns_10ns_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => add_ln83_6_fu_833_p0,
        din1 => add_ln83_6_fu_833_p1,
        dout => add_ln83_6_fu_833_p2);

    CNN_add_10ns_10ns_10_1_1_U138 : component CNN_CNN_add_10ns_10ns_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => ap_const_lv10_1,
        din1 => select_ln40_6_fu_839_p3,
        dout => add_ln40_10_fu_852_p2);

    CNN_add_10ns_10ns_10_1_1_U139 : component CNN_CNN_add_10ns_10ns_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => ap_const_lv10_2,
        din1 => select_ln40_6_fu_839_p3,
        dout => add_ln40_11_fu_863_p2);

    CNN_add_10ns_10ns_10_1_1_U140 : component CNN_CNN_add_10ns_10ns_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => ap_const_lv10_3,
        din1 => select_ln40_6_fu_839_p3,
        dout => add_ln40_12_fu_874_p2);

    CNN_add_10ns_10ns_10_1_1_U141 : component CNN_CNN_add_10ns_10ns_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => ap_const_lv10_4,
        din1 => select_ln40_6_fu_839_p3,
        dout => add_ln40_13_fu_885_p2);

    CNN_add_10ns_10ns_10_1_1_U142 : component CNN_CNN_add_10ns_10ns_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => ap_const_lv10_5,
        din1 => select_ln40_6_fu_839_p3,
        dout => add_ln40_14_fu_896_p2);

    CNN_add_10ns_10ns_10_1_1_U143 : component CNN_CNN_add_10ns_10ns_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => ap_const_lv10_6,
        din1 => select_ln40_6_fu_839_p3,
        dout => add_ln40_15_fu_907_p2);

    CNN_add_10ns_10ns_10_1_1_U144 : component CNN_CNN_add_10ns_10ns_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => ap_const_lv10_7,
        din1 => select_ln40_6_fu_839_p3,
        dout => add_ln40_16_fu_918_p2);

    CNN_add_10ns_10ns_10_1_1_U145 : component CNN_CNN_add_10ns_10ns_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => ap_const_lv10_8,
        din1 => select_ln40_6_fu_839_p3,
        dout => add_ln40_17_fu_929_p2);

    CNN_add_3ns_3ns_3_1_1_U146 : component CNN_CNN_add_3ns_3ns_3_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 3,
        dout_WIDTH => 3)
    port map (
        din0 => j_reg_432,
        din1 => ap_const_lv3_1,
        dout => add_ln42_fu_1000_p2);

    CNN_add_31ns_31ns_31_1_1_U147 : component CNN_CNN_add_31ns_31ns_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        din0 => b_reg_443,
        din1 => ap_const_lv31_1,
        dout => add_ln64_fu_1066_p2);

    CNN_add_3ns_3ns_3_1_1_U148 : component CNN_CNN_add_3ns_3ns_3_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 3,
        dout_WIDTH => 3)
    port map (
        din0 => ap_const_lv3_2,
        din1 => empty_27_fu_1076_p1,
        dout => empty_27_fu_1076_p2);

    CNN_add_4ns_4ns_4_1_1_U149 : component CNN_CNN_add_4ns_4ns_4_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        dout_WIDTH => 4)
    port map (
        din0 => select_ln40_reg_1280,
        din1 => ap_const_lv4_1,
        dout => add_ln41_fu_1137_p2);

    CNN_add_8ns_8ns_8_1_1_U150 : component CNN_CNN_add_8ns_8ns_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => indvar_flatten_reg_408,
        din1 => ap_const_lv8_1,
        dout => add_ln40_18_fu_1142_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln42_reg_1160 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state5);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln42_reg_1160 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp1_flush_enable)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((cmp4827_reg_1174 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter11 <= ap_enable_reg_pp1_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter12 <= ap_enable_reg_pp1_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter13 <= ap_enable_reg_pp1_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter14 <= ap_enable_reg_pp1_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter15 <= ap_enable_reg_pp1_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter16 <= ap_enable_reg_pp1_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter17 <= ap_enable_reg_pp1_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter18 <= ap_enable_reg_pp1_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter19 <= ap_enable_reg_pp1_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter20 <= ap_enable_reg_pp1_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter21 <= ap_enable_reg_pp1_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter22 <= ap_enable_reg_pp1_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter23 <= ap_enable_reg_pp1_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter24 <= ap_enable_reg_pp1_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter25 <= ap_enable_reg_pp1_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter25_state34)) then 
                        ap_enable_reg_pp1_iter26 <= ap_enable_reg_pp1_iter24;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter26 <= ap_enable_reg_pp1_iter25;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter27 <= ap_enable_reg_pp1_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter28 <= ap_enable_reg_pp1_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter29 <= ap_enable_reg_pp1_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter30 <= ap_enable_reg_pp1_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter31 <= ap_enable_reg_pp1_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter32 <= ap_enable_reg_pp1_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter33 <= ap_enable_reg_pp1_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter34 <= ap_enable_reg_pp1_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter35 <= ap_enable_reg_pp1_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter36 <= ap_enable_reg_pp1_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter37 <= ap_enable_reg_pp1_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter38 <= ap_enable_reg_pp1_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter39 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter39 <= ap_enable_reg_pp1_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter40 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter40 <= ap_enable_reg_pp1_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter41 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter41 <= ap_enable_reg_pp1_iter40;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter42 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter42 <= ap_enable_reg_pp1_iter41;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter43 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter43 <= ap_enable_reg_pp1_iter42;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter44_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter44 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter44 <= ap_enable_reg_pp1_iter43;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter45_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter45 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter45 <= ap_enable_reg_pp1_iter44;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter46_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter46 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter46 <= ap_enable_reg_pp1_iter45;
                elsif (((cmp4827_reg_1174 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                    ap_enable_reg_pp1_iter46 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
                end if; 
            end if;
        end if;
    end process;


    b_reg_443_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp4827_reg_1174 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                b_reg_443 <= ap_const_lv31_0;
            elsif (((icmp_ln64_fu_1061_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                b_reg_443 <= add_ln64_fu_1066_p2;
            end if; 
        end if;
    end process;

    i_reg_420_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                i_reg_420 <= add_ln41_fu_1137_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_420 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten109_reg_386_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                indvar_flatten109_reg_386 <= add_ln39_reg_1202;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten109_reg_386 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_408_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                indvar_flatten_reg_408 <= select_ln40_8_fu_1148_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_408 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    j_reg_432_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln42_reg_1160 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_reg_432 <= ap_const_lv3_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln42_2_fu_995_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_reg_432 <= add_ln42_fu_1000_p2;
            end if; 
        end if;
    end process;

    num_channel_reg_397_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                num_channel_reg_397 <= select_ln39_8_reg_1220;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                num_channel_reg_397 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    num_ker_reg_374_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                num_ker_reg_374 <= select_ln40_7_reg_1275;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                num_ker_reg_374 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    window_buffer_load_0_reg_464_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp4827_reg_1174 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                window_buffer_load_0_reg_464 <= line_buffer_0_5_q0;
            elsif (((icmp_ln64_reg_1400_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                window_buffer_load_0_reg_464 <= window_buffer_load_3_0_reg_454;
            end if; 
        end if;
    end process;

    window_buffer_load_1_reg_485_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp4827_reg_1174 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                window_buffer_load_1_reg_485 <= line_buffer_1_5_q0;
            elsif (((icmp_ln64_reg_1400_pp1_iter13_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                window_buffer_load_1_reg_485 <= window_buffer_load_3_1_reg_475;
            end if; 
        end if;
    end process;

    window_buffer_load_2_reg_506_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp4827_reg_1174 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                window_buffer_load_2_reg_506 <= line_buffer_2_5_q0;
            elsif (((icmp_ln64_reg_1400_pp1_iter25_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                window_buffer_load_2_reg_506 <= window_buffer_load_3_2_reg_496;
            end if; 
        end if;
    end process;

    window_buffer_load_3_0_reg_454_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp4827_reg_1174 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                window_buffer_load_3_0_reg_454 <= line_buffer_0_5_q1;
            elsif (((icmp_ln64_reg_1400_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                window_buffer_load_3_0_reg_454 <= line_buffer_0_5_load_2_reg_1420;
            end if; 
        end if;
    end process;

    window_buffer_load_3_1_reg_475_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp4827_reg_1174 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                window_buffer_load_3_1_reg_475 <= line_buffer_1_5_q1;
            elsif (((icmp_ln64_reg_1400_pp1_iter13_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                window_buffer_load_3_1_reg_475 <= line_buffer_1_5_load_3_reg_1456;
            end if; 
        end if;
    end process;

    window_buffer_load_3_2_reg_496_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp4827_reg_1174 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                window_buffer_load_3_2_reg_496 <= line_buffer_2_5_q1;
            elsif (((icmp_ln64_reg_1400_pp1_iter25_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                window_buffer_load_3_2_reg_496 <= line_buffer_2_5_load_3_reg_1497;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                add_ln31_reg_1155 <= add_ln31_fu_613_p2;
                bitcast_ln49_reg_1178 <= bitcast_ln49_fu_643_p1;
                cmp4827_reg_1174 <= cmp4827_fu_637_p2;
                icmp_ln42_reg_1160 <= icmp_ln42_fu_619_p2;
                sub13_reg_1164 <= sub13_fu_625_p2;
                sub47_reg_1169 <= sub47_fu_631_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln39_reg_1202 <= add_ln39_fu_706_p2;
                bias_conv3_load_reg_1194 <= bias_conv3_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln39_fu_700_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                and_ln39_reg_1214 <= and_ln39_fu_790_p2;
                icmp_ln40_reg_1207 <= icmp_ln40_fu_712_p2;
                select_ln39_8_reg_1220 <= select_ln39_8_fu_796_p3;
                select_ln40_7_reg_1275 <= select_ln40_7_fu_940_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                empty_23_reg_1183 <= empty_23_fu_652_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln42_2_reg_1341 <= icmp_ln42_2_fu_995_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln64_reg_1400 <= icmp_ln64_fu_1061_p2;
                icmp_ln64_reg_1400_pp1_iter1_reg <= icmp_ln64_reg_1400;
                    p_cast_reg_1409_pp1_iter1_reg(2 downto 0) <= p_cast_reg_1409(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                icmp_ln64_reg_1400_pp1_iter10_reg <= icmp_ln64_reg_1400_pp1_iter9_reg;
                icmp_ln64_reg_1400_pp1_iter11_reg <= icmp_ln64_reg_1400_pp1_iter10_reg;
                icmp_ln64_reg_1400_pp1_iter12_reg <= icmp_ln64_reg_1400_pp1_iter11_reg;
                icmp_ln64_reg_1400_pp1_iter13_reg <= icmp_ln64_reg_1400_pp1_iter12_reg;
                icmp_ln64_reg_1400_pp1_iter14_reg <= icmp_ln64_reg_1400_pp1_iter13_reg;
                icmp_ln64_reg_1400_pp1_iter15_reg <= icmp_ln64_reg_1400_pp1_iter14_reg;
                icmp_ln64_reg_1400_pp1_iter16_reg <= icmp_ln64_reg_1400_pp1_iter15_reg;
                icmp_ln64_reg_1400_pp1_iter17_reg <= icmp_ln64_reg_1400_pp1_iter16_reg;
                icmp_ln64_reg_1400_pp1_iter18_reg <= icmp_ln64_reg_1400_pp1_iter17_reg;
                icmp_ln64_reg_1400_pp1_iter19_reg <= icmp_ln64_reg_1400_pp1_iter18_reg;
                icmp_ln64_reg_1400_pp1_iter20_reg <= icmp_ln64_reg_1400_pp1_iter19_reg;
                icmp_ln64_reg_1400_pp1_iter21_reg <= icmp_ln64_reg_1400_pp1_iter20_reg;
                icmp_ln64_reg_1400_pp1_iter22_reg <= icmp_ln64_reg_1400_pp1_iter21_reg;
                icmp_ln64_reg_1400_pp1_iter23_reg <= icmp_ln64_reg_1400_pp1_iter22_reg;
                icmp_ln64_reg_1400_pp1_iter24_reg <= icmp_ln64_reg_1400_pp1_iter23_reg;
                icmp_ln64_reg_1400_pp1_iter25_reg <= icmp_ln64_reg_1400_pp1_iter24_reg;
                icmp_ln64_reg_1400_pp1_iter26_reg <= icmp_ln64_reg_1400_pp1_iter25_reg;
                icmp_ln64_reg_1400_pp1_iter27_reg <= icmp_ln64_reg_1400_pp1_iter26_reg;
                icmp_ln64_reg_1400_pp1_iter28_reg <= icmp_ln64_reg_1400_pp1_iter27_reg;
                icmp_ln64_reg_1400_pp1_iter29_reg <= icmp_ln64_reg_1400_pp1_iter28_reg;
                icmp_ln64_reg_1400_pp1_iter2_reg <= icmp_ln64_reg_1400_pp1_iter1_reg;
                icmp_ln64_reg_1400_pp1_iter30_reg <= icmp_ln64_reg_1400_pp1_iter29_reg;
                icmp_ln64_reg_1400_pp1_iter31_reg <= icmp_ln64_reg_1400_pp1_iter30_reg;
                icmp_ln64_reg_1400_pp1_iter32_reg <= icmp_ln64_reg_1400_pp1_iter31_reg;
                icmp_ln64_reg_1400_pp1_iter33_reg <= icmp_ln64_reg_1400_pp1_iter32_reg;
                icmp_ln64_reg_1400_pp1_iter34_reg <= icmp_ln64_reg_1400_pp1_iter33_reg;
                icmp_ln64_reg_1400_pp1_iter35_reg <= icmp_ln64_reg_1400_pp1_iter34_reg;
                icmp_ln64_reg_1400_pp1_iter36_reg <= icmp_ln64_reg_1400_pp1_iter35_reg;
                icmp_ln64_reg_1400_pp1_iter37_reg <= icmp_ln64_reg_1400_pp1_iter36_reg;
                icmp_ln64_reg_1400_pp1_iter38_reg <= icmp_ln64_reg_1400_pp1_iter37_reg;
                icmp_ln64_reg_1400_pp1_iter39_reg <= icmp_ln64_reg_1400_pp1_iter38_reg;
                icmp_ln64_reg_1400_pp1_iter3_reg <= icmp_ln64_reg_1400_pp1_iter2_reg;
                icmp_ln64_reg_1400_pp1_iter40_reg <= icmp_ln64_reg_1400_pp1_iter39_reg;
                icmp_ln64_reg_1400_pp1_iter41_reg <= icmp_ln64_reg_1400_pp1_iter40_reg;
                icmp_ln64_reg_1400_pp1_iter42_reg <= icmp_ln64_reg_1400_pp1_iter41_reg;
                icmp_ln64_reg_1400_pp1_iter43_reg <= icmp_ln64_reg_1400_pp1_iter42_reg;
                icmp_ln64_reg_1400_pp1_iter44_reg <= icmp_ln64_reg_1400_pp1_iter43_reg;
                icmp_ln64_reg_1400_pp1_iter45_reg <= icmp_ln64_reg_1400_pp1_iter44_reg;
                icmp_ln64_reg_1400_pp1_iter4_reg <= icmp_ln64_reg_1400_pp1_iter3_reg;
                icmp_ln64_reg_1400_pp1_iter5_reg <= icmp_ln64_reg_1400_pp1_iter4_reg;
                icmp_ln64_reg_1400_pp1_iter6_reg <= icmp_ln64_reg_1400_pp1_iter5_reg;
                icmp_ln64_reg_1400_pp1_iter7_reg <= icmp_ln64_reg_1400_pp1_iter6_reg;
                icmp_ln64_reg_1400_pp1_iter8_reg <= icmp_ln64_reg_1400_pp1_iter7_reg;
                icmp_ln64_reg_1400_pp1_iter9_reg <= icmp_ln64_reg_1400_pp1_iter8_reg;
                line_buffer_0_5_load_2_reg_1420_pp1_iter2_reg <= line_buffer_0_5_load_2_reg_1420;
                line_buffer_1_5_load_3_reg_1456_pp1_iter14_reg <= line_buffer_1_5_load_3_reg_1456;
                line_buffer_2_5_load_3_reg_1497_pp1_iter26_reg <= line_buffer_2_5_load_3_reg_1497;
                mul_0_1_reg_1431_pp1_iter6_reg <= mul_0_1_reg_1431;
                mul_0_1_reg_1431_pp1_iter7_reg <= mul_0_1_reg_1431_pp1_iter6_reg;
                mul_0_1_reg_1431_pp1_iter8_reg <= mul_0_1_reg_1431_pp1_iter7_reg;
                mul_0_2_reg_1436_pp1_iter10_reg <= mul_0_2_reg_1436_pp1_iter9_reg;
                mul_0_2_reg_1436_pp1_iter11_reg <= mul_0_2_reg_1436_pp1_iter10_reg;
                mul_0_2_reg_1436_pp1_iter12_reg <= mul_0_2_reg_1436_pp1_iter11_reg;
                mul_0_2_reg_1436_pp1_iter7_reg <= mul_0_2_reg_1436;
                mul_0_2_reg_1436_pp1_iter8_reg <= mul_0_2_reg_1436_pp1_iter7_reg;
                mul_0_2_reg_1436_pp1_iter9_reg <= mul_0_2_reg_1436_pp1_iter8_reg;
                mul_1_1_reg_1472_pp1_iter18_reg <= mul_1_1_reg_1472;
                mul_1_1_reg_1472_pp1_iter19_reg <= mul_1_1_reg_1472_pp1_iter18_reg;
                mul_1_1_reg_1472_pp1_iter20_reg <= mul_1_1_reg_1472_pp1_iter19_reg;
                mul_1_2_reg_1477_pp1_iter19_reg <= mul_1_2_reg_1477;
                mul_1_2_reg_1477_pp1_iter20_reg <= mul_1_2_reg_1477_pp1_iter19_reg;
                mul_1_2_reg_1477_pp1_iter21_reg <= mul_1_2_reg_1477_pp1_iter20_reg;
                mul_1_2_reg_1477_pp1_iter22_reg <= mul_1_2_reg_1477_pp1_iter21_reg;
                mul_1_2_reg_1477_pp1_iter23_reg <= mul_1_2_reg_1477_pp1_iter22_reg;
                mul_1_2_reg_1477_pp1_iter24_reg <= mul_1_2_reg_1477_pp1_iter23_reg;
                mul_2_1_reg_1513_pp1_iter30_reg <= mul_2_1_reg_1513;
                mul_2_1_reg_1513_pp1_iter31_reg <= mul_2_1_reg_1513_pp1_iter30_reg;
                mul_2_1_reg_1513_pp1_iter32_reg <= mul_2_1_reg_1513_pp1_iter31_reg;
                mul_2_2_reg_1518_pp1_iter31_reg <= mul_2_2_reg_1518;
                mul_2_2_reg_1518_pp1_iter32_reg <= mul_2_2_reg_1518_pp1_iter31_reg;
                mul_2_2_reg_1518_pp1_iter33_reg <= mul_2_2_reg_1518_pp1_iter32_reg;
                mul_2_2_reg_1518_pp1_iter34_reg <= mul_2_2_reg_1518_pp1_iter33_reg;
                mul_2_2_reg_1518_pp1_iter35_reg <= mul_2_2_reg_1518_pp1_iter34_reg;
                mul_2_2_reg_1518_pp1_iter36_reg <= mul_2_2_reg_1518_pp1_iter35_reg;
                    p_cast_reg_1409_pp1_iter10_reg(2 downto 0) <= p_cast_reg_1409_pp1_iter9_reg(2 downto 0);
                    p_cast_reg_1409_pp1_iter11_reg(2 downto 0) <= p_cast_reg_1409_pp1_iter10_reg(2 downto 0);
                    p_cast_reg_1409_pp1_iter12_reg(2 downto 0) <= p_cast_reg_1409_pp1_iter11_reg(2 downto 0);
                    p_cast_reg_1409_pp1_iter13_reg(2 downto 0) <= p_cast_reg_1409_pp1_iter12_reg(2 downto 0);
                    p_cast_reg_1409_pp1_iter14_reg(2 downto 0) <= p_cast_reg_1409_pp1_iter13_reg(2 downto 0);
                    p_cast_reg_1409_pp1_iter15_reg(2 downto 0) <= p_cast_reg_1409_pp1_iter14_reg(2 downto 0);
                    p_cast_reg_1409_pp1_iter16_reg(2 downto 0) <= p_cast_reg_1409_pp1_iter15_reg(2 downto 0);
                    p_cast_reg_1409_pp1_iter17_reg(2 downto 0) <= p_cast_reg_1409_pp1_iter16_reg(2 downto 0);
                    p_cast_reg_1409_pp1_iter18_reg(2 downto 0) <= p_cast_reg_1409_pp1_iter17_reg(2 downto 0);
                    p_cast_reg_1409_pp1_iter19_reg(2 downto 0) <= p_cast_reg_1409_pp1_iter18_reg(2 downto 0);
                    p_cast_reg_1409_pp1_iter20_reg(2 downto 0) <= p_cast_reg_1409_pp1_iter19_reg(2 downto 0);
                    p_cast_reg_1409_pp1_iter21_reg(2 downto 0) <= p_cast_reg_1409_pp1_iter20_reg(2 downto 0);
                    p_cast_reg_1409_pp1_iter22_reg(2 downto 0) <= p_cast_reg_1409_pp1_iter21_reg(2 downto 0);
                    p_cast_reg_1409_pp1_iter23_reg(2 downto 0) <= p_cast_reg_1409_pp1_iter22_reg(2 downto 0);
                    p_cast_reg_1409_pp1_iter2_reg(2 downto 0) <= p_cast_reg_1409_pp1_iter1_reg(2 downto 0);
                    p_cast_reg_1409_pp1_iter3_reg(2 downto 0) <= p_cast_reg_1409_pp1_iter2_reg(2 downto 0);
                    p_cast_reg_1409_pp1_iter4_reg(2 downto 0) <= p_cast_reg_1409_pp1_iter3_reg(2 downto 0);
                    p_cast_reg_1409_pp1_iter5_reg(2 downto 0) <= p_cast_reg_1409_pp1_iter4_reg(2 downto 0);
                    p_cast_reg_1409_pp1_iter6_reg(2 downto 0) <= p_cast_reg_1409_pp1_iter5_reg(2 downto 0);
                    p_cast_reg_1409_pp1_iter7_reg(2 downto 0) <= p_cast_reg_1409_pp1_iter6_reg(2 downto 0);
                    p_cast_reg_1409_pp1_iter8_reg(2 downto 0) <= p_cast_reg_1409_pp1_iter7_reg(2 downto 0);
                    p_cast_reg_1409_pp1_iter9_reg(2 downto 0) <= p_cast_reg_1409_pp1_iter8_reg(2 downto 0);
                sum_reg_1538_pp1_iter45_reg <= sum_reg_1538;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln42_2_fu_995_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    j_cast4_reg_1350(2 downto 0) <= j_cast4_fu_1006_p1(2 downto 0);
                line_buffer_1_5_addr_reg_1355 <= j_cast4_fu_1006_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                kernel_conv3_load_1_reg_1296 <= kernel_conv3_q1;
                kernel_conv3_load_2_reg_1301 <= kernel_conv3_q2;
                kernel_conv3_load_3_reg_1306 <= kernel_conv3_q3;
                kernel_conv3_load_4_reg_1311 <= kernel_conv3_q4;
                kernel_conv3_load_5_reg_1316 <= kernel_conv3_q5;
                kernel_conv3_load_6_reg_1321 <= kernel_conv3_q6;
                kernel_conv3_load_7_reg_1326 <= kernel_conv3_q7;
                kernel_conv3_load_8_reg_1331 <= kernel_conv3_q8;
                kernel_conv3_load_reg_1291 <= kernel_conv3_q0;
                select_ln40_5_reg_1286 <= select_ln40_5_fu_966_p3;
                select_ln40_reg_1280 <= select_ln40_fu_958_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1400 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                line_buffer_0_5_load_2_reg_1420 <= line_buffer_0_5_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1400_pp1_iter12_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                line_buffer_1_5_load_3_reg_1456 <= line_buffer_1_5_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1400_pp1_iter24_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter25 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                line_buffer_2_5_load_3_reg_1497 <= line_buffer_2_5_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1400_pp1_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                mul_0_1_reg_1431 <= grp_fu_563_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1400_pp1_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                mul_0_2_reg_1436 <= grp_fu_568_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1400_pp1_iter16_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                mul_1_1_reg_1472 <= grp_fu_577_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1400_pp1_iter17_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                mul_1_2_reg_1477 <= grp_fu_582_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1400_pp1_iter15_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                mul_1_reg_1467 <= grp_fu_572_p2;
                sum_4_0_2_reg_1462 <= grp_fu_526_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1400_pp1_iter28_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                mul_2_1_reg_1513 <= grp_fu_591_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1400_pp1_iter29_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                mul_2_2_reg_1518 <= grp_fu_596_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1400_pp1_iter27_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                mul_2_reg_1508 <= grp_fu_586_p2;
                sum_4_1_2_reg_1503 <= grp_fu_538_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1400_pp1_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                mul_reg_1426 <= grp_fu_558_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln42_reg_1160 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                or_ln45_reg_1336 <= or_ln45_fu_985_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_fu_1061_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                    p_cast_reg_1409(2 downto 0) <= p_cast_fu_1082_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1400_pp1_iter11_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                sum_4_0_1_reg_1451 <= grp_fu_522_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1400_pp1_iter23_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                sum_4_1_1_reg_1492 <= grp_fu_534_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1400_pp1_iter19_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                sum_4_1_reg_1482 <= grp_fu_530_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1400_pp1_iter35_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                sum_4_2_1_reg_1528 <= grp_fu_546_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1400_pp1_iter39_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                sum_4_2_2_reg_1533 <= grp_fu_550_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1400_pp1_iter31_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                sum_4_2_reg_1523 <= grp_fu_542_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1400_pp1_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                sum_4_reg_1441 <= grp_fu_517_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1400_pp1_iter43_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                sum_reg_1538 <= grp_fu_554_p2;
            end if;
        end if;
    end process;
    j_cast4_reg_1350(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    p_cast_reg_1409(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    p_cast_reg_1409_pp1_iter1_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    p_cast_reg_1409_pp1_iter2_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    p_cast_reg_1409_pp1_iter3_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    p_cast_reg_1409_pp1_iter4_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    p_cast_reg_1409_pp1_iter5_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    p_cast_reg_1409_pp1_iter6_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    p_cast_reg_1409_pp1_iter7_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    p_cast_reg_1409_pp1_iter8_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    p_cast_reg_1409_pp1_iter9_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    p_cast_reg_1409_pp1_iter10_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    p_cast_reg_1409_pp1_iter11_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    p_cast_reg_1409_pp1_iter12_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    p_cast_reg_1409_pp1_iter13_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    p_cast_reg_1409_pp1_iter14_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    p_cast_reg_1409_pp1_iter15_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    p_cast_reg_1409_pp1_iter16_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    p_cast_reg_1409_pp1_iter17_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    p_cast_reg_1409_pp1_iter18_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    p_cast_reg_1409_pp1_iter19_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    p_cast_reg_1409_pp1_iter20_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    p_cast_reg_1409_pp1_iter21_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    p_cast_reg_1409_pp1_iter22_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    p_cast_reg_1409_pp1_iter23_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln42_reg_1160, cmp4827_reg_1174, ap_CS_fsm_state3, icmp_ln39_fu_700_p2, ap_CS_fsm_state4, icmp_ln42_2_fu_995_p2, ap_enable_reg_pp0_iter0, icmp_ln52_fu_1051_p2, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_enable_reg_pp1_iter25, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter24, ap_enable_reg_pp1_iter26, ap_enable_reg_pp1_iter45, ap_enable_reg_pp1_iter46)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln39_fu_700_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln42_reg_1160 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln42_2_fu_995_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln42_2_fu_995_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln52_fu_1051_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((cmp4827_reg_1174 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter26 = ap_const_logic_0) and (ap_enable_reg_pp1_iter24 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter25 = ap_const_logic_1))) and not(((ap_enable_reg_pp1_iter45 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter46 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter45 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter46 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter26 = ap_const_logic_0) and (ap_enable_reg_pp1_iter24 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter25 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln83_4_fu_672_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(num_channel_reg_397),6));
    add_ln83_4_fu_672_p1 <= (empty_fu_660_p1 & ap_const_lv3_0);
    add_ln83_5_fu_748_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln39_2_fu_726_p2),6));
    add_ln83_5_fu_748_p1 <= (empty_29_fu_736_p1 & ap_const_lv3_0);
    add_ln83_6_fu_833_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln39_5_fu_758_p3),10));
    add_ln83_6_fu_833_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_mid1_fu_819_p4),10));
    add_ln83_fu_694_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln83_4_fu_672_p2),10));
    add_ln83_fu_694_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_682_p4),10));
    and_ln11_fu_1122_p2 <= (or_ln11_fu_1116_p2 and grp_fu_600_p2);
    and_ln39_fu_790_p2 <= (xor_ln39_fu_778_p2 and icmp_ln41_fu_784_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state56 <= ap_CS_fsm(8);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp1_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp1_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp1_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp1_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp1_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp1_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp1_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp1_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp1_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp1_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp1_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp1_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp1_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp1_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp1_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp1_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp1_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp1_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp1_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp1_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp1_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp1_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp1_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp1_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp1_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp1_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp1_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp1_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp1_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp1_stage0_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp1_stage0_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp1_stage0_iter36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp1_stage0_iter37 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp1_stage0_iter38 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp1_stage0_iter39 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp1_stage0_iter40 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp1_stage0_iter41 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp1_stage0_iter42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp1_stage0_iter43 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp1_stage0_iter44 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp1_stage0_iter45 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp1_stage0_iter46 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state5_assign_proc : process(icmp_ln42_2_fu_995_p2)
    begin
        if ((icmp_ln42_2_fu_995_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter25_state34_assign_proc : process(ap_enable_reg_pp1_iter25, ap_enable_reg_pp1_iter24)
    begin
        if (((ap_enable_reg_pp1_iter24 = ap_const_logic_0) and (ap_enable_reg_pp1_iter25 = ap_const_logic_1))) then 
            ap_condition_pp1_exit_iter25_state34 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter25_state34 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_flush_enable_assign_proc : process(icmp_ln64_fu_1061_p2, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln64_fu_1061_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_condition_pp1_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp1_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln39_fu_700_p2)
    begin
        if ((((icmp_ln39_fu_700_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter13, ap_enable_reg_pp1_iter25, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter5, ap_enable_reg_pp1_iter6, ap_enable_reg_pp1_iter7, ap_enable_reg_pp1_iter8, ap_enable_reg_pp1_iter9, ap_enable_reg_pp1_iter10, ap_enable_reg_pp1_iter11, ap_enable_reg_pp1_iter12, ap_enable_reg_pp1_iter14, ap_enable_reg_pp1_iter15, ap_enable_reg_pp1_iter16, ap_enable_reg_pp1_iter17, ap_enable_reg_pp1_iter18, ap_enable_reg_pp1_iter19, ap_enable_reg_pp1_iter20, ap_enable_reg_pp1_iter21, ap_enable_reg_pp1_iter22, ap_enable_reg_pp1_iter23, ap_enable_reg_pp1_iter24, ap_enable_reg_pp1_iter26, ap_enable_reg_pp1_iter27, ap_enable_reg_pp1_iter28, ap_enable_reg_pp1_iter29, ap_enable_reg_pp1_iter30, ap_enable_reg_pp1_iter31, ap_enable_reg_pp1_iter32, ap_enable_reg_pp1_iter33, ap_enable_reg_pp1_iter34, ap_enable_reg_pp1_iter35, ap_enable_reg_pp1_iter36, ap_enable_reg_pp1_iter37, ap_enable_reg_pp1_iter38, ap_enable_reg_pp1_iter39, ap_enable_reg_pp1_iter40, ap_enable_reg_pp1_iter41, ap_enable_reg_pp1_iter42, ap_enable_reg_pp1_iter43, ap_enable_reg_pp1_iter44, ap_enable_reg_pp1_iter45, ap_enable_reg_pp1_iter46)
    begin
        if (((ap_enable_reg_pp1_iter46 = ap_const_logic_0) and (ap_enable_reg_pp1_iter45 = ap_const_logic_0) and (ap_enable_reg_pp1_iter44 = ap_const_logic_0) and (ap_enable_reg_pp1_iter43 = ap_const_logic_0) and (ap_enable_reg_pp1_iter42 = ap_const_logic_0) and (ap_enable_reg_pp1_iter41 = ap_const_logic_0) and (ap_enable_reg_pp1_iter40 = ap_const_logic_0) and (ap_enable_reg_pp1_iter39 = ap_const_logic_0) and (ap_enable_reg_pp1_iter38 = ap_const_logic_0) and (ap_enable_reg_pp1_iter37 = ap_const_logic_0) and (ap_enable_reg_pp1_iter36 = ap_const_logic_0) and (ap_enable_reg_pp1_iter35 = ap_const_logic_0) and (ap_enable_reg_pp1_iter34 = ap_const_logic_0) and (ap_enable_reg_pp1_iter33 = ap_const_logic_0) and (ap_enable_reg_pp1_iter32 = ap_const_logic_0) and (ap_enable_reg_pp1_iter31 = ap_const_logic_0) and (ap_enable_reg_pp1_iter30 = ap_const_logic_0) and (ap_enable_reg_pp1_iter29 = ap_const_logic_0) and (ap_enable_reg_pp1_iter28 = ap_const_logic_0) and (ap_enable_reg_pp1_iter27 = ap_const_logic_0) and (ap_enable_reg_pp1_iter26 = ap_const_logic_0) and (ap_enable_reg_pp1_iter24 = ap_const_logic_0) and (ap_enable_reg_pp1_iter23 = ap_const_logic_0) and (ap_enable_reg_pp1_iter22 = ap_const_logic_0) and (ap_enable_reg_pp1_iter21 = ap_const_logic_0) and (ap_enable_reg_pp1_iter20 = ap_const_logic_0) and (ap_enable_reg_pp1_iter19 = ap_const_logic_0) and (ap_enable_reg_pp1_iter18 = ap_const_logic_0) and (ap_enable_reg_pp1_iter17 = ap_const_logic_0) and (ap_enable_reg_pp1_iter16 = ap_const_logic_0) and (ap_enable_reg_pp1_iter15 = ap_const_logic_0) and (ap_enable_reg_pp1_iter14 = ap_const_logic_0) and (ap_enable_reg_pp1_iter12 = ap_const_logic_0) and (ap_enable_reg_pp1_iter11 = ap_const_logic_0) and (ap_enable_reg_pp1_iter10 = ap_const_logic_0) and (ap_enable_reg_pp1_iter9 = ap_const_logic_0) and (ap_enable_reg_pp1_iter8 = ap_const_logic_0) and (ap_enable_reg_pp1_iter7 = ap_const_logic_0) and (ap_enable_reg_pp1_iter6 = ap_const_logic_0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter25 = ap_const_logic_0) and (ap_enable_reg_pp1_iter13 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_window_buffer_load_0_phi_fu_467_p4_assign_proc : process(window_buffer_load_3_0_reg_454, window_buffer_load_0_reg_464, icmp_ln64_reg_1400_pp1_iter1_reg, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln64_reg_1400_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            ap_phi_mux_window_buffer_load_0_phi_fu_467_p4 <= window_buffer_load_3_0_reg_454;
        else 
            ap_phi_mux_window_buffer_load_0_phi_fu_467_p4 <= window_buffer_load_0_reg_464;
        end if; 
    end process;


    ap_phi_mux_window_buffer_load_1_phi_fu_488_p4_assign_proc : process(window_buffer_load_3_1_reg_475, window_buffer_load_1_reg_485, icmp_ln64_reg_1400_pp1_iter13_reg, ap_enable_reg_pp1_iter14, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln64_reg_1400_pp1_iter13_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter14 = ap_const_logic_1))) then 
            ap_phi_mux_window_buffer_load_1_phi_fu_488_p4 <= window_buffer_load_3_1_reg_475;
        else 
            ap_phi_mux_window_buffer_load_1_phi_fu_488_p4 <= window_buffer_load_1_reg_485;
        end if; 
    end process;


    ap_phi_mux_window_buffer_load_2_phi_fu_509_p4_assign_proc : process(window_buffer_load_3_2_reg_496, window_buffer_load_2_reg_506, icmp_ln64_reg_1400_pp1_iter25_reg, ap_enable_reg_pp1_iter26, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln64_reg_1400_pp1_iter25_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter26 = ap_const_logic_1))) then 
            ap_phi_mux_window_buffer_load_2_phi_fu_509_p4 <= window_buffer_load_3_2_reg_496;
        else 
            ap_phi_mux_window_buffer_load_2_phi_fu_509_p4 <= window_buffer_load_2_reg_506;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, icmp_ln39_fu_700_p2)
    begin
        if (((icmp_ln39_fu_700_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_cast_fu_1057_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_reg_443),32));

    bias_conv3_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, zext_ln40_fu_647_p1, zext_ln40_10_fu_810_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bias_conv3_address0 <= zext_ln40_10_fu_810_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            bias_conv3_address0 <= zext_ln40_fu_647_p1(3 - 1 downto 0);
        else 
            bias_conv3_address0 <= "XXX";
        end if; 
    end process;


    bias_conv3_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            bias_conv3_ce0 <= ap_const_logic_1;
        else 
            bias_conv3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln11_fu_1087_p1 <= sum_reg_1538_pp1_iter45_reg;
    bitcast_ln49_fu_643_p1 <= p_read;
    cmp4827_fu_637_p2 <= "1" when (signed(sub47_fu_631_p2) > signed(ap_const_lv32_0)) else "0";
    empty_23_fu_652_p1 <= num_ker_reg_374(3 - 1 downto 0);
    empty_27_fu_1076_p1 <= b_reg_443(3 - 1 downto 0);
    empty_29_fu_736_p1 <= add_ln39_2_fu_726_p2(3 - 1 downto 0);
    empty_30_fu_815_p1 <= add_ln40_fu_804_p2(3 - 1 downto 0);
    empty_fu_660_p1 <= num_channel_reg_397(3 - 1 downto 0);
    icmp_ln11_2_fu_1110_p2 <= "1" when (trunc_ln11_fu_1100_p1 = ap_const_lv52_0) else "0";
    icmp_ln11_fu_1104_p2 <= "0" when (tmp_5_fu_1090_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln39_fu_700_p2 <= "1" when (indvar_flatten109_reg_386 = ap_const_lv10_240) else "0";
    icmp_ln40_fu_712_p2 <= "1" when (indvar_flatten_reg_408 = ap_const_lv8_48) else "0";
    icmp_ln41_fu_784_p2 <= "1" when (i_reg_420 = ap_const_lv4_9) else "0";
    icmp_ln42_2_fu_995_p2 <= "1" when (j_cast_fu_991_p1 = add_ln31_reg_1155) else "0";
    icmp_ln42_fu_619_p2 <= "1" when (signed(add_ln31_fu_613_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln45_2_fu_1018_p2 <= "1" when (j_cast_fu_991_p1 = sub13_reg_1164) else "0";
    icmp_ln45_4_fu_973_p2 <= "1" when (select_ln40_fu_958_p3 = ap_const_lv4_0) else "0";
    icmp_ln45_5_fu_979_p2 <= "1" when (select_ln40_fu_958_p3 = ap_const_lv4_8) else "0";
    icmp_ln45_fu_1012_p2 <= "1" when (j_reg_432 = ap_const_lv3_0) else "0";
    icmp_ln52_fu_1051_p2 <= "1" when (tmp_2_fu_1042_p4 = ap_const_lv3_0) else "0";
    icmp_ln64_fu_1061_p2 <= "1" when (b_cast_fu_1057_p1 = sub47_reg_1169) else "0";
    j_cast4_fu_1006_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_432),64));
    j_cast_fu_991_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_432),32));
    kernel_conv3_address0 <= zext_ln83_8_fu_847_p1(10 - 1 downto 0);
    kernel_conv3_address1 <= zext_ln40_11_fu_858_p1(10 - 1 downto 0);
    kernel_conv3_address2 <= zext_ln40_12_fu_869_p1(10 - 1 downto 0);
    kernel_conv3_address3 <= zext_ln40_13_fu_880_p1(10 - 1 downto 0);
    kernel_conv3_address4 <= zext_ln40_14_fu_891_p1(10 - 1 downto 0);
    kernel_conv3_address5 <= zext_ln40_15_fu_902_p1(10 - 1 downto 0);
    kernel_conv3_address6 <= zext_ln40_16_fu_913_p1(10 - 1 downto 0);
    kernel_conv3_address7 <= zext_ln40_17_fu_924_p1(10 - 1 downto 0);
    kernel_conv3_address8 <= zext_ln40_18_fu_935_p1(10 - 1 downto 0);

    kernel_conv3_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            kernel_conv3_ce0 <= ap_const_logic_1;
        else 
            kernel_conv3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_conv3_ce1_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            kernel_conv3_ce1 <= ap_const_logic_1;
        else 
            kernel_conv3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_conv3_ce2_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            kernel_conv3_ce2 <= ap_const_logic_1;
        else 
            kernel_conv3_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_conv3_ce3_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            kernel_conv3_ce3 <= ap_const_logic_1;
        else 
            kernel_conv3_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_conv3_ce4_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            kernel_conv3_ce4 <= ap_const_logic_1;
        else 
            kernel_conv3_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_conv3_ce5_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            kernel_conv3_ce5 <= ap_const_logic_1;
        else 
            kernel_conv3_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_conv3_ce6_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            kernel_conv3_ce6 <= ap_const_logic_1;
        else 
            kernel_conv3_ce6 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_conv3_ce7_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            kernel_conv3_ce7 <= ap_const_logic_1;
        else 
            kernel_conv3_ce7 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_conv3_ce8_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            kernel_conv3_ce8 <= ap_const_logic_1;
        else 
            kernel_conv3_ce8 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_0_5_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, j_cast4_reg_1350, ap_CS_fsm_state7, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            line_buffer_0_5_address0 <= ap_const_lv3_0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_0_5_address0 <= j_cast4_reg_1350(3 - 1 downto 0);
        else 
            line_buffer_0_5_address0 <= "XXX";
        end if; 
    end process;


    line_buffer_0_5_address1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, p_cast_fu_1082_p1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            line_buffer_0_5_address1 <= p_cast_fu_1082_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            line_buffer_0_5_address1 <= ap_const_lv3_1;
        else 
            line_buffer_0_5_address1 <= "XXX";
        end if; 
    end process;


    line_buffer_0_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state7, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            line_buffer_0_5_ce0 <= ap_const_logic_1;
        else 
            line_buffer_0_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_0_5_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_state7, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            line_buffer_0_5_ce1 <= ap_const_logic_1;
        else 
            line_buffer_0_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_0_5_we0_assign_proc : process(icmp_ln42_2_reg_1341, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln42_2_reg_1341 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_0_5_we0 <= ap_const_logic_1;
        else 
            line_buffer_0_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_1_5_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, j_cast4_fu_1006_p1, ap_CS_fsm_state7, p_cast_reg_1409_pp1_iter11_reg, ap_enable_reg_pp1_iter12, ap_block_pp1_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter12 = ap_const_logic_1))) then 
            line_buffer_1_5_address0 <= p_cast_reg_1409_pp1_iter11_reg(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            line_buffer_1_5_address0 <= ap_const_lv3_0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_1_5_address0 <= j_cast4_fu_1006_p1(3 - 1 downto 0);
        else 
            line_buffer_1_5_address0 <= "XXX";
        end if; 
    end process;


    line_buffer_1_5_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, line_buffer_1_5_addr_reg_1355, ap_CS_fsm_state7, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            line_buffer_1_5_address1 <= ap_const_lv3_1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_1_5_address1 <= line_buffer_1_5_addr_reg_1355;
        else 
            line_buffer_1_5_address1 <= "XXX";
        end if; 
    end process;


    line_buffer_1_5_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state7, ap_enable_reg_pp1_iter12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp1_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            line_buffer_1_5_ce0 <= ap_const_logic_1;
        else 
            line_buffer_1_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_1_5_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state7, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            line_buffer_1_5_ce1 <= ap_const_logic_1;
        else 
            line_buffer_1_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_1_5_we1_assign_proc : process(icmp_ln42_2_reg_1341, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln42_2_reg_1341 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_1_5_we1 <= ap_const_logic_1;
        else 
            line_buffer_1_5_we1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_2_5_address0_assign_proc : process(icmp_ln42_2_fu_995_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, j_cast4_fu_1006_p1, ap_CS_fsm_state7, ap_block_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            line_buffer_2_5_address0 <= ap_const_lv3_0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln42_2_fu_995_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_2_5_address0 <= j_cast4_fu_1006_p1(3 - 1 downto 0);
        else 
            line_buffer_2_5_address0 <= "XXX";
        end if; 
    end process;


    line_buffer_2_5_address1_assign_proc : process(ap_CS_fsm_state7, p_cast_reg_1409_pp1_iter23_reg, ap_enable_reg_pp1_iter24, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter24 = ap_const_logic_1))) then 
            line_buffer_2_5_address1 <= p_cast_reg_1409_pp1_iter23_reg(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            line_buffer_2_5_address1 <= ap_const_lv3_1;
        else 
            line_buffer_2_5_address1 <= "XXX";
        end if; 
    end process;


    line_buffer_2_5_ce0_assign_proc : process(icmp_ln42_2_fu_995_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln42_2_fu_995_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            line_buffer_2_5_ce0 <= ap_const_logic_1;
        else 
            line_buffer_2_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_2_5_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_state7, ap_enable_reg_pp1_iter24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_enable_reg_pp1_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            line_buffer_2_5_ce1 <= ap_const_logic_1;
        else 
            line_buffer_2_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_2_5_d0 <= 
        ap_const_lv64_0 when (or_ln45_4_fu_1029_p2(0) = '1') else 
        bitcast_ln49_reg_1178;

    line_buffer_2_5_we0_assign_proc : process(icmp_ln42_2_fu_995_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln42_2_fu_995_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_2_5_we0 <= ap_const_logic_1;
        else 
            line_buffer_2_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln11_fu_1116_p2 <= (icmp_ln11_fu_1104_p2 or icmp_ln11_2_fu_1110_p2);
    or_ln40_fu_954_p2 <= (icmp_ln40_reg_1207 or and_ln39_reg_1214);
    or_ln45_3_fu_1023_p2 <= (icmp_ln45_fu_1012_p2 or icmp_ln45_2_fu_1018_p2);
    or_ln45_4_fu_1029_p2 <= (or_ln45_reg_1336 or or_ln45_3_fu_1023_p2);
    or_ln45_fu_985_p2 <= (icmp_ln45_5_fu_979_p2 or icmp_ln45_4_fu_973_p2);
    output_conv3 <= 
        bitcast_ln11_fu_1087_p1 when (and_ln11_fu_1122_p2(0) = '1') else 
        ap_const_lv64_0;

    output_conv3_ap_vld_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln64_reg_1400_pp1_iter45_reg, ap_enable_reg_pp1_iter46)
    begin
        if (((icmp_ln64_reg_1400_pp1_iter45_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter46 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            output_conv3_ap_vld <= ap_const_logic_1;
        else 
            output_conv3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_cast_fu_1082_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_27_fu_1076_p2),64));
    select_ln39_5_fu_758_p3 <= 
        add_ln83_5_fu_748_p2 when (icmp_ln40_fu_712_p2(0) = '1') else 
        add_ln83_4_fu_672_p2;
    select_ln39_6_fu_948_p3 <= 
        ap_const_lv64_BFB93BC47C464C96 when (icmp_ln40_reg_1207(0) = '1') else 
        bias_conv3_load_reg_1194;
    select_ln39_7_fu_770_p3 <= 
        zext_ln83_6_fu_754_p1 when (icmp_ln40_fu_712_p2(0) = '1') else 
        add_ln83_fu_694_p2;
    select_ln39_8_fu_796_p3 <= 
        add_ln39_2_fu_726_p2 when (icmp_ln40_fu_712_p2(0) = '1') else 
        num_channel_reg_397;
    select_ln39_fu_718_p3 <= 
        ap_const_lv4_0 when (icmp_ln40_fu_712_p2(0) = '1') else 
        num_ker_reg_374;
    select_ln40_5_fu_966_p3 <= 
        bias_conv3_q0 when (and_ln39_reg_1214(0) = '1') else 
        select_ln39_6_fu_948_p3;
    select_ln40_6_fu_839_p3 <= 
        add_ln83_6_fu_833_p2 when (and_ln39_fu_790_p2(0) = '1') else 
        select_ln39_7_fu_770_p3;
    select_ln40_7_fu_940_p3 <= 
        add_ln40_fu_804_p2 when (and_ln39_fu_790_p2(0) = '1') else 
        select_ln39_fu_718_p3;
    select_ln40_8_fu_1148_p3 <= 
        ap_const_lv8_1 when (icmp_ln40_reg_1207(0) = '1') else 
        add_ln40_18_fu_1142_p2;
    select_ln40_fu_958_p3 <= 
        ap_const_lv4_0 when (or_ln40_fu_954_p2(0) = '1') else 
        i_reg_420;
    shl_ln_fu_605_p3 <= (padding & ap_const_lv1_0);
    tmp_2_fu_1042_p4 <= select_ln40_reg_1280(3 downto 1);
    tmp_5_fu_1090_p4 <= bitcast_ln11_fu_1087_p1(62 downto 52);
    tmp_fu_682_p4 <= ((empty_23_reg_1183 & empty_23_reg_1183) & ap_const_lv3_0);
    tmp_mid1_fu_819_p4 <= ((empty_30_fu_815_p1 & empty_30_fu_815_p1) & ap_const_lv3_0);
    trunc_ln11_fu_1100_p1 <= bitcast_ln11_fu_1087_p1(52 - 1 downto 0);
    xor_ln39_fu_778_p2 <= (icmp_ln40_fu_712_p2 xor ap_const_lv1_1);
    zext_ln40_10_fu_810_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_fu_804_p2),64));
    zext_ln40_11_fu_858_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_10_fu_852_p2),64));
    zext_ln40_12_fu_869_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_11_fu_863_p2),64));
    zext_ln40_13_fu_880_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_12_fu_874_p2),64));
    zext_ln40_14_fu_891_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_13_fu_885_p2),64));
    zext_ln40_15_fu_902_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_14_fu_896_p2),64));
    zext_ln40_16_fu_913_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_15_fu_907_p2),64));
    zext_ln40_17_fu_924_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_16_fu_918_p2),64));
    zext_ln40_18_fu_935_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_17_fu_929_p2),64));
    zext_ln40_fu_647_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(num_ker_reg_374),64));
    zext_ln83_6_fu_754_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln83_5_fu_748_p2),10));
    zext_ln83_8_fu_847_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln40_6_fu_839_p3),64));
end behav;
