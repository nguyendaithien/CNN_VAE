-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CNN_CNN is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    padding : IN STD_LOGIC_VECTOR (31 downto 0);
    width : IN STD_LOGIC_VECTOR (31 downto 0);
    hight : IN STD_LOGIC_VECTOR (31 downto 0);
    image_r : IN STD_LOGIC_VECTOR (63 downto 0);
    output_conv1_i : IN STD_LOGIC_VECTOR (63 downto 0);
    output_conv1_o : OUT STD_LOGIC_VECTOR (63 downto 0);
    output_conv1_o_ap_vld : OUT STD_LOGIC;
    output_pooling1_i : IN STD_LOGIC_VECTOR (63 downto 0);
    output_pooling1_o : OUT STD_LOGIC_VECTOR (63 downto 0);
    output_pooling1_o_ap_vld : OUT STD_LOGIC;
    output_conv2_i : IN STD_LOGIC_VECTOR (63 downto 0);
    output_conv2_o : OUT STD_LOGIC_VECTOR (63 downto 0);
    output_conv2_o_ap_vld : OUT STD_LOGIC;
    output_pooling2_i : IN STD_LOGIC_VECTOR (63 downto 0);
    output_pooling2_o : OUT STD_LOGIC_VECTOR (63 downto 0);
    output_pooling2_o_ap_vld : OUT STD_LOGIC;
    output_conv3_i : IN STD_LOGIC_VECTOR (63 downto 0);
    output_conv3_o : OUT STD_LOGIC_VECTOR (63 downto 0);
    output_conv3_o_ap_vld : OUT STD_LOGIC;
    output_pooling3_i : IN STD_LOGIC_VECTOR (63 downto 0);
    output_pooling3_o : OUT STD_LOGIC_VECTOR (63 downto 0);
    output_pooling3_o_ap_vld : OUT STD_LOGIC;
    output_conv4_i : IN STD_LOGIC_VECTOR (63 downto 0);
    output_conv4_o : OUT STD_LOGIC_VECTOR (63 downto 0);
    output_conv4_o_ap_vld : OUT STD_LOGIC;
    output_upsampling1_i : IN STD_LOGIC_VECTOR (63 downto 0);
    output_upsampling1_o : OUT STD_LOGIC_VECTOR (63 downto 0);
    output_upsampling1_o_ap_vld : OUT STD_LOGIC;
    output_conv5_i : IN STD_LOGIC_VECTOR (63 downto 0);
    output_conv5_o : OUT STD_LOGIC_VECTOR (63 downto 0);
    output_conv5_o_ap_vld : OUT STD_LOGIC;
    output_upsampling2_i : IN STD_LOGIC_VECTOR (63 downto 0);
    output_upsampling2_o : OUT STD_LOGIC_VECTOR (63 downto 0);
    output_upsampling2_o_ap_vld : OUT STD_LOGIC;
    output_conv6_i : IN STD_LOGIC_VECTOR (63 downto 0);
    output_conv6_o : OUT STD_LOGIC_VECTOR (63 downto 0);
    output_conv6_o_ap_vld : OUT STD_LOGIC;
    output_upsampling3_i : IN STD_LOGIC_VECTOR (63 downto 0);
    output_upsampling3_o : OUT STD_LOGIC_VECTOR (63 downto 0);
    output_upsampling3_o_ap_vld : OUT STD_LOGIC;
    output_conv7 : OUT STD_LOGIC_VECTOR (63 downto 0);
    output_conv7_ap_vld : OUT STD_LOGIC );
end;


architecture behav of CNN_CNN is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "CNN_CNN,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flga2104-2-i,HLS_INPUT_CLOCK=6.660000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.503000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=220,HLS_SYN_DSP=0,HLS_SYN_FF=76810,HLS_SYN_LUT=68815,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000010000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000100000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000001000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000010000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000010000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000100000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000001000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000010000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000100000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000001000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000010000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000100000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000001000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000010000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000100000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (37 downto 0) := "00000000001000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (37 downto 0) := "00000000010000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (37 downto 0) := "00000000100000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (37 downto 0) := "00000001000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (37 downto 0) := "00000010000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (37 downto 0) := "00000100000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (37 downto 0) := "00001000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (37 downto 0) := "00010000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (37 downto 0) := "00100000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (37 downto 0) := "01000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (37 downto 0) := "10000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal j_reg_376 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_1_reg_409 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_2_reg_442 : STD_LOGIC_VECTOR (30 downto 0);
    signal empty_fu_705_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal empty_reg_1377 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln116_fu_710_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln116_reg_1415 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp27_i_fu_716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp27_i_reg_1419 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_conv1_read_reg_1423 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln120_fu_722_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln120_reg_1428 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln127_1_fu_730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln127_1_reg_1435 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln115_fu_742_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln115_reg_1443 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln115_fu_736_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln116_1_fu_752_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln116_fu_757_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln116_reg_1463 : STD_LOGIC_VECTOR (30 downto 0);
    signal cmp17_i_fu_767_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_i_reg_1468 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln117_fu_776_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln117_reg_1472 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state6_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln117_fu_781_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln117_reg_1476 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln123_fu_791_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln123_reg_1481 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_val_load_reg_1485 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln127_fu_809_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln127_reg_1492 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_conv2_read_reg_1497 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal bitcast_ln120_1_fu_881_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln120_1_reg_1502 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln127_5_fu_889_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln127_5_reg_1509 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln115_1_fu_901_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln115_1_reg_1517 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln115_1_fu_895_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln116_2_fu_911_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal add_ln116_1_fu_916_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln116_1_reg_1537 : STD_LOGIC_VECTOR (30 downto 0);
    signal cmp17_i17_fu_926_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_i17_reg_1542 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln117_1_fu_935_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln117_1_reg_1546 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state13_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state14_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal add_ln117_1_fu_940_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln117_1_reg_1550 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal icmp_ln123_1_fu_950_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln123_1_reg_1555 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_val_1_load_reg_1559 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln127_4_fu_968_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln127_4_reg_1566 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_conv3_read_reg_1571 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal bitcast_ln120_2_fu_1040_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln120_2_reg_1576 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln127_9_fu_1048_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln127_9_reg_1583 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln115_2_fu_1060_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln115_2_reg_1591 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal icmp_ln115_2_fu_1054_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln116_3_fu_1070_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal add_ln116_2_fu_1075_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln116_2_reg_1605 : STD_LOGIC_VECTOR (30 downto 0);
    signal cmp17_i92_fu_1085_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_i92_reg_1610 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln117_2_fu_1094_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln117_2_reg_1614 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state20_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state21_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal add_ln117_2_fu_1099_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln117_2_reg_1618 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal icmp_ln123_2_fu_1109_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln123_2_reg_1623 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_val_2_load_reg_1627 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln127_8_fu_1127_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln127_8_reg_1634 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln149_fu_1199_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln149_reg_1639 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal icmp_ln149_fu_1204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln149_reg_1646 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_109_fu_1210_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_109_reg_1650 : STD_LOGIC_VECTOR (31 downto 0);
    signal cmp31_i199_fu_1215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp31_i199_reg_1657 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_conv4_read_reg_1661 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln148_fu_1227_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln148_reg_1669 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal icmp_ln148_fu_1221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln149_1_fu_1237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal add_ln149_fu_1242_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln149_reg_1683 : STD_LOGIC_VECTOR (30 downto 0);
    signal empty_112_fu_1248_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_112_reg_1688 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln150_fu_1261_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal output_conv5_read_reg_1703 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal add_ln148_1_fu_1277_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln148_1_reg_1711 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal icmp_ln148_1_fu_1271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln149_2_fu_1287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal add_ln149_1_fu_1292_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln149_1_reg_1725 : STD_LOGIC_VECTOR (30 downto 0);
    signal empty_117_fu_1298_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_117_reg_1730 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln150_1_fu_1311_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal output_conv6_read_reg_1745 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal add_ln148_2_fu_1327_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln148_2_reg_1753 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal icmp_ln148_2_fu_1321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln149_3_fu_1337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal add_ln149_2_fu_1342_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln149_2_reg_1767 : STD_LOGIC_VECTOR (30 downto 0);
    signal empty_122_fu_1348_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_122_reg_1772 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln150_2_fu_1361_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state6 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state13 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state20 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal grp_convolution_double_double_double_double_4_4_8_8_4_4_3_3_1_1_s_fu_552_ap_start : STD_LOGIC;
    signal grp_convolution_double_double_double_double_4_4_8_8_4_4_3_3_1_1_s_fu_552_ap_done : STD_LOGIC;
    signal grp_convolution_double_double_double_double_4_4_8_8_4_4_3_3_1_1_s_fu_552_ap_idle : STD_LOGIC;
    signal grp_convolution_double_double_double_double_4_4_8_8_4_4_3_3_1_1_s_fu_552_ap_ready : STD_LOGIC;
    signal grp_convolution_double_double_double_double_4_4_8_8_4_4_3_3_1_1_s_fu_552_output_conv4 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_convolution_double_double_double_double_4_4_8_8_4_4_3_3_1_1_s_fu_552_output_conv4_ap_vld : STD_LOGIC;
    signal grp_convolution_double_double_double_double_16_16_8_16_14_14_3_3_1_0_s_fu_589_ap_start : STD_LOGIC;
    signal grp_convolution_double_double_double_double_16_16_8_16_14_14_3_3_1_0_s_fu_589_ap_done : STD_LOGIC;
    signal grp_convolution_double_double_double_double_16_16_8_16_14_14_3_3_1_0_s_fu_589_ap_idle : STD_LOGIC;
    signal grp_convolution_double_double_double_double_16_16_8_16_14_14_3_3_1_0_s_fu_589_ap_ready : STD_LOGIC;
    signal grp_convolution_double_double_double_double_16_16_8_16_14_14_3_3_1_0_s_fu_589_output_conv6 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_convolution_double_double_double_double_16_16_8_16_14_14_3_3_1_0_s_fu_589_output_conv6_ap_vld : STD_LOGIC;
    signal grp_convolution_double_double_double_double_14_14_16_8_14_14_3_3_1_1_s_fu_608_ap_start : STD_LOGIC;
    signal grp_convolution_double_double_double_double_14_14_16_8_14_14_3_3_1_1_s_fu_608_ap_done : STD_LOGIC;
    signal grp_convolution_double_double_double_double_14_14_16_8_14_14_3_3_1_1_s_fu_608_ap_idle : STD_LOGIC;
    signal grp_convolution_double_double_double_double_14_14_16_8_14_14_3_3_1_1_s_fu_608_ap_ready : STD_LOGIC;
    signal grp_convolution_double_double_double_double_14_14_16_8_14_14_3_3_1_1_s_fu_608_output_conv2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_convolution_double_double_double_double_14_14_16_8_14_14_3_3_1_1_s_fu_608_output_conv2_ap_vld : STD_LOGIC;
    signal grp_convolution_double_double_double_double_8_8_8_8_8_8_3_3_1_1_s_fu_627_ap_start : STD_LOGIC;
    signal grp_convolution_double_double_double_double_8_8_8_8_8_8_3_3_1_1_s_fu_627_ap_done : STD_LOGIC;
    signal grp_convolution_double_double_double_double_8_8_8_8_8_8_3_3_1_1_s_fu_627_ap_idle : STD_LOGIC;
    signal grp_convolution_double_double_double_double_8_8_8_8_8_8_3_3_1_1_s_fu_627_ap_ready : STD_LOGIC;
    signal grp_convolution_double_double_double_double_8_8_8_8_8_8_3_3_1_1_s_fu_627_output_conv5 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_convolution_double_double_double_double_8_8_8_8_8_8_3_3_1_1_s_fu_627_output_conv5_ap_vld : STD_LOGIC;
    signal grp_convolution_double_double_double_double_7_7_8_8_7_7_3_3_1_1_s_fu_646_ap_start : STD_LOGIC;
    signal grp_convolution_double_double_double_double_7_7_8_8_7_7_3_3_1_1_s_fu_646_ap_done : STD_LOGIC;
    signal grp_convolution_double_double_double_double_7_7_8_8_7_7_3_3_1_1_s_fu_646_ap_idle : STD_LOGIC;
    signal grp_convolution_double_double_double_double_7_7_8_8_7_7_3_3_1_1_s_fu_646_ap_ready : STD_LOGIC;
    signal grp_convolution_double_double_double_double_7_7_8_8_7_7_3_3_1_1_s_fu_646_output_conv3 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_convolution_double_double_double_double_7_7_8_8_7_7_3_3_1_1_s_fu_646_output_conv3_ap_vld : STD_LOGIC;
    signal grp_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_fu_665_ap_start : STD_LOGIC;
    signal grp_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_fu_665_ap_done : STD_LOGIC;
    signal grp_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_fu_665_ap_idle : STD_LOGIC;
    signal grp_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_fu_665_ap_ready : STD_LOGIC;
    signal grp_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_fu_665_output_conv1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_fu_665_output_conv1_ap_vld : STD_LOGIC;
    signal grp_convolution_double_double_double_double_28_28_16_1_28_28_3_3_1_0_s_fu_684_ap_start : STD_LOGIC;
    signal grp_convolution_double_double_double_double_28_28_16_1_28_28_3_3_1_0_s_fu_684_ap_done : STD_LOGIC;
    signal grp_convolution_double_double_double_double_28_28_16_1_28_28_3_3_1_0_s_fu_684_ap_idle : STD_LOGIC;
    signal grp_convolution_double_double_double_double_28_28_16_1_28_28_3_3_1_0_s_fu_684_ap_ready : STD_LOGIC;
    signal grp_convolution_double_double_double_double_28_28_16_1_28_28_3_3_1_0_s_fu_684_output_conv7 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_convolution_double_double_double_double_28_28_16_1_28_28_3_3_1_0_s_fu_684_output_conv7_ap_vld : STD_LOGIC;
    signal num_channel_reg_354 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_365 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_phi_mux_j_phi_fu_380_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal num_channel_1_reg_387 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_398 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_phi_mux_j_1_phi_fu_413_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal num_channel_2_reg_420 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_reg_431 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_phi_mux_j_2_phi_fu_446_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal num_channel_3_reg_453 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_3_reg_464 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal j_3_reg_475 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln150_fu_1256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal num_channel_4_reg_486 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_4_reg_497 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal j_4_reg_508 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln150_1_fu_1306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal num_channel_5_reg_519 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_5_reg_530 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal j_5_reg_541 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln150_2_fu_1356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_convolution_double_double_double_double_4_4_8_8_4_4_3_3_1_1_s_fu_552_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal grp_convolution_double_double_double_double_16_16_8_16_14_14_3_3_1_0_s_fu_589_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal grp_convolution_double_double_double_double_14_14_16_8_14_14_3_3_1_1_s_fu_608_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_convolution_double_double_double_double_8_8_8_8_8_8_3_3_1_1_s_fu_627_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal grp_convolution_double_double_double_double_7_7_8_8_7_7_3_3_1_1_s_fu_646_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_fu_665_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_convolution_double_double_double_double_28_28_16_1_28_28_3_3_1_0_s_fu_684_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal max_val_fu_204 : STD_LOGIC_VECTOR (63 downto 0);
    signal max_val_1_fu_208 : STD_LOGIC_VECTOR (63 downto 0);
    signal max_val_2_fu_212 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln131_fu_876_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal bitcast_ln131_1_fu_1035_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal bitcast_ln131_2_fu_1194_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0_01001 : BOOLEAN;
    signal empty_114_fu_1267_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_119_fu_1317_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_124_fu_1367_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_701_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_701_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln127_fu_726_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal zext_ln116_fu_748_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast_fu_763_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_cast_fu_772_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln123_fu_787_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_800_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal bitcast_ln127_fu_819_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_822_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln127_3_fu_832_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln127_3_fu_846_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln127_2_fu_840_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln127_fu_836_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln127_1_fu_852_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln127_fu_858_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_701_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln127_1_fu_864_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln127_fu_870_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln127_1_fu_885_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal zext_ln116_1_fu_907_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast1_fu_922_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_cast_fu_931_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln123_1_fu_946_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_959_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal bitcast_ln127_1_fu_978_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_981_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln127_4_fu_991_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln127_7_fu_1005_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln127_6_fu_999_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln127_2_fu_995_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln127_3_fu_1011_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln127_2_fu_1017_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln127_3_fu_1023_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln127_1_fu_1029_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln127_2_fu_1044_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal zext_ln116_2_fu_1066_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast2_fu_1081_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_2_cast_fu_1090_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln123_2_fu_1105_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_1118_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal bitcast_ln127_2_fu_1137_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_1140_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln127_5_fu_1150_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln127_11_fu_1164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln127_10_fu_1158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln127_4_fu_1154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln127_5_fu_1170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln127_4_fu_1176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln127_5_fu_1182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln127_2_fu_1188_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln149_fu_1233_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_3_cast_fu_1252_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln149_1_fu_1283_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_4_cast_fu_1302_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln149_2_fu_1333_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_5_cast_fu_1352_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_block_pp1_stage0_00001 : BOOLEAN;
    signal ap_block_pp2_stage0_00001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (37 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;

    component CNN_convolution_double_double_double_double_4_4_8_8_4_4_3_3_1_1_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (63 downto 0);
        output_conv4 : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_conv4_ap_vld : OUT STD_LOGIC;
        padding : IN STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component CNN_convolution_double_double_double_double_16_16_8_16_14_14_3_3_1_0_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (63 downto 0);
        output_conv6 : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_conv6_ap_vld : OUT STD_LOGIC;
        padding : IN STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component CNN_convolution_double_double_double_double_14_14_16_8_14_14_3_3_1_1_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (63 downto 0);
        output_conv2 : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_conv2_ap_vld : OUT STD_LOGIC;
        padding : IN STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component CNN_convolution_double_double_double_double_8_8_8_8_8_8_3_3_1_1_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (63 downto 0);
        output_conv5 : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_conv5_ap_vld : OUT STD_LOGIC;
        padding : IN STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component CNN_convolution_double_double_double_double_7_7_8_8_7_7_3_3_1_1_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (63 downto 0);
        output_conv3 : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_conv3_ap_vld : OUT STD_LOGIC;
        padding : IN STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component CNN_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (63 downto 0);
        output_conv1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_conv1_ap_vld : OUT STD_LOGIC;
        padding : IN STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component CNN_convolution_double_double_double_double_28_28_16_1_28_28_3_3_1_0_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (63 downto 0);
        output_conv7 : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_conv7_ap_vld : OUT STD_LOGIC;
        padding : IN STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component CNN_CNN_dcmp_64ns_64ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component CNN_CNN_add_5ns_5ns_5_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component CNN_CNN_add_31ns_31ns_31_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component CNN_CNN_add_4ns_4ns_4_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;



begin
    grp_convolution_double_double_double_double_4_4_8_8_4_4_3_3_1_1_s_fu_552 : component CNN_convolution_double_double_double_double_4_4_8_8_4_4_3_3_1_1_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_convolution_double_double_double_double_4_4_8_8_4_4_3_3_1_1_s_fu_552_ap_start,
        ap_done => grp_convolution_double_double_double_double_4_4_8_8_4_4_3_3_1_1_s_fu_552_ap_done,
        ap_idle => grp_convolution_double_double_double_double_4_4_8_8_4_4_3_3_1_1_s_fu_552_ap_idle,
        ap_ready => grp_convolution_double_double_double_double_4_4_8_8_4_4_3_3_1_1_s_fu_552_ap_ready,
        p_read => output_pooling3_i,
        output_conv4 => grp_convolution_double_double_double_double_4_4_8_8_4_4_3_3_1_1_s_fu_552_output_conv4,
        output_conv4_ap_vld => grp_convolution_double_double_double_double_4_4_8_8_4_4_3_3_1_1_s_fu_552_output_conv4_ap_vld,
        padding => empty_reg_1377);

    grp_convolution_double_double_double_double_16_16_8_16_14_14_3_3_1_0_s_fu_589 : component CNN_convolution_double_double_double_double_16_16_8_16_14_14_3_3_1_0_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_convolution_double_double_double_double_16_16_8_16_14_14_3_3_1_0_s_fu_589_ap_start,
        ap_done => grp_convolution_double_double_double_double_16_16_8_16_14_14_3_3_1_0_s_fu_589_ap_done,
        ap_idle => grp_convolution_double_double_double_double_16_16_8_16_14_14_3_3_1_0_s_fu_589_ap_idle,
        ap_ready => grp_convolution_double_double_double_double_16_16_8_16_14_14_3_3_1_0_s_fu_589_ap_ready,
        p_read => output_upsampling2_i,
        output_conv6 => grp_convolution_double_double_double_double_16_16_8_16_14_14_3_3_1_0_s_fu_589_output_conv6,
        output_conv6_ap_vld => grp_convolution_double_double_double_double_16_16_8_16_14_14_3_3_1_0_s_fu_589_output_conv6_ap_vld,
        padding => empty_reg_1377);

    grp_convolution_double_double_double_double_14_14_16_8_14_14_3_3_1_1_s_fu_608 : component CNN_convolution_double_double_double_double_14_14_16_8_14_14_3_3_1_1_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_convolution_double_double_double_double_14_14_16_8_14_14_3_3_1_1_s_fu_608_ap_start,
        ap_done => grp_convolution_double_double_double_double_14_14_16_8_14_14_3_3_1_1_s_fu_608_ap_done,
        ap_idle => grp_convolution_double_double_double_double_14_14_16_8_14_14_3_3_1_1_s_fu_608_ap_idle,
        ap_ready => grp_convolution_double_double_double_double_14_14_16_8_14_14_3_3_1_1_s_fu_608_ap_ready,
        p_read => output_pooling1_i,
        output_conv2 => grp_convolution_double_double_double_double_14_14_16_8_14_14_3_3_1_1_s_fu_608_output_conv2,
        output_conv2_ap_vld => grp_convolution_double_double_double_double_14_14_16_8_14_14_3_3_1_1_s_fu_608_output_conv2_ap_vld,
        padding => empty_reg_1377);

    grp_convolution_double_double_double_double_8_8_8_8_8_8_3_3_1_1_s_fu_627 : component CNN_convolution_double_double_double_double_8_8_8_8_8_8_3_3_1_1_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_convolution_double_double_double_double_8_8_8_8_8_8_3_3_1_1_s_fu_627_ap_start,
        ap_done => grp_convolution_double_double_double_double_8_8_8_8_8_8_3_3_1_1_s_fu_627_ap_done,
        ap_idle => grp_convolution_double_double_double_double_8_8_8_8_8_8_3_3_1_1_s_fu_627_ap_idle,
        ap_ready => grp_convolution_double_double_double_double_8_8_8_8_8_8_3_3_1_1_s_fu_627_ap_ready,
        p_read => output_upsampling1_i,
        output_conv5 => grp_convolution_double_double_double_double_8_8_8_8_8_8_3_3_1_1_s_fu_627_output_conv5,
        output_conv5_ap_vld => grp_convolution_double_double_double_double_8_8_8_8_8_8_3_3_1_1_s_fu_627_output_conv5_ap_vld,
        padding => empty_reg_1377);

    grp_convolution_double_double_double_double_7_7_8_8_7_7_3_3_1_1_s_fu_646 : component CNN_convolution_double_double_double_double_7_7_8_8_7_7_3_3_1_1_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_convolution_double_double_double_double_7_7_8_8_7_7_3_3_1_1_s_fu_646_ap_start,
        ap_done => grp_convolution_double_double_double_double_7_7_8_8_7_7_3_3_1_1_s_fu_646_ap_done,
        ap_idle => grp_convolution_double_double_double_double_7_7_8_8_7_7_3_3_1_1_s_fu_646_ap_idle,
        ap_ready => grp_convolution_double_double_double_double_7_7_8_8_7_7_3_3_1_1_s_fu_646_ap_ready,
        p_read => output_pooling2_i,
        output_conv3 => grp_convolution_double_double_double_double_7_7_8_8_7_7_3_3_1_1_s_fu_646_output_conv3,
        output_conv3_ap_vld => grp_convolution_double_double_double_double_7_7_8_8_7_7_3_3_1_1_s_fu_646_output_conv3_ap_vld,
        padding => empty_reg_1377);

    grp_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_fu_665 : component CNN_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_fu_665_ap_start,
        ap_done => grp_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_fu_665_ap_done,
        ap_idle => grp_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_fu_665_ap_idle,
        ap_ready => grp_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_fu_665_ap_ready,
        p_read => image_r,
        output_conv1 => grp_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_fu_665_output_conv1,
        output_conv1_ap_vld => grp_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_fu_665_output_conv1_ap_vld,
        padding => empty_reg_1377);

    grp_convolution_double_double_double_double_28_28_16_1_28_28_3_3_1_0_s_fu_684 : component CNN_convolution_double_double_double_double_28_28_16_1_28_28_3_3_1_0_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_convolution_double_double_double_double_28_28_16_1_28_28_3_3_1_0_s_fu_684_ap_start,
        ap_done => grp_convolution_double_double_double_double_28_28_16_1_28_28_3_3_1_0_s_fu_684_ap_done,
        ap_idle => grp_convolution_double_double_double_double_28_28_16_1_28_28_3_3_1_0_s_fu_684_ap_idle,
        ap_ready => grp_convolution_double_double_double_double_28_28_16_1_28_28_3_3_1_0_s_fu_684_ap_ready,
        p_read => output_upsampling3_i,
        output_conv7 => grp_convolution_double_double_double_double_28_28_16_1_28_28_3_3_1_0_s_fu_684_output_conv7,
        output_conv7_ap_vld => grp_convolution_double_double_double_double_28_28_16_1_28_28_3_3_1_0_s_fu_684_output_conv7_ap_vld,
        padding => empty_reg_1377);

    CNN_dcmp_64ns_64ns_1_2_no_dsp_1_U353 : component CNN_CNN_dcmp_64ns_64ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_701_p0,
        din1 => grp_fu_701_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_701_p2);

    CNN_add_5ns_5ns_5_1_1_U354 : component CNN_CNN_add_5ns_5ns_5_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        din0 => num_channel_reg_354,
        din1 => ap_const_lv5_1,
        dout => add_ln115_fu_742_p2);

    CNN_add_31ns_31ns_31_1_1_U355 : component CNN_CNN_add_31ns_31ns_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        din0 => i_reg_365,
        din1 => ap_const_lv31_1,
        dout => add_ln116_fu_757_p2);

    CNN_add_31ns_31ns_31_1_1_U356 : component CNN_CNN_add_31ns_31ns_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        din0 => ap_phi_mux_j_phi_fu_380_p4,
        din1 => ap_const_lv31_1,
        dout => add_ln117_fu_781_p2);

    CNN_add_4ns_4ns_4_1_1_U357 : component CNN_CNN_add_4ns_4ns_4_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        dout_WIDTH => 4)
    port map (
        din0 => num_channel_1_reg_387,
        din1 => ap_const_lv4_1,
        dout => add_ln115_1_fu_901_p2);

    CNN_add_31ns_31ns_31_1_1_U358 : component CNN_CNN_add_31ns_31ns_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        din0 => i_1_reg_398,
        din1 => ap_const_lv31_1,
        dout => add_ln116_1_fu_916_p2);

    CNN_add_31ns_31ns_31_1_1_U359 : component CNN_CNN_add_31ns_31ns_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        din0 => ap_phi_mux_j_1_phi_fu_413_p4,
        din1 => ap_const_lv31_1,
        dout => add_ln117_1_fu_940_p2);

    CNN_add_4ns_4ns_4_1_1_U360 : component CNN_CNN_add_4ns_4ns_4_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        dout_WIDTH => 4)
    port map (
        din0 => num_channel_2_reg_420,
        din1 => ap_const_lv4_1,
        dout => add_ln115_2_fu_1060_p2);

    CNN_add_31ns_31ns_31_1_1_U361 : component CNN_CNN_add_31ns_31ns_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        din0 => i_2_reg_431,
        din1 => ap_const_lv31_1,
        dout => add_ln116_2_fu_1075_p2);

    CNN_add_31ns_31ns_31_1_1_U362 : component CNN_CNN_add_31ns_31ns_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        din0 => ap_phi_mux_j_2_phi_fu_446_p4,
        din1 => ap_const_lv31_1,
        dout => add_ln117_2_fu_1099_p2);

    CNN_add_4ns_4ns_4_1_1_U363 : component CNN_CNN_add_4ns_4ns_4_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        dout_WIDTH => 4)
    port map (
        din0 => num_channel_3_reg_453,
        din1 => ap_const_lv4_1,
        dout => add_ln148_fu_1227_p2);

    CNN_add_31ns_31ns_31_1_1_U364 : component CNN_CNN_add_31ns_31ns_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        din0 => i_3_reg_464,
        din1 => ap_const_lv31_1,
        dout => add_ln149_fu_1242_p2);

    CNN_add_31ns_31ns_31_1_1_U365 : component CNN_CNN_add_31ns_31ns_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        din0 => j_3_reg_475,
        din1 => ap_const_lv31_1,
        dout => add_ln150_fu_1261_p2);

    CNN_add_4ns_4ns_4_1_1_U366 : component CNN_CNN_add_4ns_4ns_4_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        dout_WIDTH => 4)
    port map (
        din0 => num_channel_4_reg_486,
        din1 => ap_const_lv4_1,
        dout => add_ln148_1_fu_1277_p2);

    CNN_add_31ns_31ns_31_1_1_U367 : component CNN_CNN_add_31ns_31ns_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        din0 => i_4_reg_497,
        din1 => ap_const_lv31_1,
        dout => add_ln149_1_fu_1292_p2);

    CNN_add_31ns_31ns_31_1_1_U368 : component CNN_CNN_add_31ns_31ns_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        din0 => j_4_reg_508,
        din1 => ap_const_lv31_1,
        dout => add_ln150_1_fu_1311_p2);

    CNN_add_4ns_4ns_4_1_1_U369 : component CNN_CNN_add_4ns_4ns_4_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        dout_WIDTH => 4)
    port map (
        din0 => num_channel_5_reg_519,
        din1 => ap_const_lv4_1,
        dout => add_ln148_2_fu_1327_p2);

    CNN_add_31ns_31ns_31_1_1_U370 : component CNN_CNN_add_31ns_31ns_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        din0 => i_5_reg_530,
        din1 => ap_const_lv31_1,
        dout => add_ln149_2_fu_1342_p2);

    CNN_add_31ns_31ns_31_1_1_U371 : component CNN_CNN_add_31ns_31ns_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        din0 => j_5_reg_541,
        din1 => ap_const_lv31_1,
        dout => add_ln150_2_fu_1361_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln116_1_fu_752_p2 = ap_const_lv1_0) and (cmp27_i_reg_1419 = ap_const_lv1_1) and (icmp_ln116_reg_1415 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state6);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln116_1_fu_752_p2 = ap_const_lv1_0) and (cmp27_i_reg_1419 = ap_const_lv1_1) and (icmp_ln116_reg_1415 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state13) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln116_2_fu_911_p2 = ap_const_lv1_0) and (cmp27_i_reg_1419 = ap_const_lv1_1) and (icmp_ln116_reg_1415 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state13))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state13);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln116_2_fu_911_p2 = ap_const_lv1_0) and (cmp27_i_reg_1419 = ap_const_lv1_1) and (icmp_ln116_reg_1415 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state20) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln116_3_fu_1070_p2 = ap_const_lv1_0) and (cmp27_i_reg_1419 = ap_const_lv1_1) and (icmp_ln116_reg_1415 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state20))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state20);
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln116_3_fu_1070_p2 = ap_const_lv1_0) and (cmp27_i_reg_1419 = ap_const_lv1_1) and (icmp_ln116_reg_1415 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_convolution_double_double_double_double_14_14_16_8_14_14_3_3_1_1_s_fu_608_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_convolution_double_double_double_double_14_14_16_8_14_14_3_3_1_1_s_fu_608_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln115_fu_736_p2 = ap_const_lv1_1))) then 
                    grp_convolution_double_double_double_double_14_14_16_8_14_14_3_3_1_1_s_fu_608_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_convolution_double_double_double_double_14_14_16_8_14_14_3_3_1_1_s_fu_608_ap_ready = ap_const_logic_1)) then 
                    grp_convolution_double_double_double_double_14_14_16_8_14_14_3_3_1_1_s_fu_608_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_convolution_double_double_double_double_16_16_8_16_14_14_3_3_1_0_s_fu_589_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_convolution_double_double_double_double_16_16_8_16_14_14_3_3_1_0_s_fu_589_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state31) and (icmp_ln148_1_fu_1271_p2 = ap_const_lv1_1))) then 
                    grp_convolution_double_double_double_double_16_16_8_16_14_14_3_3_1_0_s_fu_589_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_convolution_double_double_double_double_16_16_8_16_14_14_3_3_1_0_s_fu_589_ap_ready = ap_const_logic_1)) then 
                    grp_convolution_double_double_double_double_16_16_8_16_14_14_3_3_1_0_s_fu_589_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_convolution_double_double_double_double_28_28_16_1_28_28_3_3_1_0_s_fu_684_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_convolution_double_double_double_double_28_28_16_1_28_28_3_3_1_0_s_fu_684_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state37) and (icmp_ln148_2_fu_1321_p2 = ap_const_lv1_1))) then 
                    grp_convolution_double_double_double_double_28_28_16_1_28_28_3_3_1_0_s_fu_684_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_convolution_double_double_double_double_28_28_16_1_28_28_3_3_1_0_s_fu_684_ap_ready = ap_const_logic_1)) then 
                    grp_convolution_double_double_double_double_28_28_16_1_28_28_3_3_1_0_s_fu_684_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_fu_665_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_fu_665_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_fu_665_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_fu_665_ap_ready = ap_const_logic_1)) then 
                    grp_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_fu_665_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_convolution_double_double_double_double_4_4_8_8_4_4_3_3_1_1_s_fu_552_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_convolution_double_double_double_double_4_4_8_8_4_4_3_3_1_1_s_fu_552_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln115_2_fu_1054_p2 = ap_const_lv1_1))) then 
                    grp_convolution_double_double_double_double_4_4_8_8_4_4_3_3_1_1_s_fu_552_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_convolution_double_double_double_double_4_4_8_8_4_4_3_3_1_1_s_fu_552_ap_ready = ap_const_logic_1)) then 
                    grp_convolution_double_double_double_double_4_4_8_8_4_4_3_3_1_1_s_fu_552_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_convolution_double_double_double_double_7_7_8_8_7_7_3_3_1_1_s_fu_646_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_convolution_double_double_double_double_7_7_8_8_7_7_3_3_1_1_s_fu_646_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln115_1_fu_895_p2 = ap_const_lv1_1))) then 
                    grp_convolution_double_double_double_double_7_7_8_8_7_7_3_3_1_1_s_fu_646_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_convolution_double_double_double_double_7_7_8_8_7_7_3_3_1_1_s_fu_646_ap_ready = ap_const_logic_1)) then 
                    grp_convolution_double_double_double_double_7_7_8_8_7_7_3_3_1_1_s_fu_646_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_convolution_double_double_double_double_8_8_8_8_8_8_3_3_1_1_s_fu_627_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_convolution_double_double_double_double_8_8_8_8_8_8_3_3_1_1_s_fu_627_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln148_fu_1221_p2 = ap_const_lv1_1))) then 
                    grp_convolution_double_double_double_double_8_8_8_8_8_8_3_3_1_1_s_fu_627_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_convolution_double_double_double_double_8_8_8_8_8_8_3_3_1_1_s_fu_627_ap_ready = ap_const_logic_1)) then 
                    grp_convolution_double_double_double_double_8_8_8_8_8_8_3_3_1_1_s_fu_627_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_398_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln115_1_fu_895_p2 = ap_const_lv1_0) and (icmp_ln116_reg_1415 = ap_const_lv1_1))) then 
                i_1_reg_398 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                i_1_reg_398 <= add_ln116_1_reg_1537;
            end if; 
        end if;
    end process;

    i_2_reg_431_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln115_2_fu_1054_p2 = ap_const_lv1_0) and (icmp_ln116_reg_1415 = ap_const_lv1_1))) then 
                i_2_reg_431 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                i_2_reg_431 <= add_ln116_2_reg_1605;
            end if; 
        end if;
    end process;

    i_3_reg_464_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln148_fu_1221_p2 = ap_const_lv1_0) and (icmp_ln149_reg_1646 = ap_const_lv1_1))) then 
                i_3_reg_464 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                i_3_reg_464 <= add_ln149_reg_1683;
            end if; 
        end if;
    end process;

    i_4_reg_497_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) and (icmp_ln148_1_fu_1271_p2 = ap_const_lv1_0) and (icmp_ln149_reg_1646 = ap_const_lv1_1))) then 
                i_4_reg_497 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                i_4_reg_497 <= add_ln149_1_reg_1725;
            end if; 
        end if;
    end process;

    i_5_reg_530_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state37) and (icmp_ln148_2_fu_1321_p2 = ap_const_lv1_0) and (icmp_ln149_reg_1646 = ap_const_lv1_1))) then 
                i_5_reg_530 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                i_5_reg_530 <= add_ln149_2_reg_1767;
            end if; 
        end if;
    end process;

    i_reg_365_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln115_fu_736_p2 = ap_const_lv1_0) and (icmp_ln116_reg_1415 = ap_const_lv1_1))) then 
                i_reg_365 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_reg_365 <= add_ln116_reg_1463;
            end if; 
        end if;
    end process;

    j_1_reg_409_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln116_2_fu_911_p2 = ap_const_lv1_0) and (cmp27_i_reg_1419 = ap_const_lv1_1) and (icmp_ln116_reg_1415 = ap_const_lv1_1))) then 
                j_1_reg_409 <= ap_const_lv31_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln117_1_reg_1546 = ap_const_lv1_0))) then 
                j_1_reg_409 <= add_ln117_1_reg_1550;
            end if; 
        end if;
    end process;

    j_2_reg_442_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln116_3_fu_1070_p2 = ap_const_lv1_0) and (cmp27_i_reg_1419 = ap_const_lv1_1) and (icmp_ln116_reg_1415 = ap_const_lv1_1))) then 
                j_2_reg_442 <= ap_const_lv31_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln117_2_reg_1614 = ap_const_lv1_0))) then 
                j_2_reg_442 <= add_ln117_2_reg_1618;
            end if; 
        end if;
    end process;

    j_3_reg_475_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) and (icmp_ln149_1_fu_1237_p2 = ap_const_lv1_0) and (cmp31_i199_reg_1657 = ap_const_lv1_1) and (icmp_ln149_reg_1646 = ap_const_lv1_1))) then 
                j_3_reg_475 <= ap_const_lv31_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state27) and (icmp_ln150_fu_1256_p2 = ap_const_lv1_0))) then 
                j_3_reg_475 <= add_ln150_fu_1261_p2;
            end if; 
        end if;
    end process;

    j_4_reg_508_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state32) and (icmp_ln149_2_fu_1287_p2 = ap_const_lv1_0) and (cmp31_i199_reg_1657 = ap_const_lv1_1) and (icmp_ln149_reg_1646 = ap_const_lv1_1))) then 
                j_4_reg_508 <= ap_const_lv31_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state33) and (icmp_ln150_1_fu_1306_p2 = ap_const_lv1_0))) then 
                j_4_reg_508 <= add_ln150_1_fu_1311_p2;
            end if; 
        end if;
    end process;

    j_5_reg_541_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state38) and (icmp_ln149_3_fu_1337_p2 = ap_const_lv1_0) and (cmp31_i199_reg_1657 = ap_const_lv1_1) and (icmp_ln149_reg_1646 = ap_const_lv1_1))) then 
                j_5_reg_541 <= ap_const_lv31_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state39) and (icmp_ln150_2_fu_1356_p2 = ap_const_lv1_0))) then 
                j_5_reg_541 <= add_ln150_2_fu_1361_p2;
            end if; 
        end if;
    end process;

    j_reg_376_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln116_1_fu_752_p2 = ap_const_lv1_0) and (cmp27_i_reg_1419 = ap_const_lv1_1) and (icmp_ln116_reg_1415 = ap_const_lv1_1))) then 
                j_reg_376 <= ap_const_lv31_0;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln117_reg_1472 = ap_const_lv1_0))) then 
                j_reg_376 <= add_ln117_reg_1476;
            end if; 
        end if;
    end process;

    num_channel_1_reg_387_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and ((icmp_ln116_2_fu_911_p2 = ap_const_lv1_1) or (icmp_ln116_reg_1415 = ap_const_lv1_0)))) then 
                num_channel_1_reg_387 <= add_ln115_1_reg_1517;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                num_channel_1_reg_387 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    num_channel_2_reg_420_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and ((icmp_ln116_3_fu_1070_p2 = ap_const_lv1_1) or (icmp_ln116_reg_1415 = ap_const_lv1_0)))) then 
                num_channel_2_reg_420 <= add_ln115_2_reg_1591;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                num_channel_2_reg_420 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    num_channel_3_reg_453_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                num_channel_3_reg_453 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state26) and ((icmp_ln149_reg_1646 = ap_const_lv1_0) or (icmp_ln149_1_fu_1237_p2 = ap_const_lv1_1)))) then 
                num_channel_3_reg_453 <= add_ln148_reg_1669;
            end if; 
        end if;
    end process;

    num_channel_4_reg_486_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                num_channel_4_reg_486 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state32) and ((icmp_ln149_reg_1646 = ap_const_lv1_0) or (icmp_ln149_2_fu_1287_p2 = ap_const_lv1_1)))) then 
                num_channel_4_reg_486 <= add_ln148_1_reg_1711;
            end if; 
        end if;
    end process;

    num_channel_5_reg_519_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                num_channel_5_reg_519 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state38) and ((icmp_ln149_reg_1646 = ap_const_lv1_0) or (icmp_ln149_3_fu_1337_p2 = ap_const_lv1_1)))) then 
                num_channel_5_reg_519 <= add_ln148_2_reg_1753;
            end if; 
        end if;
    end process;

    num_channel_reg_354_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and ((icmp_ln116_1_fu_752_p2 = ap_const_lv1_1) or (icmp_ln116_reg_1415 = ap_const_lv1_0)))) then 
                num_channel_reg_354 <= add_ln115_reg_1443;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                num_channel_reg_354 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                add_ln115_1_reg_1517 <= add_ln115_1_fu_901_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                add_ln115_2_reg_1591 <= add_ln115_2_fu_1060_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln115_reg_1443 <= add_ln115_fu_742_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln116_reg_1415 = ap_const_lv1_1))) then
                add_ln116_1_reg_1537 <= add_ln116_1_fu_916_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln116_reg_1415 = ap_const_lv1_1))) then
                add_ln116_2_reg_1605 <= add_ln116_2_fu_1075_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln116_reg_1415 = ap_const_lv1_1))) then
                add_ln116_reg_1463 <= add_ln116_fu_757_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                add_ln117_1_reg_1550 <= add_ln117_1_fu_940_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                add_ln117_2_reg_1618 <= add_ln117_2_fu_1099_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln117_reg_1476 <= add_ln117_fu_781_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                add_ln148_1_reg_1711 <= add_ln148_1_fu_1277_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                add_ln148_2_reg_1753 <= add_ln148_2_fu_1327_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                add_ln148_reg_1669 <= add_ln148_fu_1227_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state32) and (icmp_ln149_reg_1646 = ap_const_lv1_1))) then
                add_ln149_1_reg_1725 <= add_ln149_1_fu_1292_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state38) and (icmp_ln149_reg_1646 = ap_const_lv1_1))) then
                add_ln149_2_reg_1767 <= add_ln149_2_fu_1342_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) and (icmp_ln149_reg_1646 = ap_const_lv1_1))) then
                add_ln149_reg_1683 <= add_ln149_fu_1242_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                bitcast_ln120_1_reg_1502 <= bitcast_ln120_1_fu_881_p1;
                icmp_ln127_5_reg_1509 <= icmp_ln127_5_fu_889_p2;
                output_conv2_read_reg_1497 <= output_conv2_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                bitcast_ln120_2_reg_1576 <= bitcast_ln120_2_fu_1040_p1;
                icmp_ln127_9_reg_1583 <= icmp_ln127_9_fu_1048_p2;
                output_conv3_read_reg_1571 <= output_conv3_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                bitcast_ln120_reg_1428 <= bitcast_ln120_fu_722_p1;
                cmp27_i_reg_1419 <= cmp27_i_fu_716_p2;
                icmp_ln116_reg_1415 <= icmp_ln116_fu_710_p2;
                icmp_ln127_1_reg_1435 <= icmp_ln127_1_fu_730_p2;
                output_conv1_read_reg_1423 <= output_conv1_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln116_2_fu_911_p2 = ap_const_lv1_0) and (cmp27_i_reg_1419 = ap_const_lv1_1) and (icmp_ln116_reg_1415 = ap_const_lv1_1))) then
                cmp17_i17_reg_1542 <= cmp17_i17_fu_926_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln116_3_fu_1070_p2 = ap_const_lv1_0) and (cmp27_i_reg_1419 = ap_const_lv1_1) and (icmp_ln116_reg_1415 = ap_const_lv1_1))) then
                cmp17_i92_reg_1610 <= cmp17_i92_fu_1085_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln116_1_fu_752_p2 = ap_const_lv1_0) and (cmp27_i_reg_1419 = ap_const_lv1_1) and (icmp_ln116_reg_1415 = ap_const_lv1_1))) then
                cmp17_i_reg_1468 <= cmp17_i_fu_767_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                cmp31_i199_reg_1657 <= cmp31_i199_fu_1215_p2;
                    empty_109_reg_1650(31 downto 1) <= empty_109_fu_1210_p2(31 downto 1);
                icmp_ln149_reg_1646 <= icmp_ln149_fu_1204_p2;
                output_conv4_read_reg_1661 <= output_conv4_i;
                    shl_ln149_reg_1639(31 downto 1) <= shl_ln149_fu_1199_p2(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) and (icmp_ln149_1_fu_1237_p2 = ap_const_lv1_0) and (cmp31_i199_reg_1657 = ap_const_lv1_1) and (icmp_ln149_reg_1646 = ap_const_lv1_1))) then
                empty_112_reg_1688 <= empty_112_fu_1248_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state32) and (icmp_ln149_2_fu_1287_p2 = ap_const_lv1_0) and (cmp31_i199_reg_1657 = ap_const_lv1_1) and (icmp_ln149_reg_1646 = ap_const_lv1_1))) then
                empty_117_reg_1730 <= empty_117_fu_1298_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state38) and (icmp_ln149_3_fu_1337_p2 = ap_const_lv1_0) and (cmp31_i199_reg_1657 = ap_const_lv1_1) and (icmp_ln149_reg_1646 = ap_const_lv1_1))) then
                empty_122_reg_1772 <= empty_122_fu_1348_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                empty_reg_1377 <= empty_fu_705_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln117_1_reg_1546 <= icmp_ln117_1_fu_935_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln117_2_reg_1614 <= icmp_ln117_2_fu_1094_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln117_reg_1472 <= icmp_ln117_fu_776_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln117_1_fu_935_p2 = ap_const_lv1_0) and (cmp17_i17_reg_1542 = ap_const_lv1_1))) then
                icmp_ln123_1_reg_1555 <= icmp_ln123_1_fu_950_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln117_2_fu_1094_p2 = ap_const_lv1_0) and (cmp17_i92_reg_1610 = ap_const_lv1_1))) then
                icmp_ln123_2_reg_1623 <= icmp_ln123_2_fu_1109_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln117_fu_776_p2 = ap_const_lv1_0) and (cmp17_i_reg_1468 = ap_const_lv1_1))) then
                icmp_ln123_reg_1481 <= icmp_ln123_fu_791_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln117_1_fu_935_p2 = ap_const_lv1_0) and (icmp_ln123_1_fu_950_p2 = ap_const_lv1_1) and (cmp17_i17_reg_1542 = ap_const_lv1_1))) then
                icmp_ln127_4_reg_1566 <= icmp_ln127_4_fu_968_p2;
                max_val_1_load_reg_1559 <= max_val_1_fu_208;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln117_2_fu_1094_p2 = ap_const_lv1_0) and (icmp_ln123_2_fu_1109_p2 = ap_const_lv1_1) and (cmp17_i92_reg_1610 = ap_const_lv1_1))) then
                icmp_ln127_8_reg_1634 <= icmp_ln127_8_fu_1127_p2;
                max_val_2_load_reg_1627 <= max_val_2_fu_212;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln117_fu_776_p2 = ap_const_lv1_0) and (icmp_ln123_fu_791_p2 = ap_const_lv1_1) and (cmp17_i_reg_1468 = ap_const_lv1_1))) then
                icmp_ln127_reg_1492 <= icmp_ln127_fu_809_p2;
                max_val_load_reg_1485 <= max_val_fu_204;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln117_1_fu_935_p2 = ap_const_lv1_0))) then
                max_val_1_fu_208 <= bitcast_ln120_1_reg_1502;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln117_2_fu_1094_p2 = ap_const_lv1_0))) then
                max_val_2_fu_212 <= bitcast_ln120_2_reg_1576;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln117_fu_776_p2 = ap_const_lv1_0))) then
                max_val_fu_204 <= bitcast_ln120_reg_1428;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                output_conv5_read_reg_1703 <= output_conv5_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                output_conv6_read_reg_1745 <= output_conv6_i;
            end if;
        end if;
    end process;
    shl_ln149_reg_1639(0) <= '0';
    empty_109_reg_1650(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln116_reg_1415, cmp27_i_reg_1419, ap_CS_fsm_state4, icmp_ln115_fu_736_p2, icmp_ln116_1_fu_752_p2, ap_CS_fsm_state5, icmp_ln117_fu_776_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state11, icmp_ln115_1_fu_895_p2, icmp_ln116_2_fu_911_p2, ap_CS_fsm_state12, icmp_ln117_1_fu_935_p2, ap_enable_reg_pp1_iter0, ap_CS_fsm_state18, icmp_ln115_2_fu_1054_p2, icmp_ln116_3_fu_1070_p2, ap_CS_fsm_state19, icmp_ln117_2_fu_1094_p2, ap_enable_reg_pp2_iter0, icmp_ln149_reg_1646, cmp31_i199_reg_1657, ap_CS_fsm_state25, icmp_ln148_fu_1221_p2, icmp_ln149_1_fu_1237_p2, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state31, icmp_ln148_1_fu_1271_p2, icmp_ln149_2_fu_1287_p2, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state37, icmp_ln148_2_fu_1321_p2, icmp_ln149_3_fu_1337_p2, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, grp_convolution_double_double_double_double_4_4_8_8_4_4_3_3_1_1_s_fu_552_ap_done, grp_convolution_double_double_double_double_16_16_8_16_14_14_3_3_1_0_s_fu_589_ap_done, grp_convolution_double_double_double_double_14_14_16_8_14_14_3_3_1_1_s_fu_608_ap_done, grp_convolution_double_double_double_double_8_8_8_8_8_8_3_3_1_1_s_fu_627_ap_done, grp_convolution_double_double_double_double_7_7_8_8_7_7_3_3_1_1_s_fu_646_ap_done, grp_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_fu_665_ap_done, grp_convolution_double_double_double_double_28_28_16_1_28_28_3_3_1_0_s_fu_684_ap_done, icmp_ln150_fu_1256_p2, icmp_ln150_1_fu_1306_p2, icmp_ln150_2_fu_1356_p2, ap_CS_fsm_state23, ap_CS_fsm_state35, ap_CS_fsm_state9, ap_CS_fsm_state29, ap_CS_fsm_state16, ap_CS_fsm_state2, ap_CS_fsm_state41)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_fu_665_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln115_fu_736_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and ((icmp_ln116_1_fu_752_p2 = ap_const_lv1_1) or (icmp_ln116_reg_1415 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln116_1_fu_752_p2 = ap_const_lv1_0) and (cmp27_i_reg_1419 = ap_const_lv1_1) and (icmp_ln116_reg_1415 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln117_fu_776_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln117_fu_776_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state9 => 
                if (((grp_convolution_double_double_double_double_14_14_16_8_14_14_3_3_1_1_s_fu_608_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln115_1_fu_895_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and ((icmp_ln116_2_fu_911_p2 = ap_const_lv1_1) or (icmp_ln116_reg_1415 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln116_2_fu_911_p2 = ap_const_lv1_0) and (cmp27_i_reg_1419 = ap_const_lv1_1) and (icmp_ln116_reg_1415 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln117_1_fu_935_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln117_1_fu_935_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state16 => 
                if (((grp_convolution_double_double_double_double_7_7_8_8_7_7_3_3_1_1_s_fu_646_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln115_2_fu_1054_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and ((icmp_ln116_3_fu_1070_p2 = ap_const_lv1_1) or (icmp_ln116_reg_1415 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln116_3_fu_1070_p2 = ap_const_lv1_0) and (cmp27_i_reg_1419 = ap_const_lv1_1) and (icmp_ln116_reg_1415 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln117_2_fu_1094_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln117_2_fu_1094_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state23 => 
                if (((grp_convolution_double_double_double_double_4_4_8_8_4_4_3_3_1_1_s_fu_552_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln148_fu_1221_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and ((icmp_ln149_reg_1646 = ap_const_lv1_0) or (icmp_ln149_1_fu_1237_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state26) and (icmp_ln149_1_fu_1237_p2 = ap_const_lv1_0) and (cmp31_i199_reg_1657 = ap_const_lv1_1) and (icmp_ln149_reg_1646 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (icmp_ln150_fu_1256_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state29 => 
                if (((grp_convolution_double_double_double_double_8_8_8_8_8_8_3_3_1_1_s_fu_627_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state31) and (icmp_ln148_1_fu_1271_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state32 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state32) and ((icmp_ln149_reg_1646 = ap_const_lv1_0) or (icmp_ln149_2_fu_1287_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state32) and (icmp_ln149_2_fu_1287_p2 = ap_const_lv1_0) and (cmp31_i199_reg_1657 = ap_const_lv1_1) and (icmp_ln149_reg_1646 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state33 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state33) and (icmp_ln150_1_fu_1306_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state35 => 
                if (((grp_convolution_double_double_double_double_16_16_8_16_14_14_3_3_1_0_s_fu_589_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state37) and (icmp_ln148_2_fu_1321_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state38 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state38) and ((icmp_ln149_reg_1646 = ap_const_lv1_0) or (icmp_ln149_3_fu_1337_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state38) and (icmp_ln149_3_fu_1337_p2 = ap_const_lv1_0) and (cmp31_i199_reg_1657 = ap_const_lv1_1) and (icmp_ln149_reg_1646 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state39 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state39) and (icmp_ln150_2_fu_1356_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state41 => 
                if (((grp_convolution_double_double_double_double_28_28_16_1_28_28_3_3_1_0_s_fu_684_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    and_ln127_1_fu_864_p2 <= (grp_fu_701_p2 and and_ln127_fu_858_p2);
    and_ln127_2_fu_1017_p2 <= (or_ln127_3_fu_1011_p2 and or_ln127_2_fu_995_p2);
    and_ln127_3_fu_1023_p2 <= (grp_fu_701_p2 and and_ln127_2_fu_1017_p2);
    and_ln127_4_fu_1176_p2 <= (or_ln127_5_fu_1170_p2 and or_ln127_4_fu_1154_p2);
    and_ln127_5_fu_1182_p2 <= (grp_fu_701_p2 and and_ln127_4_fu_1176_p2);
    and_ln127_fu_858_p2 <= (or_ln127_fu_836_p2 and or_ln127_1_fu_852_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(11);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(17);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(8);
    ap_CS_fsm_state11 <= ap_CS_fsm(9);
    ap_CS_fsm_state12 <= ap_CS_fsm(10);
    ap_CS_fsm_state15 <= ap_CS_fsm(12);
    ap_CS_fsm_state16 <= ap_CS_fsm(13);
    ap_CS_fsm_state17 <= ap_CS_fsm(14);
    ap_CS_fsm_state18 <= ap_CS_fsm(15);
    ap_CS_fsm_state19 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(18);
    ap_CS_fsm_state23 <= ap_CS_fsm(19);
    ap_CS_fsm_state24 <= ap_CS_fsm(20);
    ap_CS_fsm_state25 <= ap_CS_fsm(21);
    ap_CS_fsm_state26 <= ap_CS_fsm(22);
    ap_CS_fsm_state27 <= ap_CS_fsm(23);
    ap_CS_fsm_state28 <= ap_CS_fsm(24);
    ap_CS_fsm_state29 <= ap_CS_fsm(25);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(26);
    ap_CS_fsm_state31 <= ap_CS_fsm(27);
    ap_CS_fsm_state32 <= ap_CS_fsm(28);
    ap_CS_fsm_state33 <= ap_CS_fsm(29);
    ap_CS_fsm_state34 <= ap_CS_fsm(30);
    ap_CS_fsm_state35 <= ap_CS_fsm(31);
    ap_CS_fsm_state36 <= ap_CS_fsm(32);
    ap_CS_fsm_state37 <= ap_CS_fsm(33);
    ap_CS_fsm_state38 <= ap_CS_fsm(34);
    ap_CS_fsm_state39 <= ap_CS_fsm(35);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(36);
    ap_CS_fsm_state41 <= ap_CS_fsm(37);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state6_assign_proc : process(icmp_ln117_fu_776_p2)
    begin
        if ((icmp_ln117_fu_776_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state13_assign_proc : process(icmp_ln117_1_fu_935_p2)
    begin
        if ((icmp_ln117_1_fu_935_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state13 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state20_assign_proc : process(icmp_ln117_2_fu_1094_p2)
    begin
        if ((icmp_ln117_2_fu_1094_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state20 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state20 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(grp_convolution_double_double_double_double_28_28_16_1_28_28_3_3_1_0_s_fu_684_ap_done, ap_CS_fsm_state41)
    begin
        if (((grp_convolution_double_double_double_double_28_28_16_1_28_28_3_3_1_0_s_fu_684_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_j_1_phi_fu_413_p4_assign_proc : process(j_1_reg_409, icmp_ln117_1_reg_1546, ap_CS_fsm_pp1_stage0, add_ln117_1_reg_1550, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln117_1_reg_1546 = ap_const_lv1_0))) then 
            ap_phi_mux_j_1_phi_fu_413_p4 <= add_ln117_1_reg_1550;
        else 
            ap_phi_mux_j_1_phi_fu_413_p4 <= j_1_reg_409;
        end if; 
    end process;


    ap_phi_mux_j_2_phi_fu_446_p4_assign_proc : process(j_2_reg_442, icmp_ln117_2_reg_1614, ap_CS_fsm_pp2_stage0, add_ln117_2_reg_1618, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln117_2_reg_1614 = ap_const_lv1_0))) then 
            ap_phi_mux_j_2_phi_fu_446_p4 <= add_ln117_2_reg_1618;
        else 
            ap_phi_mux_j_2_phi_fu_446_p4 <= j_2_reg_442;
        end if; 
    end process;


    ap_phi_mux_j_phi_fu_380_p4_assign_proc : process(j_reg_376, icmp_ln117_reg_1472, ap_CS_fsm_pp0_stage0, add_ln117_reg_1476, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln117_reg_1472 = ap_const_lv1_0))) then 
            ap_phi_mux_j_phi_fu_380_p4 <= add_ln117_reg_1476;
        else 
            ap_phi_mux_j_phi_fu_380_p4 <= j_reg_376;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_convolution_double_double_double_double_28_28_16_1_28_28_3_3_1_0_s_fu_684_ap_done, ap_CS_fsm_state41)
    begin
        if (((grp_convolution_double_double_double_double_28_28_16_1_28_28_3_3_1_0_s_fu_684_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln120_1_fu_881_p1 <= output_conv2_i;
    bitcast_ln120_2_fu_1040_p1 <= output_conv3_i;
    bitcast_ln120_fu_722_p1 <= output_conv1_i;
    bitcast_ln127_1_fu_978_p1 <= max_val_1_load_reg_1559;
    bitcast_ln127_2_fu_1137_p1 <= max_val_2_load_reg_1627;
    bitcast_ln127_fu_819_p1 <= max_val_load_reg_1485;
    bitcast_ln131_1_fu_1035_p1 <= select_ln127_1_fu_1029_p3;
    bitcast_ln131_2_fu_1194_p1 <= select_ln127_2_fu_1188_p3;
    bitcast_ln131_fu_876_p1 <= select_ln127_fu_870_p3;
    cmp17_i17_fu_926_p2 <= "1" when (signed(p_cast1_fu_922_p1) < signed(hight)) else "0";
    cmp17_i92_fu_1085_p2 <= "1" when (signed(p_cast2_fu_1081_p1) < signed(hight)) else "0";
    cmp17_i_fu_767_p2 <= "1" when (signed(p_cast_fu_763_p1) < signed(hight)) else "0";
    cmp27_i_fu_716_p2 <= "1" when (signed(width) > signed(ap_const_lv32_0)) else "0";
    cmp31_i199_fu_1215_p2 <= "1" when (signed(empty_109_fu_1210_p2) > signed(ap_const_lv32_0)) else "0";
    empty_109_fu_1210_p2 <= std_logic_vector(shift_left(unsigned(width),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    empty_112_fu_1248_p1 <= i_3_reg_464(1 - 1 downto 0);
    empty_114_fu_1267_p1 <= j_3_reg_475(1 - 1 downto 0);
    empty_117_fu_1298_p1 <= i_4_reg_497(1 - 1 downto 0);
    empty_119_fu_1317_p1 <= j_4_reg_508(1 - 1 downto 0);
    empty_122_fu_1348_p1 <= i_5_reg_530(1 - 1 downto 0);
    empty_124_fu_1367_p1 <= j_5_reg_541(1 - 1 downto 0);
    empty_fu_705_p1 <= padding(31 - 1 downto 0);
    grp_convolution_double_double_double_double_14_14_16_8_14_14_3_3_1_1_s_fu_608_ap_start <= grp_convolution_double_double_double_double_14_14_16_8_14_14_3_3_1_1_s_fu_608_ap_start_reg;
    grp_convolution_double_double_double_double_16_16_8_16_14_14_3_3_1_0_s_fu_589_ap_start <= grp_convolution_double_double_double_double_16_16_8_16_14_14_3_3_1_0_s_fu_589_ap_start_reg;
    grp_convolution_double_double_double_double_28_28_16_1_28_28_3_3_1_0_s_fu_684_ap_start <= grp_convolution_double_double_double_double_28_28_16_1_28_28_3_3_1_0_s_fu_684_ap_start_reg;
    grp_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_fu_665_ap_start <= grp_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_fu_665_ap_start_reg;
    grp_convolution_double_double_double_double_4_4_8_8_4_4_3_3_1_1_s_fu_552_ap_start <= grp_convolution_double_double_double_double_4_4_8_8_4_4_3_3_1_1_s_fu_552_ap_start_reg;
    grp_convolution_double_double_double_double_7_7_8_8_7_7_3_3_1_1_s_fu_646_ap_start <= grp_convolution_double_double_double_double_7_7_8_8_7_7_3_3_1_1_s_fu_646_ap_start_reg;
    grp_convolution_double_double_double_double_8_8_8_8_8_8_3_3_1_1_s_fu_627_ap_start <= grp_convolution_double_double_double_double_8_8_8_8_8_8_3_3_1_1_s_fu_627_ap_start_reg;

    grp_fu_701_p0_assign_proc : process(bitcast_ln120_reg_1428, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, bitcast_ln120_1_reg_1502, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, bitcast_ln120_2_reg_1576, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp0_stage0, ap_block_pp1_stage0, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            grp_fu_701_p0 <= bitcast_ln120_2_reg_1576;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            grp_fu_701_p0 <= bitcast_ln120_1_reg_1502;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_701_p0 <= bitcast_ln120_reg_1428;
        else 
            grp_fu_701_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_701_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp0_stage0, ap_block_pp1_stage0, ap_block_pp2_stage0, max_val_fu_204, max_val_1_fu_208, max_val_2_fu_212)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            grp_fu_701_p1 <= max_val_2_fu_212;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            grp_fu_701_p1 <= max_val_1_fu_208;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_701_p1 <= max_val_fu_204;
        else 
            grp_fu_701_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln115_1_fu_895_p2 <= "1" when (num_channel_1_reg_387 = ap_const_lv4_8) else "0";
    icmp_ln115_2_fu_1054_p2 <= "1" when (num_channel_2_reg_420 = ap_const_lv4_8) else "0";
    icmp_ln115_fu_736_p2 <= "1" when (num_channel_reg_354 = ap_const_lv5_10) else "0";
    icmp_ln116_1_fu_752_p2 <= "1" when (zext_ln116_fu_748_p1 = hight) else "0";
    icmp_ln116_2_fu_911_p2 <= "1" when (zext_ln116_1_fu_907_p1 = hight) else "0";
    icmp_ln116_3_fu_1070_p2 <= "1" when (zext_ln116_2_fu_1066_p1 = hight) else "0";
    icmp_ln116_fu_710_p2 <= "1" when (signed(hight) > signed(ap_const_lv32_0)) else "0";
    icmp_ln117_1_fu_935_p2 <= "1" when (j_1_cast_fu_931_p1 = width) else "0";
    icmp_ln117_2_fu_1094_p2 <= "1" when (j_2_cast_fu_1090_p1 = width) else "0";
    icmp_ln117_fu_776_p2 <= "1" when (j_cast_fu_772_p1 = width) else "0";
    icmp_ln123_1_fu_950_p2 <= "1" when (signed(zext_ln123_1_fu_946_p1) < signed(width)) else "0";
    icmp_ln123_2_fu_1109_p2 <= "1" when (signed(zext_ln123_2_fu_1105_p1) < signed(width)) else "0";
    icmp_ln123_fu_791_p2 <= "1" when (signed(zext_ln123_fu_787_p1) < signed(width)) else "0";
    icmp_ln127_10_fu_1158_p2 <= "0" when (tmp_8_fu_1140_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln127_11_fu_1164_p2 <= "1" when (trunc_ln127_5_fu_1150_p1 = ap_const_lv52_0) else "0";
    icmp_ln127_1_fu_730_p2 <= "1" when (trunc_ln127_fu_726_p1 = ap_const_lv52_0) else "0";
    icmp_ln127_2_fu_840_p2 <= "0" when (tmp_s_fu_822_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln127_3_fu_846_p2 <= "1" when (trunc_ln127_3_fu_832_p1 = ap_const_lv52_0) else "0";
    icmp_ln127_4_fu_968_p2 <= "0" when (tmp_4_fu_959_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln127_5_fu_889_p2 <= "1" when (trunc_ln127_1_fu_885_p1 = ap_const_lv52_0) else "0";
    icmp_ln127_6_fu_999_p2 <= "0" when (tmp_5_fu_981_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln127_7_fu_1005_p2 <= "1" when (trunc_ln127_4_fu_991_p1 = ap_const_lv52_0) else "0";
    icmp_ln127_8_fu_1127_p2 <= "0" when (tmp_7_fu_1118_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln127_9_fu_1048_p2 <= "1" when (trunc_ln127_2_fu_1044_p1 = ap_const_lv52_0) else "0";
    icmp_ln127_fu_809_p2 <= "0" when (tmp_fu_800_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln148_1_fu_1271_p2 <= "1" when (num_channel_4_reg_486 = ap_const_lv4_8) else "0";
    icmp_ln148_2_fu_1321_p2 <= "1" when (num_channel_5_reg_519 = ap_const_lv4_E) else "0";
    icmp_ln148_fu_1221_p2 <= "1" when (num_channel_3_reg_453 = ap_const_lv4_8) else "0";
    icmp_ln149_1_fu_1237_p2 <= "1" when (zext_ln149_fu_1233_p1 = shl_ln149_reg_1639) else "0";
    icmp_ln149_2_fu_1287_p2 <= "1" when (zext_ln149_1_fu_1283_p1 = shl_ln149_reg_1639) else "0";
    icmp_ln149_3_fu_1337_p2 <= "1" when (zext_ln149_2_fu_1333_p1 = shl_ln149_reg_1639) else "0";
    icmp_ln149_fu_1204_p2 <= "1" when (signed(shl_ln149_fu_1199_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln150_1_fu_1306_p2 <= "1" when (j_4_cast_fu_1302_p1 = empty_109_reg_1650) else "0";
    icmp_ln150_2_fu_1356_p2 <= "1" when (j_5_cast_fu_1352_p1 = empty_109_reg_1650) else "0";
    icmp_ln150_fu_1256_p2 <= "1" when (j_3_cast_fu_1252_p1 = empty_109_reg_1650) else "0";
    j_1_cast_fu_931_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j_1_phi_fu_413_p4),32));
    j_2_cast_fu_1090_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j_2_phi_fu_446_p4),32));
    j_3_cast_fu_1252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_3_reg_475),32));
    j_4_cast_fu_1302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_4_reg_508),32));
    j_5_cast_fu_1352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_5_reg_541),32));
    j_cast_fu_772_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j_phi_fu_380_p4),32));
    or_ln127_1_fu_852_p2 <= (icmp_ln127_3_fu_846_p2 or icmp_ln127_2_fu_840_p2);
    or_ln127_2_fu_995_p2 <= (icmp_ln127_5_reg_1509 or icmp_ln127_4_reg_1566);
    or_ln127_3_fu_1011_p2 <= (icmp_ln127_7_fu_1005_p2 or icmp_ln127_6_fu_999_p2);
    or_ln127_4_fu_1154_p2 <= (icmp_ln127_9_reg_1583 or icmp_ln127_8_reg_1634);
    or_ln127_5_fu_1170_p2 <= (icmp_ln127_11_fu_1164_p2 or icmp_ln127_10_fu_1158_p2);
    or_ln127_fu_836_p2 <= (icmp_ln127_reg_1492 or icmp_ln127_1_reg_1435);

    output_conv1_o_assign_proc : process(output_conv1_i, grp_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_fu_665_output_conv1, grp_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_fu_665_output_conv1_ap_vld, ap_CS_fsm_state2)
    begin
        if (((grp_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_fu_665_output_conv1_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            output_conv1_o <= grp_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_fu_665_output_conv1;
        else 
            output_conv1_o <= output_conv1_i;
        end if; 
    end process;


    output_conv1_o_ap_vld_assign_proc : process(grp_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_fu_665_output_conv1_ap_vld, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_conv1_o_ap_vld <= grp_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_fu_665_output_conv1_ap_vld;
        else 
            output_conv1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    output_conv2_o_assign_proc : process(output_conv2_i, grp_convolution_double_double_double_double_14_14_16_8_14_14_3_3_1_1_s_fu_608_output_conv2, grp_convolution_double_double_double_double_14_14_16_8_14_14_3_3_1_1_s_fu_608_output_conv2_ap_vld, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_convolution_double_double_double_double_14_14_16_8_14_14_3_3_1_1_s_fu_608_output_conv2_ap_vld = ap_const_logic_1))) then 
            output_conv2_o <= grp_convolution_double_double_double_double_14_14_16_8_14_14_3_3_1_1_s_fu_608_output_conv2;
        else 
            output_conv2_o <= output_conv2_i;
        end if; 
    end process;


    output_conv2_o_ap_vld_assign_proc : process(grp_convolution_double_double_double_double_14_14_16_8_14_14_3_3_1_1_s_fu_608_output_conv2_ap_vld, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_conv2_o_ap_vld <= grp_convolution_double_double_double_double_14_14_16_8_14_14_3_3_1_1_s_fu_608_output_conv2_ap_vld;
        else 
            output_conv2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    output_conv3_o_assign_proc : process(output_conv3_i, grp_convolution_double_double_double_double_7_7_8_8_7_7_3_3_1_1_s_fu_646_output_conv3, grp_convolution_double_double_double_double_7_7_8_8_7_7_3_3_1_1_s_fu_646_output_conv3_ap_vld, ap_CS_fsm_state16)
    begin
        if (((grp_convolution_double_double_double_double_7_7_8_8_7_7_3_3_1_1_s_fu_646_output_conv3_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            output_conv3_o <= grp_convolution_double_double_double_double_7_7_8_8_7_7_3_3_1_1_s_fu_646_output_conv3;
        else 
            output_conv3_o <= output_conv3_i;
        end if; 
    end process;


    output_conv3_o_ap_vld_assign_proc : process(grp_convolution_double_double_double_double_7_7_8_8_7_7_3_3_1_1_s_fu_646_output_conv3_ap_vld, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            output_conv3_o_ap_vld <= grp_convolution_double_double_double_double_7_7_8_8_7_7_3_3_1_1_s_fu_646_output_conv3_ap_vld;
        else 
            output_conv3_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    output_conv4_o_assign_proc : process(output_conv4_i, grp_convolution_double_double_double_double_4_4_8_8_4_4_3_3_1_1_s_fu_552_output_conv4, grp_convolution_double_double_double_double_4_4_8_8_4_4_3_3_1_1_s_fu_552_output_conv4_ap_vld, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) and (grp_convolution_double_double_double_double_4_4_8_8_4_4_3_3_1_1_s_fu_552_output_conv4_ap_vld = ap_const_logic_1))) then 
            output_conv4_o <= grp_convolution_double_double_double_double_4_4_8_8_4_4_3_3_1_1_s_fu_552_output_conv4;
        else 
            output_conv4_o <= output_conv4_i;
        end if; 
    end process;


    output_conv4_o_ap_vld_assign_proc : process(grp_convolution_double_double_double_double_4_4_8_8_4_4_3_3_1_1_s_fu_552_output_conv4_ap_vld, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            output_conv4_o_ap_vld <= grp_convolution_double_double_double_double_4_4_8_8_4_4_3_3_1_1_s_fu_552_output_conv4_ap_vld;
        else 
            output_conv4_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    output_conv5_o_assign_proc : process(output_conv5_i, grp_convolution_double_double_double_double_8_8_8_8_8_8_3_3_1_1_s_fu_627_output_conv5, grp_convolution_double_double_double_double_8_8_8_8_8_8_3_3_1_1_s_fu_627_output_conv5_ap_vld, ap_CS_fsm_state29)
    begin
        if (((grp_convolution_double_double_double_double_8_8_8_8_8_8_3_3_1_1_s_fu_627_output_conv5_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            output_conv5_o <= grp_convolution_double_double_double_double_8_8_8_8_8_8_3_3_1_1_s_fu_627_output_conv5;
        else 
            output_conv5_o <= output_conv5_i;
        end if; 
    end process;


    output_conv5_o_ap_vld_assign_proc : process(grp_convolution_double_double_double_double_8_8_8_8_8_8_3_3_1_1_s_fu_627_output_conv5_ap_vld, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            output_conv5_o_ap_vld <= grp_convolution_double_double_double_double_8_8_8_8_8_8_3_3_1_1_s_fu_627_output_conv5_ap_vld;
        else 
            output_conv5_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    output_conv6_o_assign_proc : process(output_conv6_i, grp_convolution_double_double_double_double_16_16_8_16_14_14_3_3_1_0_s_fu_589_output_conv6, grp_convolution_double_double_double_double_16_16_8_16_14_14_3_3_1_0_s_fu_589_output_conv6_ap_vld, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) and (grp_convolution_double_double_double_double_16_16_8_16_14_14_3_3_1_0_s_fu_589_output_conv6_ap_vld = ap_const_logic_1))) then 
            output_conv6_o <= grp_convolution_double_double_double_double_16_16_8_16_14_14_3_3_1_0_s_fu_589_output_conv6;
        else 
            output_conv6_o <= output_conv6_i;
        end if; 
    end process;


    output_conv6_o_ap_vld_assign_proc : process(grp_convolution_double_double_double_double_16_16_8_16_14_14_3_3_1_0_s_fu_589_output_conv6_ap_vld, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            output_conv6_o_ap_vld <= grp_convolution_double_double_double_double_16_16_8_16_14_14_3_3_1_0_s_fu_589_output_conv6_ap_vld;
        else 
            output_conv6_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    output_conv7 <= grp_convolution_double_double_double_double_28_28_16_1_28_28_3_3_1_0_s_fu_684_output_conv7;
    output_conv7_ap_vld <= grp_convolution_double_double_double_double_28_28_16_1_28_28_3_3_1_0_s_fu_684_output_conv7_ap_vld;

    output_pooling1_o_assign_proc : process(output_pooling1_i, cmp17_i_reg_1468, ap_CS_fsm_pp0_stage0, icmp_ln123_reg_1481, ap_enable_reg_pp0_iter1, bitcast_ln131_fu_876_p1, ap_block_pp0_stage0_01001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (icmp_ln123_reg_1481 = ap_const_lv1_1) and (cmp17_i_reg_1468 = ap_const_lv1_1))) then 
            output_pooling1_o <= bitcast_ln131_fu_876_p1;
        else 
            output_pooling1_o <= output_pooling1_i;
        end if; 
    end process;


    output_pooling1_o_ap_vld_assign_proc : process(cmp17_i_reg_1468, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln123_reg_1481, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln123_reg_1481 = ap_const_lv1_1) and (cmp17_i_reg_1468 = ap_const_lv1_1))) then 
            output_pooling1_o_ap_vld <= ap_const_logic_1;
        else 
            output_pooling1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    output_pooling2_o_assign_proc : process(output_pooling2_i, cmp17_i17_reg_1542, ap_CS_fsm_pp1_stage0, icmp_ln123_1_reg_1555, ap_enable_reg_pp1_iter1, bitcast_ln131_1_fu_1035_p1, ap_block_pp1_stage0_01001)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_01001) and (icmp_ln123_1_reg_1555 = ap_const_lv1_1) and (cmp17_i17_reg_1542 = ap_const_lv1_1))) then 
            output_pooling2_o <= bitcast_ln131_1_fu_1035_p1;
        else 
            output_pooling2_o <= output_pooling2_i;
        end if; 
    end process;


    output_pooling2_o_ap_vld_assign_proc : process(cmp17_i17_reg_1542, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, icmp_ln123_1_reg_1555, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln123_1_reg_1555 = ap_const_lv1_1) and (cmp17_i17_reg_1542 = ap_const_lv1_1))) then 
            output_pooling2_o_ap_vld <= ap_const_logic_1;
        else 
            output_pooling2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    output_pooling3_o_assign_proc : process(output_pooling3_i, cmp17_i92_reg_1610, ap_CS_fsm_pp2_stage0, icmp_ln123_2_reg_1623, ap_enable_reg_pp2_iter1, bitcast_ln131_2_fu_1194_p1, ap_block_pp2_stage0_01001)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_01001) and (icmp_ln123_2_reg_1623 = ap_const_lv1_1) and (cmp17_i92_reg_1610 = ap_const_lv1_1))) then 
            output_pooling3_o <= bitcast_ln131_2_fu_1194_p1;
        else 
            output_pooling3_o <= output_pooling3_i;
        end if; 
    end process;


    output_pooling3_o_ap_vld_assign_proc : process(cmp17_i92_reg_1610, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, icmp_ln123_2_reg_1623, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln123_2_reg_1623 = ap_const_lv1_1) and (cmp17_i92_reg_1610 = ap_const_lv1_1))) then 
            output_pooling3_o_ap_vld <= ap_const_logic_1;
        else 
            output_pooling3_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    output_upsampling1_o_assign_proc : process(output_upsampling1_i, output_conv4_read_reg_1661, empty_112_reg_1688, ap_CS_fsm_state27, icmp_ln150_fu_1256_p2, empty_114_fu_1267_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) and (icmp_ln150_fu_1256_p2 = ap_const_lv1_0) and (empty_112_reg_1688 = ap_const_lv1_0) and (empty_114_fu_1267_p1 = ap_const_lv1_0))) then 
            output_upsampling1_o <= output_conv4_read_reg_1661;
        else 
            output_upsampling1_o <= output_upsampling1_i;
        end if; 
    end process;


    output_upsampling1_o_ap_vld_assign_proc : process(empty_112_reg_1688, ap_CS_fsm_state27, icmp_ln150_fu_1256_p2, empty_114_fu_1267_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) and (icmp_ln150_fu_1256_p2 = ap_const_lv1_0) and (empty_112_reg_1688 = ap_const_lv1_0) and (empty_114_fu_1267_p1 = ap_const_lv1_0))) then 
            output_upsampling1_o_ap_vld <= ap_const_logic_1;
        else 
            output_upsampling1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    output_upsampling2_o_assign_proc : process(output_upsampling2_i, output_conv5_read_reg_1703, empty_117_reg_1730, ap_CS_fsm_state33, icmp_ln150_1_fu_1306_p2, empty_119_fu_1317_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) and (icmp_ln150_1_fu_1306_p2 = ap_const_lv1_0) and (empty_117_reg_1730 = ap_const_lv1_0) and (empty_119_fu_1317_p1 = ap_const_lv1_0))) then 
            output_upsampling2_o <= output_conv5_read_reg_1703;
        else 
            output_upsampling2_o <= output_upsampling2_i;
        end if; 
    end process;


    output_upsampling2_o_ap_vld_assign_proc : process(empty_117_reg_1730, ap_CS_fsm_state33, icmp_ln150_1_fu_1306_p2, empty_119_fu_1317_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) and (icmp_ln150_1_fu_1306_p2 = ap_const_lv1_0) and (empty_117_reg_1730 = ap_const_lv1_0) and (empty_119_fu_1317_p1 = ap_const_lv1_0))) then 
            output_upsampling2_o_ap_vld <= ap_const_logic_1;
        else 
            output_upsampling2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    output_upsampling3_o_assign_proc : process(output_upsampling3_i, output_conv6_read_reg_1745, empty_122_reg_1772, ap_CS_fsm_state39, icmp_ln150_2_fu_1356_p2, empty_124_fu_1367_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state39) and (icmp_ln150_2_fu_1356_p2 = ap_const_lv1_0) and (empty_122_reg_1772 = ap_const_lv1_0) and (empty_124_fu_1367_p1 = ap_const_lv1_0))) then 
            output_upsampling3_o <= output_conv6_read_reg_1745;
        else 
            output_upsampling3_o <= output_upsampling3_i;
        end if; 
    end process;


    output_upsampling3_o_ap_vld_assign_proc : process(empty_122_reg_1772, ap_CS_fsm_state39, icmp_ln150_2_fu_1356_p2, empty_124_fu_1367_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state39) and (icmp_ln150_2_fu_1356_p2 = ap_const_lv1_0) and (empty_122_reg_1772 = ap_const_lv1_0) and (empty_124_fu_1367_p1 = ap_const_lv1_0))) then 
            output_upsampling3_o_ap_vld <= ap_const_logic_1;
        else 
            output_upsampling3_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_cast1_fu_922_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln116_1_fu_916_p2),32));
    p_cast2_fu_1081_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln116_2_fu_1075_p2),32));
    p_cast_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln116_fu_757_p2),32));
    select_ln127_1_fu_1029_p3 <= 
        bitcast_ln120_1_reg_1502 when (and_ln127_3_fu_1023_p2(0) = '1') else 
        max_val_1_load_reg_1559;
    select_ln127_2_fu_1188_p3 <= 
        bitcast_ln120_2_reg_1576 when (and_ln127_5_fu_1182_p2(0) = '1') else 
        max_val_2_load_reg_1627;
    select_ln127_fu_870_p3 <= 
        bitcast_ln120_reg_1428 when (and_ln127_1_fu_864_p2(0) = '1') else 
        max_val_load_reg_1485;
    shl_ln149_fu_1199_p2 <= std_logic_vector(shift_left(unsigned(hight),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    tmp_4_fu_959_p4 <= output_conv2_read_reg_1497(62 downto 52);
    tmp_5_fu_981_p4 <= bitcast_ln127_1_fu_978_p1(62 downto 52);
    tmp_7_fu_1118_p4 <= output_conv3_read_reg_1571(62 downto 52);
    tmp_8_fu_1140_p4 <= bitcast_ln127_2_fu_1137_p1(62 downto 52);
    tmp_fu_800_p4 <= output_conv1_read_reg_1423(62 downto 52);
    tmp_s_fu_822_p4 <= bitcast_ln127_fu_819_p1(62 downto 52);
    trunc_ln127_1_fu_885_p1 <= output_conv2_i(52 - 1 downto 0);
    trunc_ln127_2_fu_1044_p1 <= output_conv3_i(52 - 1 downto 0);
    trunc_ln127_3_fu_832_p1 <= bitcast_ln127_fu_819_p1(52 - 1 downto 0);
    trunc_ln127_4_fu_991_p1 <= bitcast_ln127_1_fu_978_p1(52 - 1 downto 0);
    trunc_ln127_5_fu_1150_p1 <= bitcast_ln127_2_fu_1137_p1(52 - 1 downto 0);
    trunc_ln127_fu_726_p1 <= output_conv1_i(52 - 1 downto 0);
    zext_ln116_1_fu_907_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_398),32));
    zext_ln116_2_fu_1066_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_431),32));
    zext_ln116_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_365),32));
    zext_ln123_1_fu_946_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln117_1_fu_940_p2),32));
    zext_ln123_2_fu_1105_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln117_2_fu_1099_p2),32));
    zext_ln123_fu_787_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln117_fu_781_p2),32));
    zext_ln149_1_fu_1283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_497),32));
    zext_ln149_2_fu_1333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_5_reg_530),32));
    zext_ln149_fu_1233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_464),32));
end behav;
