// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module CNN_convolution_double_double_double_double_4_4_8_8_4_4_3_3_1_1_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read,
        output_conv4,
        output_conv4_ap_vld,
        padding
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_pp1_stage0 = 8'd64;
parameter    ap_ST_fsm_state53 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] p_read;
output  [63:0] output_conv4;
output   output_conv4_ap_vld;
input  [30:0] padding;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg output_conv4_ap_vld;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [2:0] bias_conv4_address0;
reg    bias_conv4_ce0;
wire   [63:0] bias_conv4_q0;
reg   [63:0] line_buffer_1_10_0;
reg   [63:0] line_buffer_1_10_1;
reg   [63:0] line_buffer_1_10_2;
reg   [63:0] line_buffer_1_10_3;
reg   [63:0] line_buffer_2_10_0;
reg   [63:0] line_buffer_2_10_1;
reg   [63:0] line_buffer_2_10_2;
reg   [63:0] line_buffer_2_10_3;
reg   [63:0] line_buffer_0_10_0;
reg   [63:0] line_buffer_0_10_1;
reg   [63:0] line_buffer_0_10_2;
reg   [63:0] line_buffer_0_10_3;
wire   [9:0] kernel_conv4_address0;
reg    kernel_conv4_ce0;
wire   [63:0] kernel_conv4_q0;
wire   [9:0] kernel_conv4_address1;
reg    kernel_conv4_ce1;
wire   [63:0] kernel_conv4_q1;
wire   [9:0] kernel_conv4_address2;
reg    kernel_conv4_ce2;
wire   [63:0] kernel_conv4_q2;
wire   [9:0] kernel_conv4_address3;
reg    kernel_conv4_ce3;
wire   [63:0] kernel_conv4_q3;
wire   [9:0] kernel_conv4_address4;
reg    kernel_conv4_ce4;
wire   [63:0] kernel_conv4_q4;
wire   [9:0] kernel_conv4_address5;
reg    kernel_conv4_ce5;
wire   [63:0] kernel_conv4_q5;
wire   [9:0] kernel_conv4_address6;
reg    kernel_conv4_ce6;
wire   [63:0] kernel_conv4_q6;
wire   [9:0] kernel_conv4_address7;
reg    kernel_conv4_ce7;
wire   [63:0] kernel_conv4_q7;
wire   [9:0] kernel_conv4_address8;
reg    kernel_conv4_ce8;
wire   [63:0] kernel_conv4_q8;
reg   [63:0] window_buffer_load_5_2_reg_372;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state7_pp1_stage0_iter0;
wire    ap_block_state8_pp1_stage0_iter1;
wire    ap_block_state9_pp1_stage0_iter2;
wire    ap_block_state10_pp1_stage0_iter3;
wire    ap_block_state11_pp1_stage0_iter4;
wire    ap_block_state12_pp1_stage0_iter5;
wire    ap_block_state13_pp1_stage0_iter6;
wire    ap_block_state14_pp1_stage0_iter7;
wire    ap_block_state15_pp1_stage0_iter8;
wire    ap_block_state16_pp1_stage0_iter9;
wire    ap_block_state17_pp1_stage0_iter10;
wire    ap_block_state18_pp1_stage0_iter11;
wire    ap_block_state19_pp1_stage0_iter12;
wire    ap_block_state20_pp1_stage0_iter13;
wire    ap_block_state21_pp1_stage0_iter14;
wire    ap_block_state22_pp1_stage0_iter15;
wire    ap_block_state23_pp1_stage0_iter16;
wire    ap_block_state24_pp1_stage0_iter17;
wire    ap_block_state25_pp1_stage0_iter18;
wire    ap_block_state26_pp1_stage0_iter19;
wire    ap_block_state27_pp1_stage0_iter20;
wire    ap_block_state28_pp1_stage0_iter21;
wire    ap_block_state29_pp1_stage0_iter22;
wire    ap_block_state30_pp1_stage0_iter23;
wire    ap_block_state31_pp1_stage0_iter24;
wire    ap_block_state32_pp1_stage0_iter25;
wire    ap_block_state33_pp1_stage0_iter26;
wire    ap_block_state34_pp1_stage0_iter27;
wire    ap_block_state35_pp1_stage0_iter28;
wire    ap_block_state36_pp1_stage0_iter29;
wire    ap_block_state37_pp1_stage0_iter30;
wire    ap_block_state38_pp1_stage0_iter31;
wire    ap_block_state39_pp1_stage0_iter32;
wire    ap_block_state40_pp1_stage0_iter33;
wire    ap_block_state41_pp1_stage0_iter34;
wire    ap_block_state42_pp1_stage0_iter35;
wire    ap_block_state43_pp1_stage0_iter36;
wire    ap_block_state44_pp1_stage0_iter37;
wire    ap_block_state45_pp1_stage0_iter38;
wire    ap_block_state46_pp1_stage0_iter39;
wire    ap_block_state47_pp1_stage0_iter40;
wire    ap_block_state48_pp1_stage0_iter41;
wire    ap_block_state49_pp1_stage0_iter42;
wire    ap_block_state50_pp1_stage0_iter43;
wire    ap_block_state51_pp1_stage0_iter44;
wire    ap_block_state52_pp1_stage0_iter45;
wire    ap_block_pp1_stage0_11001;
reg   [63:0] window_buffer_load_2_reg_382;
reg   [63:0] window_buffer_load_5_1_reg_393;
reg   [63:0] window_buffer_load_1_reg_403;
reg   [63:0] window_buffer_load_5_0_reg_414;
reg   [63:0] window_buffer_load_0_reg_424;
reg   [30:0] b_reg_435;
wire   [31:0] add_ln31_fu_574_p2;
reg   [31:0] add_ln31_reg_1242;
wire   [0:0] icmp_ln42_fu_580_p2;
reg   [0:0] icmp_ln42_reg_1247;
wire   [31:0] sub13_fu_586_p2;
reg   [31:0] sub13_reg_1251;
wire   [31:0] sub47_fu_592_p2;
reg   [31:0] sub47_reg_1256;
wire   [0:0] cmp4827_fu_598_p2;
reg   [0:0] cmp4827_reg_1261;
wire   [63:0] bitcast_ln49_fu_604_p1;
reg   [63:0] bitcast_ln49_reg_1265;
wire   [2:0] empty_31_fu_613_p1;
reg   [2:0] empty_31_reg_1270;
wire    ap_CS_fsm_state2;
reg   [63:0] bias_conv4_load_reg_1281;
wire    ap_CS_fsm_state3;
wire   [8:0] add_ln39_fu_667_p2;
reg   [8:0] add_ln39_reg_1289;
wire   [0:0] icmp_ln40_fu_673_p2;
reg   [0:0] icmp_ln40_reg_1294;
wire   [0:0] icmp_ln39_fu_661_p2;
wire   [0:0] and_ln39_fu_751_p2;
reg   [0:0] and_ln39_reg_1301;
wire   [3:0] select_ln39_12_fu_757_p3;
reg   [3:0] select_ln39_12_reg_1307;
wire   [3:0] select_ln40_11_fu_901_p3;
reg   [3:0] select_ln40_11_reg_1362;
wire   [2:0] select_ln40_fu_919_p3;
reg   [2:0] select_ln40_reg_1367;
wire    ap_CS_fsm_state4;
wire   [63:0] select_ln40_9_fu_927_p3;
reg   [63:0] select_ln40_9_reg_1373;
reg   [63:0] kernel_conv4_load_reg_1378;
reg   [63:0] kernel_conv4_load_1_reg_1383;
reg   [63:0] kernel_conv4_load_2_reg_1388;
reg   [63:0] kernel_conv4_load_3_reg_1393;
reg   [63:0] kernel_conv4_load_4_reg_1398;
reg   [63:0] kernel_conv4_load_5_reg_1403;
reg   [63:0] kernel_conv4_load_6_reg_1408;
reg   [63:0] kernel_conv4_load_7_reg_1413;
reg   [63:0] kernel_conv4_load_8_reg_1418;
wire   [0:0] or_ln45_fu_946_p2;
reg   [0:0] or_ln45_reg_1423;
wire   [30:0] add_ln42_fu_961_p2;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln52_fu_1109_p2;
wire    ap_CS_fsm_state6;
reg   [63:0] line_buffer_0_10_2_load_reg_1473;
reg   [63:0] line_buffer_0_10_3_load_reg_1478;
reg   [63:0] line_buffer_1_10_2_load_reg_1483;
reg   [63:0] line_buffer_1_10_3_load_reg_1488;
reg   [63:0] line_buffer_2_10_2_load_reg_1493;
reg   [63:0] line_buffer_2_10_3_load_reg_1498;
wire   [0:0] icmp_ln64_fu_1135_p2;
reg   [0:0] icmp_ln64_reg_1503;
reg   [0:0] icmp_ln64_reg_1503_pp1_iter1_reg;
reg   [0:0] icmp_ln64_reg_1503_pp1_iter2_reg;
reg   [0:0] icmp_ln64_reg_1503_pp1_iter3_reg;
reg   [0:0] icmp_ln64_reg_1503_pp1_iter4_reg;
reg   [0:0] icmp_ln64_reg_1503_pp1_iter5_reg;
reg   [0:0] icmp_ln64_reg_1503_pp1_iter6_reg;
reg   [0:0] icmp_ln64_reg_1503_pp1_iter7_reg;
reg   [0:0] icmp_ln64_reg_1503_pp1_iter8_reg;
reg   [0:0] icmp_ln64_reg_1503_pp1_iter9_reg;
reg   [0:0] icmp_ln64_reg_1503_pp1_iter10_reg;
reg   [0:0] icmp_ln64_reg_1503_pp1_iter11_reg;
reg   [0:0] icmp_ln64_reg_1503_pp1_iter12_reg;
reg   [0:0] icmp_ln64_reg_1503_pp1_iter13_reg;
reg   [0:0] icmp_ln64_reg_1503_pp1_iter14_reg;
reg   [0:0] icmp_ln64_reg_1503_pp1_iter15_reg;
reg   [0:0] icmp_ln64_reg_1503_pp1_iter16_reg;
reg   [0:0] icmp_ln64_reg_1503_pp1_iter17_reg;
reg   [0:0] icmp_ln64_reg_1503_pp1_iter18_reg;
reg   [0:0] icmp_ln64_reg_1503_pp1_iter19_reg;
reg   [0:0] icmp_ln64_reg_1503_pp1_iter20_reg;
reg   [0:0] icmp_ln64_reg_1503_pp1_iter21_reg;
reg   [0:0] icmp_ln64_reg_1503_pp1_iter22_reg;
reg   [0:0] icmp_ln64_reg_1503_pp1_iter23_reg;
reg   [0:0] icmp_ln64_reg_1503_pp1_iter24_reg;
reg   [0:0] icmp_ln64_reg_1503_pp1_iter25_reg;
reg   [0:0] icmp_ln64_reg_1503_pp1_iter26_reg;
reg   [0:0] icmp_ln64_reg_1503_pp1_iter27_reg;
reg   [0:0] icmp_ln64_reg_1503_pp1_iter28_reg;
reg   [0:0] icmp_ln64_reg_1503_pp1_iter29_reg;
reg   [0:0] icmp_ln64_reg_1503_pp1_iter30_reg;
reg   [0:0] icmp_ln64_reg_1503_pp1_iter31_reg;
reg   [0:0] icmp_ln64_reg_1503_pp1_iter32_reg;
reg   [0:0] icmp_ln64_reg_1503_pp1_iter33_reg;
reg   [0:0] icmp_ln64_reg_1503_pp1_iter34_reg;
reg   [0:0] icmp_ln64_reg_1503_pp1_iter35_reg;
reg   [0:0] icmp_ln64_reg_1503_pp1_iter36_reg;
reg   [0:0] icmp_ln64_reg_1503_pp1_iter37_reg;
reg   [0:0] icmp_ln64_reg_1503_pp1_iter38_reg;
reg   [0:0] icmp_ln64_reg_1503_pp1_iter39_reg;
reg   [0:0] icmp_ln64_reg_1503_pp1_iter40_reg;
reg   [0:0] icmp_ln64_reg_1503_pp1_iter41_reg;
reg   [0:0] icmp_ln64_reg_1503_pp1_iter42_reg;
reg   [0:0] icmp_ln64_reg_1503_pp1_iter43_reg;
reg   [0:0] icmp_ln64_reg_1503_pp1_iter44_reg;
wire   [30:0] add_ln64_fu_1140_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [63:0] select_ln69_fu_1156_p3;
reg   [63:0] select_ln69_reg_1512;
reg   [63:0] select_ln69_reg_1512_pp1_iter1_reg;
wire   [63:0] select_ln72_fu_1162_p3;
reg   [63:0] select_ln72_reg_1518;
reg   [63:0] select_ln72_reg_1518_pp1_iter1_reg;
wire   [63:0] select_ln75_fu_1168_p3;
reg   [63:0] select_ln75_reg_1524;
reg   [63:0] select_ln75_reg_1524_pp1_iter1_reg;
wire   [63:0] grp_fu_487_p2;
reg   [63:0] mul_reg_1530;
wire   [63:0] grp_fu_492_p2;
reg   [63:0] mul_1_reg_1535;
reg   [63:0] mul_1_reg_1535_pp1_iter4_reg;
reg   [63:0] mul_1_reg_1535_pp1_iter5_reg;
reg   [63:0] mul_1_reg_1535_pp1_iter6_reg;
reg   [63:0] mul_1_reg_1535_pp1_iter7_reg;
reg   [63:0] mul_1_reg_1535_pp1_iter8_reg;
reg   [63:0] mul_1_reg_1535_pp1_iter9_reg;
reg   [63:0] mul_1_reg_1535_pp1_iter10_reg;
reg   [63:0] mul_1_reg_1535_pp1_iter11_reg;
reg   [63:0] mul_1_reg_1535_pp1_iter12_reg;
reg   [63:0] mul_1_reg_1535_pp1_iter13_reg;
reg   [63:0] mul_1_reg_1535_pp1_iter14_reg;
reg   [63:0] mul_1_reg_1535_pp1_iter15_reg;
wire   [63:0] grp_fu_497_p2;
reg   [63:0] mul_2_reg_1540;
reg   [63:0] mul_2_reg_1540_pp1_iter4_reg;
reg   [63:0] mul_2_reg_1540_pp1_iter5_reg;
reg   [63:0] mul_2_reg_1540_pp1_iter6_reg;
reg   [63:0] mul_2_reg_1540_pp1_iter7_reg;
reg   [63:0] mul_2_reg_1540_pp1_iter8_reg;
reg   [63:0] mul_2_reg_1540_pp1_iter9_reg;
reg   [63:0] mul_2_reg_1540_pp1_iter10_reg;
reg   [63:0] mul_2_reg_1540_pp1_iter11_reg;
reg   [63:0] mul_2_reg_1540_pp1_iter12_reg;
reg   [63:0] mul_2_reg_1540_pp1_iter13_reg;
reg   [63:0] mul_2_reg_1540_pp1_iter14_reg;
reg   [63:0] mul_2_reg_1540_pp1_iter15_reg;
reg   [63:0] mul_2_reg_1540_pp1_iter16_reg;
reg   [63:0] mul_2_reg_1540_pp1_iter17_reg;
reg   [63:0] mul_2_reg_1540_pp1_iter18_reg;
reg   [63:0] mul_2_reg_1540_pp1_iter19_reg;
reg   [63:0] mul_2_reg_1540_pp1_iter20_reg;
reg   [63:0] mul_2_reg_1540_pp1_iter21_reg;
reg   [63:0] mul_2_reg_1540_pp1_iter22_reg;
reg   [63:0] mul_2_reg_1540_pp1_iter23_reg;
reg   [63:0] mul_2_reg_1540_pp1_iter24_reg;
reg   [63:0] mul_2_reg_1540_pp1_iter25_reg;
reg   [63:0] mul_2_reg_1540_pp1_iter26_reg;
reg   [63:0] mul_2_reg_1540_pp1_iter27_reg;
wire   [63:0] grp_fu_502_p2;
reg   [63:0] mul_0_1_reg_1545;
reg   [63:0] mul_0_1_reg_1545_pp1_iter5_reg;
reg   [63:0] mul_0_1_reg_1545_pp1_iter6_reg;
reg   [63:0] mul_0_1_reg_1545_pp1_iter7_reg;
wire   [63:0] grp_fu_507_p2;
reg   [63:0] mul_1_1_reg_1550;
reg   [63:0] mul_1_1_reg_1550_pp1_iter5_reg;
reg   [63:0] mul_1_1_reg_1550_pp1_iter6_reg;
reg   [63:0] mul_1_1_reg_1550_pp1_iter7_reg;
reg   [63:0] mul_1_1_reg_1550_pp1_iter8_reg;
reg   [63:0] mul_1_1_reg_1550_pp1_iter9_reg;
reg   [63:0] mul_1_1_reg_1550_pp1_iter10_reg;
reg   [63:0] mul_1_1_reg_1550_pp1_iter11_reg;
reg   [63:0] mul_1_1_reg_1550_pp1_iter12_reg;
reg   [63:0] mul_1_1_reg_1550_pp1_iter13_reg;
reg   [63:0] mul_1_1_reg_1550_pp1_iter14_reg;
reg   [63:0] mul_1_1_reg_1550_pp1_iter15_reg;
reg   [63:0] mul_1_1_reg_1550_pp1_iter16_reg;
reg   [63:0] mul_1_1_reg_1550_pp1_iter17_reg;
reg   [63:0] mul_1_1_reg_1550_pp1_iter18_reg;
reg   [63:0] mul_1_1_reg_1550_pp1_iter19_reg;
wire   [63:0] grp_fu_512_p2;
reg   [63:0] mul_2_1_reg_1555;
reg   [63:0] mul_2_1_reg_1555_pp1_iter5_reg;
reg   [63:0] mul_2_1_reg_1555_pp1_iter6_reg;
reg   [63:0] mul_2_1_reg_1555_pp1_iter7_reg;
reg   [63:0] mul_2_1_reg_1555_pp1_iter8_reg;
reg   [63:0] mul_2_1_reg_1555_pp1_iter9_reg;
reg   [63:0] mul_2_1_reg_1555_pp1_iter10_reg;
reg   [63:0] mul_2_1_reg_1555_pp1_iter11_reg;
reg   [63:0] mul_2_1_reg_1555_pp1_iter12_reg;
reg   [63:0] mul_2_1_reg_1555_pp1_iter13_reg;
reg   [63:0] mul_2_1_reg_1555_pp1_iter14_reg;
reg   [63:0] mul_2_1_reg_1555_pp1_iter15_reg;
reg   [63:0] mul_2_1_reg_1555_pp1_iter16_reg;
reg   [63:0] mul_2_1_reg_1555_pp1_iter17_reg;
reg   [63:0] mul_2_1_reg_1555_pp1_iter18_reg;
reg   [63:0] mul_2_1_reg_1555_pp1_iter19_reg;
reg   [63:0] mul_2_1_reg_1555_pp1_iter20_reg;
reg   [63:0] mul_2_1_reg_1555_pp1_iter21_reg;
reg   [63:0] mul_2_1_reg_1555_pp1_iter22_reg;
reg   [63:0] mul_2_1_reg_1555_pp1_iter23_reg;
reg   [63:0] mul_2_1_reg_1555_pp1_iter24_reg;
reg   [63:0] mul_2_1_reg_1555_pp1_iter25_reg;
reg   [63:0] mul_2_1_reg_1555_pp1_iter26_reg;
reg   [63:0] mul_2_1_reg_1555_pp1_iter27_reg;
reg   [63:0] mul_2_1_reg_1555_pp1_iter28_reg;
reg   [63:0] mul_2_1_reg_1555_pp1_iter29_reg;
reg   [63:0] mul_2_1_reg_1555_pp1_iter30_reg;
reg   [63:0] mul_2_1_reg_1555_pp1_iter31_reg;
wire   [63:0] grp_fu_517_p2;
reg   [63:0] mul_0_2_reg_1560;
reg   [63:0] mul_0_2_reg_1560_pp1_iter6_reg;
reg   [63:0] mul_0_2_reg_1560_pp1_iter7_reg;
reg   [63:0] mul_0_2_reg_1560_pp1_iter8_reg;
reg   [63:0] mul_0_2_reg_1560_pp1_iter9_reg;
reg   [63:0] mul_0_2_reg_1560_pp1_iter10_reg;
reg   [63:0] mul_0_2_reg_1560_pp1_iter11_reg;
wire   [63:0] grp_fu_521_p2;
reg   [63:0] mul_1_2_reg_1565;
reg   [63:0] mul_1_2_reg_1565_pp1_iter6_reg;
reg   [63:0] mul_1_2_reg_1565_pp1_iter7_reg;
reg   [63:0] mul_1_2_reg_1565_pp1_iter8_reg;
reg   [63:0] mul_1_2_reg_1565_pp1_iter9_reg;
reg   [63:0] mul_1_2_reg_1565_pp1_iter10_reg;
reg   [63:0] mul_1_2_reg_1565_pp1_iter11_reg;
reg   [63:0] mul_1_2_reg_1565_pp1_iter12_reg;
reg   [63:0] mul_1_2_reg_1565_pp1_iter13_reg;
reg   [63:0] mul_1_2_reg_1565_pp1_iter14_reg;
reg   [63:0] mul_1_2_reg_1565_pp1_iter15_reg;
reg   [63:0] mul_1_2_reg_1565_pp1_iter16_reg;
reg   [63:0] mul_1_2_reg_1565_pp1_iter17_reg;
reg   [63:0] mul_1_2_reg_1565_pp1_iter18_reg;
reg   [63:0] mul_1_2_reg_1565_pp1_iter19_reg;
reg   [63:0] mul_1_2_reg_1565_pp1_iter20_reg;
reg   [63:0] mul_1_2_reg_1565_pp1_iter21_reg;
reg   [63:0] mul_1_2_reg_1565_pp1_iter22_reg;
reg   [63:0] mul_1_2_reg_1565_pp1_iter23_reg;
wire   [63:0] grp_fu_525_p2;
reg   [63:0] mul_2_2_reg_1570;
reg   [63:0] mul_2_2_reg_1570_pp1_iter6_reg;
reg   [63:0] mul_2_2_reg_1570_pp1_iter7_reg;
reg   [63:0] mul_2_2_reg_1570_pp1_iter8_reg;
reg   [63:0] mul_2_2_reg_1570_pp1_iter9_reg;
reg   [63:0] mul_2_2_reg_1570_pp1_iter10_reg;
reg   [63:0] mul_2_2_reg_1570_pp1_iter11_reg;
reg   [63:0] mul_2_2_reg_1570_pp1_iter12_reg;
reg   [63:0] mul_2_2_reg_1570_pp1_iter13_reg;
reg   [63:0] mul_2_2_reg_1570_pp1_iter14_reg;
reg   [63:0] mul_2_2_reg_1570_pp1_iter15_reg;
reg   [63:0] mul_2_2_reg_1570_pp1_iter16_reg;
reg   [63:0] mul_2_2_reg_1570_pp1_iter17_reg;
reg   [63:0] mul_2_2_reg_1570_pp1_iter18_reg;
reg   [63:0] mul_2_2_reg_1570_pp1_iter19_reg;
reg   [63:0] mul_2_2_reg_1570_pp1_iter20_reg;
reg   [63:0] mul_2_2_reg_1570_pp1_iter21_reg;
reg   [63:0] mul_2_2_reg_1570_pp1_iter22_reg;
reg   [63:0] mul_2_2_reg_1570_pp1_iter23_reg;
reg   [63:0] mul_2_2_reg_1570_pp1_iter24_reg;
reg   [63:0] mul_2_2_reg_1570_pp1_iter25_reg;
reg   [63:0] mul_2_2_reg_1570_pp1_iter26_reg;
reg   [63:0] mul_2_2_reg_1570_pp1_iter27_reg;
reg   [63:0] mul_2_2_reg_1570_pp1_iter28_reg;
reg   [63:0] mul_2_2_reg_1570_pp1_iter29_reg;
reg   [63:0] mul_2_2_reg_1570_pp1_iter30_reg;
reg   [63:0] mul_2_2_reg_1570_pp1_iter31_reg;
reg   [63:0] mul_2_2_reg_1570_pp1_iter32_reg;
reg   [63:0] mul_2_2_reg_1570_pp1_iter33_reg;
reg   [63:0] mul_2_2_reg_1570_pp1_iter34_reg;
reg   [63:0] mul_2_2_reg_1570_pp1_iter35_reg;
wire   [63:0] grp_fu_446_p2;
reg   [63:0] sum_7_reg_1575;
wire   [63:0] grp_fu_451_p2;
reg   [63:0] sum_7_0_1_reg_1580;
wire   [63:0] grp_fu_455_p2;
reg   [63:0] sum_7_0_2_reg_1585;
wire   [63:0] grp_fu_459_p2;
reg   [63:0] sum_7_1_reg_1590;
wire   [63:0] grp_fu_463_p2;
reg   [63:0] sum_7_1_1_reg_1595;
wire   [63:0] grp_fu_467_p2;
reg   [63:0] sum_7_1_2_reg_1600;
wire   [63:0] grp_fu_471_p2;
reg   [63:0] sum_7_2_reg_1605;
wire   [63:0] grp_fu_475_p2;
reg   [63:0] sum_7_2_1_reg_1610;
wire   [63:0] grp_fu_479_p2;
reg   [63:0] sum_7_2_2_reg_1615;
wire   [63:0] grp_fu_483_p2;
reg   [63:0] sum_reg_1620;
reg   [63:0] sum_reg_1620_pp1_iter44_reg;
wire   [2:0] add_ln41_fu_1224_p2;
wire    ap_CS_fsm_state53;
wire   [6:0] select_ln40_12_fu_1235_p3;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state7;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg    ap_enable_reg_pp1_iter4;
reg    ap_enable_reg_pp1_iter5;
reg    ap_enable_reg_pp1_iter6;
reg    ap_enable_reg_pp1_iter7;
reg    ap_enable_reg_pp1_iter8;
reg    ap_enable_reg_pp1_iter9;
reg    ap_enable_reg_pp1_iter10;
reg    ap_enable_reg_pp1_iter11;
reg    ap_enable_reg_pp1_iter12;
reg    ap_enable_reg_pp1_iter13;
reg    ap_enable_reg_pp1_iter14;
reg    ap_enable_reg_pp1_iter15;
reg    ap_enable_reg_pp1_iter16;
reg    ap_enable_reg_pp1_iter17;
reg    ap_enable_reg_pp1_iter18;
reg    ap_enable_reg_pp1_iter19;
reg    ap_enable_reg_pp1_iter20;
reg    ap_enable_reg_pp1_iter21;
reg    ap_enable_reg_pp1_iter22;
reg    ap_enable_reg_pp1_iter23;
reg    ap_enable_reg_pp1_iter24;
reg    ap_enable_reg_pp1_iter25;
reg    ap_enable_reg_pp1_iter26;
reg    ap_enable_reg_pp1_iter27;
reg    ap_enable_reg_pp1_iter28;
reg    ap_enable_reg_pp1_iter29;
reg    ap_enable_reg_pp1_iter30;
reg    ap_enable_reg_pp1_iter31;
reg    ap_enable_reg_pp1_iter32;
reg    ap_enable_reg_pp1_iter33;
reg    ap_enable_reg_pp1_iter34;
reg    ap_enable_reg_pp1_iter35;
reg    ap_enable_reg_pp1_iter36;
reg    ap_enable_reg_pp1_iter37;
reg    ap_enable_reg_pp1_iter38;
reg    ap_enable_reg_pp1_iter39;
reg    ap_enable_reg_pp1_iter40;
reg    ap_enable_reg_pp1_iter41;
reg    ap_enable_reg_pp1_iter42;
reg    ap_enable_reg_pp1_iter43;
reg    ap_enable_reg_pp1_iter44;
reg    ap_enable_reg_pp1_iter45;
reg   [3:0] num_ker_reg_303;
reg   [8:0] indvar_flatten109_reg_315;
reg   [3:0] num_channel_reg_326;
reg   [6:0] indvar_flatten_reg_337;
reg   [2:0] i_reg_349;
reg   [30:0] j_reg_361;
wire   [0:0] icmp_ln42_3_fu_956_p2;
wire    ap_block_pp1_stage0;
reg   [63:0] ap_phi_mux_window_buffer_load_2_phi_fu_385_p4;
reg   [63:0] ap_phi_mux_window_buffer_load_1_phi_fu_406_p4;
reg   [63:0] ap_phi_mux_window_buffer_load_0_phi_fu_427_p4;
wire   [63:0] zext_ln40_fu_608_p1;
wire   [63:0] zext_ln40_19_fu_771_p1;
wire   [63:0] zext_ln83_12_fu_808_p1;
wire   [63:0] zext_ln40_20_fu_819_p1;
wire   [63:0] zext_ln40_21_fu_830_p1;
wire   [63:0] zext_ln40_22_fu_841_p1;
wire   [63:0] zext_ln40_23_fu_852_p1;
wire   [63:0] zext_ln40_24_fu_863_p1;
wire   [63:0] zext_ln40_25_fu_874_p1;
wire   [63:0] zext_ln40_26_fu_885_p1;
wire   [63:0] zext_ln40_27_fu_896_p1;
wire   [63:0] tmp_8_fu_985_p6;
wire   [1:0] trunc_ln43_fu_967_p1;
wire   [63:0] select_ln45_fu_1069_p3;
wire   [63:0] tmp_7_fu_971_p6;
wire    ap_block_pp1_stage0_01001;
wire   [31:0] shl_ln_fu_566_p3;
wire   [2:0] empty_fu_621_p1;
wire   [5:0] add_ln83_7_fu_633_p0;
wire   [5:0] add_ln83_7_fu_633_p1;
wire   [5:0] add_ln83_7_fu_633_p2;
wire   [8:0] tmp5_fu_643_p4;
wire   [9:0] add_ln83_fu_655_p0;
wire   [9:0] add_ln83_fu_655_p1;
wire   [3:0] add_ln39_3_fu_687_p2;
wire   [2:0] empty_36_fu_697_p1;
wire   [5:0] add_ln83_8_fu_709_p0;
wire   [5:0] add_ln83_8_fu_709_p1;
wire   [5:0] add_ln83_8_fu_709_p2;
wire   [5:0] select_ln39_9_fu_719_p3;
wire   [9:0] zext_ln83_10_fu_715_p1;
wire   [9:0] add_ln83_fu_655_p2;
wire   [0:0] icmp_ln41_fu_745_p2;
wire   [0:0] xor_ln39_fu_739_p2;
wire   [3:0] select_ln39_fu_679_p3;
wire   [3:0] add_ln40_fu_765_p2;
wire   [2:0] empty_37_fu_776_p1;
wire   [8:0] tmp5_mid1_fu_780_p4;
wire   [9:0] add_ln83_9_fu_794_p0;
wire   [9:0] add_ln83_9_fu_794_p1;
wire   [9:0] add_ln83_9_fu_794_p2;
wire   [9:0] select_ln39_11_fu_731_p3;
wire   [9:0] select_ln40_10_fu_800_p3;
wire   [9:0] add_ln40_19_fu_813_p2;
wire   [9:0] add_ln40_20_fu_824_p2;
wire   [9:0] add_ln40_21_fu_835_p2;
wire   [9:0] add_ln40_22_fu_846_p2;
wire   [9:0] add_ln40_23_fu_857_p2;
wire   [9:0] add_ln40_24_fu_868_p2;
wire   [9:0] add_ln40_25_fu_879_p2;
wire   [9:0] add_ln40_26_fu_890_p2;
wire   [0:0] or_ln40_fu_915_p2;
wire   [63:0] select_ln39_10_fu_909_p3;
wire   [0:0] icmp_ln45_6_fu_934_p2;
wire   [0:0] icmp_ln45_7_fu_940_p2;
wire   [31:0] j_cast_fu_952_p1;
wire   [0:0] icmp_ln45_3_fu_1053_p2;
wire   [0:0] icmp_ln45_fu_1047_p2;
wire   [0:0] or_ln45_5_fu_1058_p2;
wire   [0:0] or_ln45_6_fu_1064_p2;
wire   [1:0] tmp_fu_1100_p4;
wire   [31:0] b_cast_fu_1131_p1;
wire   [1:0] empty_34_fu_1146_p1;
wire   [0:0] icmp_ln69_fu_1150_p2;
wire   [63:0] bitcast_ln11_fu_1174_p1;
wire   [10:0] tmp_9_fu_1177_p4;
wire   [51:0] trunc_ln11_fu_1187_p1;
wire   [0:0] icmp_ln11_3_fu_1197_p2;
wire   [0:0] icmp_ln11_fu_1191_p2;
wire   [0:0] or_ln11_fu_1203_p2;
wire   [0:0] grp_fu_529_p2;
wire   [0:0] and_ln11_fu_1209_p2;
wire   [6:0] add_ln40_27_fu_1229_p2;
wire    ap_block_pp1_stage0_00001;
reg   [7:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 line_buffer_1_10_0 = 64'd0;
#0 line_buffer_1_10_1 = 64'd0;
#0 line_buffer_1_10_2 = 64'd0;
#0 line_buffer_1_10_3 = 64'd0;
#0 line_buffer_2_10_0 = 64'd0;
#0 line_buffer_2_10_1 = 64'd0;
#0 line_buffer_2_10_2 = 64'd0;
#0 line_buffer_2_10_3 = 64'd0;
#0 line_buffer_0_10_0 = 64'd0;
#0 line_buffer_0_10_1 = 64'd0;
#0 line_buffer_0_10_2 = 64'd0;
#0 line_buffer_0_10_3 = 64'd0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp1_iter6 = 1'b0;
#0 ap_enable_reg_pp1_iter7 = 1'b0;
#0 ap_enable_reg_pp1_iter8 = 1'b0;
#0 ap_enable_reg_pp1_iter9 = 1'b0;
#0 ap_enable_reg_pp1_iter10 = 1'b0;
#0 ap_enable_reg_pp1_iter11 = 1'b0;
#0 ap_enable_reg_pp1_iter12 = 1'b0;
#0 ap_enable_reg_pp1_iter13 = 1'b0;
#0 ap_enable_reg_pp1_iter14 = 1'b0;
#0 ap_enable_reg_pp1_iter15 = 1'b0;
#0 ap_enable_reg_pp1_iter16 = 1'b0;
#0 ap_enable_reg_pp1_iter17 = 1'b0;
#0 ap_enable_reg_pp1_iter18 = 1'b0;
#0 ap_enable_reg_pp1_iter19 = 1'b0;
#0 ap_enable_reg_pp1_iter20 = 1'b0;
#0 ap_enable_reg_pp1_iter21 = 1'b0;
#0 ap_enable_reg_pp1_iter22 = 1'b0;
#0 ap_enable_reg_pp1_iter23 = 1'b0;
#0 ap_enable_reg_pp1_iter24 = 1'b0;
#0 ap_enable_reg_pp1_iter25 = 1'b0;
#0 ap_enable_reg_pp1_iter26 = 1'b0;
#0 ap_enable_reg_pp1_iter27 = 1'b0;
#0 ap_enable_reg_pp1_iter28 = 1'b0;
#0 ap_enable_reg_pp1_iter29 = 1'b0;
#0 ap_enable_reg_pp1_iter30 = 1'b0;
#0 ap_enable_reg_pp1_iter31 = 1'b0;
#0 ap_enable_reg_pp1_iter32 = 1'b0;
#0 ap_enable_reg_pp1_iter33 = 1'b0;
#0 ap_enable_reg_pp1_iter34 = 1'b0;
#0 ap_enable_reg_pp1_iter35 = 1'b0;
#0 ap_enable_reg_pp1_iter36 = 1'b0;
#0 ap_enable_reg_pp1_iter37 = 1'b0;
#0 ap_enable_reg_pp1_iter38 = 1'b0;
#0 ap_enable_reg_pp1_iter39 = 1'b0;
#0 ap_enable_reg_pp1_iter40 = 1'b0;
#0 ap_enable_reg_pp1_iter41 = 1'b0;
#0 ap_enable_reg_pp1_iter42 = 1'b0;
#0 ap_enable_reg_pp1_iter43 = 1'b0;
#0 ap_enable_reg_pp1_iter44 = 1'b0;
#0 ap_enable_reg_pp1_iter45 = 1'b0;
end

CNN_convolution_double_double_double_double_4_4_8_8_4_4_3_3_1_1_s_bias_conv4 #(
    .DataWidth( 64 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
bias_conv4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bias_conv4_address0),
    .ce0(bias_conv4_ce0),
    .q0(bias_conv4_q0)
);

CNN_convolution_double_double_double_double_4_4_8_8_4_4_3_3_1_1_s_kernel_conv4 #(
    .DataWidth( 64 ),
    .AddressRange( 576 ),
    .AddressWidth( 10 ))
kernel_conv4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(kernel_conv4_address0),
    .ce0(kernel_conv4_ce0),
    .q0(kernel_conv4_q0),
    .address1(kernel_conv4_address1),
    .ce1(kernel_conv4_ce1),
    .q1(kernel_conv4_q1),
    .address2(kernel_conv4_address2),
    .ce2(kernel_conv4_ce2),
    .q2(kernel_conv4_q2),
    .address3(kernel_conv4_address3),
    .ce3(kernel_conv4_ce3),
    .q3(kernel_conv4_q3),
    .address4(kernel_conv4_address4),
    .ce4(kernel_conv4_ce4),
    .q4(kernel_conv4_q4),
    .address5(kernel_conv4_address5),
    .ce5(kernel_conv4_ce5),
    .q5(kernel_conv4_q5),
    .address6(kernel_conv4_address6),
    .ce6(kernel_conv4_ce6),
    .q6(kernel_conv4_q6),
    .address7(kernel_conv4_address7),
    .ce7(kernel_conv4_ce7),
    .q7(kernel_conv4_q7),
    .address8(kernel_conv4_address8),
    .ce8(kernel_conv4_ce8),
    .q8(kernel_conv4_q8)
);

CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dadd_64ns_64ns_64_4_full_dsp_1_U161(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mul_reg_1530),
    .din1(64'd0),
    .ce(1'b1),
    .dout(grp_fu_446_p2)
);

CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dadd_64ns_64ns_64_4_full_dsp_1_U162(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_7_reg_1575),
    .din1(mul_0_1_reg_1545_pp1_iter7_reg),
    .ce(1'b1),
    .dout(grp_fu_451_p2)
);

CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dadd_64ns_64ns_64_4_full_dsp_1_U163(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_7_0_1_reg_1580),
    .din1(mul_0_2_reg_1560_pp1_iter11_reg),
    .ce(1'b1),
    .dout(grp_fu_455_p2)
);

CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dadd_64ns_64ns_64_4_full_dsp_1_U164(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_7_0_2_reg_1585),
    .din1(mul_1_reg_1535_pp1_iter15_reg),
    .ce(1'b1),
    .dout(grp_fu_459_p2)
);

CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dadd_64ns_64ns_64_4_full_dsp_1_U165(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_7_1_reg_1590),
    .din1(mul_1_1_reg_1550_pp1_iter19_reg),
    .ce(1'b1),
    .dout(grp_fu_463_p2)
);

CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dadd_64ns_64ns_64_4_full_dsp_1_U166(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_7_1_1_reg_1595),
    .din1(mul_1_2_reg_1565_pp1_iter23_reg),
    .ce(1'b1),
    .dout(grp_fu_467_p2)
);

CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dadd_64ns_64ns_64_4_full_dsp_1_U167(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_7_1_2_reg_1600),
    .din1(mul_2_reg_1540_pp1_iter27_reg),
    .ce(1'b1),
    .dout(grp_fu_471_p2)
);

CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dadd_64ns_64ns_64_4_full_dsp_1_U168(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_7_2_reg_1605),
    .din1(mul_2_1_reg_1555_pp1_iter31_reg),
    .ce(1'b1),
    .dout(grp_fu_475_p2)
);

CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dadd_64ns_64ns_64_4_full_dsp_1_U169(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_7_2_1_reg_1610),
    .din1(mul_2_2_reg_1570_pp1_iter35_reg),
    .ce(1'b1),
    .dout(grp_fu_479_p2)
);

CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dadd_64ns_64ns_64_4_full_dsp_1_U170(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_7_2_2_reg_1615),
    .din1(select_ln40_9_reg_1373),
    .ce(1'b1),
    .dout(grp_fu_483_p2)
);

CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dmul_64ns_64ns_64_4_max_dsp_1_U171(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_mux_window_buffer_load_0_phi_fu_427_p4),
    .din1(kernel_conv4_load_reg_1378),
    .ce(1'b1),
    .dout(grp_fu_487_p2)
);

CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dmul_64ns_64ns_64_4_max_dsp_1_U172(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_mux_window_buffer_load_1_phi_fu_406_p4),
    .din1(kernel_conv4_load_3_reg_1393),
    .ce(1'b1),
    .dout(grp_fu_492_p2)
);

CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dmul_64ns_64ns_64_4_max_dsp_1_U173(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_mux_window_buffer_load_2_phi_fu_385_p4),
    .din1(kernel_conv4_load_6_reg_1408),
    .ce(1'b1),
    .dout(grp_fu_497_p2)
);

CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dmul_64ns_64ns_64_4_max_dsp_1_U174(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(window_buffer_load_5_0_reg_414),
    .din1(kernel_conv4_load_1_reg_1383),
    .ce(1'b1),
    .dout(grp_fu_502_p2)
);

CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dmul_64ns_64ns_64_4_max_dsp_1_U175(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(window_buffer_load_5_1_reg_393),
    .din1(kernel_conv4_load_4_reg_1398),
    .ce(1'b1),
    .dout(grp_fu_507_p2)
);

CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dmul_64ns_64ns_64_4_max_dsp_1_U176(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(window_buffer_load_5_2_reg_372),
    .din1(kernel_conv4_load_7_reg_1413),
    .ce(1'b1),
    .dout(grp_fu_512_p2)
);

CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dmul_64ns_64ns_64_4_max_dsp_1_U177(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln69_reg_1512_pp1_iter1_reg),
    .din1(kernel_conv4_load_2_reg_1388),
    .ce(1'b1),
    .dout(grp_fu_517_p2)
);

CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dmul_64ns_64ns_64_4_max_dsp_1_U178(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln72_reg_1518_pp1_iter1_reg),
    .din1(kernel_conv4_load_5_reg_1403),
    .ce(1'b1),
    .dout(grp_fu_521_p2)
);

CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dmul_64ns_64ns_64_4_max_dsp_1_U179(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln75_reg_1524_pp1_iter1_reg),
    .din1(kernel_conv4_load_8_reg_1418),
    .ce(1'b1),
    .dout(grp_fu_525_p2)
);

CNN_CNN_dcmp_64ns_64ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
CNN_dcmp_64ns_64ns_1_2_no_dsp_1_U180(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_reg_1620),
    .din1(64'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_529_p2)
);

CNN_CNN_add_32ns_32ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
CNN_add_32ns_32ns_32_1_1_U181(
    .din0(shl_ln_fu_566_p3),
    .din1(32'd4),
    .dout(add_ln31_fu_574_p2)
);

CNN_CNN_add_32ns_32ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
CNN_add_32ns_32ns_32_1_1_U182(
    .din0(shl_ln_fu_566_p3),
    .din1(32'd3),
    .dout(sub13_fu_586_p2)
);

CNN_CNN_add_32ns_32ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
CNN_add_32ns_32ns_32_1_1_U183(
    .din0(shl_ln_fu_566_p3),
    .din1(32'd2),
    .dout(sub47_fu_592_p2)
);

CNN_CNN_add_6ns_6ns_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 6 ))
CNN_add_6ns_6ns_6_1_1_U184(
    .din0(add_ln83_7_fu_633_p0),
    .din1(add_ln83_7_fu_633_p1),
    .dout(add_ln83_7_fu_633_p2)
);

CNN_CNN_add_10ns_10ns_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 10 ))
CNN_add_10ns_10ns_10_1_1_U185(
    .din0(add_ln83_fu_655_p0),
    .din1(add_ln83_fu_655_p1),
    .dout(add_ln83_fu_655_p2)
);

CNN_CNN_add_9ns_9ns_9_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 9 ))
CNN_add_9ns_9ns_9_1_1_U186(
    .din0(9'd1),
    .din1(indvar_flatten109_reg_315),
    .dout(add_ln39_fu_667_p2)
);

CNN_CNN_add_4ns_4ns_4_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 4 ))
CNN_add_4ns_4ns_4_1_1_U187(
    .din0(4'd1),
    .din1(num_channel_reg_326),
    .dout(add_ln39_3_fu_687_p2)
);

CNN_CNN_add_6ns_6ns_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 6 ))
CNN_add_6ns_6ns_6_1_1_U188(
    .din0(add_ln83_8_fu_709_p0),
    .din1(add_ln83_8_fu_709_p1),
    .dout(add_ln83_8_fu_709_p2)
);

CNN_CNN_add_4ns_4ns_4_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 4 ))
CNN_add_4ns_4ns_4_1_1_U189(
    .din0(4'd1),
    .din1(select_ln39_fu_679_p3),
    .dout(add_ln40_fu_765_p2)
);

CNN_CNN_add_10ns_10ns_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 10 ))
CNN_add_10ns_10ns_10_1_1_U190(
    .din0(add_ln83_9_fu_794_p0),
    .din1(add_ln83_9_fu_794_p1),
    .dout(add_ln83_9_fu_794_p2)
);

CNN_CNN_add_10ns_10ns_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 10 ))
CNN_add_10ns_10ns_10_1_1_U191(
    .din0(10'd1),
    .din1(select_ln40_10_fu_800_p3),
    .dout(add_ln40_19_fu_813_p2)
);

CNN_CNN_add_10ns_10ns_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 10 ))
CNN_add_10ns_10ns_10_1_1_U192(
    .din0(10'd2),
    .din1(select_ln40_10_fu_800_p3),
    .dout(add_ln40_20_fu_824_p2)
);

CNN_CNN_add_10ns_10ns_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 10 ))
CNN_add_10ns_10ns_10_1_1_U193(
    .din0(10'd3),
    .din1(select_ln40_10_fu_800_p3),
    .dout(add_ln40_21_fu_835_p2)
);

CNN_CNN_add_10ns_10ns_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 10 ))
CNN_add_10ns_10ns_10_1_1_U194(
    .din0(10'd4),
    .din1(select_ln40_10_fu_800_p3),
    .dout(add_ln40_22_fu_846_p2)
);

CNN_CNN_add_10ns_10ns_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 10 ))
CNN_add_10ns_10ns_10_1_1_U195(
    .din0(10'd5),
    .din1(select_ln40_10_fu_800_p3),
    .dout(add_ln40_23_fu_857_p2)
);

CNN_CNN_add_10ns_10ns_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 10 ))
CNN_add_10ns_10ns_10_1_1_U196(
    .din0(10'd6),
    .din1(select_ln40_10_fu_800_p3),
    .dout(add_ln40_24_fu_868_p2)
);

CNN_CNN_add_10ns_10ns_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 10 ))
CNN_add_10ns_10ns_10_1_1_U197(
    .din0(10'd7),
    .din1(select_ln40_10_fu_800_p3),
    .dout(add_ln40_25_fu_879_p2)
);

CNN_CNN_add_10ns_10ns_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 10 ))
CNN_add_10ns_10ns_10_1_1_U198(
    .din0(10'd8),
    .din1(select_ln40_10_fu_800_p3),
    .dout(add_ln40_26_fu_890_p2)
);

CNN_CNN_add_31ns_31ns_31_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
CNN_add_31ns_31ns_31_1_1_U199(
    .din0(j_reg_361),
    .din1(31'd1),
    .dout(add_ln42_fu_961_p2)
);

CNN_CNN_mux_42_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 64 ))
CNN_mux_42_64_1_1_U200(
    .din0(line_buffer_1_10_0),
    .din1(line_buffer_1_10_1),
    .din2(line_buffer_1_10_2),
    .din3(line_buffer_1_10_3),
    .din4(trunc_ln43_fu_967_p1),
    .dout(tmp_7_fu_971_p6)
);

CNN_CNN_mux_42_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 64 ))
CNN_mux_42_64_1_1_U201(
    .din0(line_buffer_2_10_0),
    .din1(line_buffer_2_10_1),
    .din2(line_buffer_2_10_2),
    .din3(line_buffer_2_10_3),
    .din4(trunc_ln43_fu_967_p1),
    .dout(tmp_8_fu_985_p6)
);

CNN_CNN_add_31ns_31ns_31_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
CNN_add_31ns_31ns_31_1_1_U202(
    .din0(b_reg_435),
    .din1(31'd1),
    .dout(add_ln64_fu_1140_p2)
);

CNN_CNN_add_3ns_3ns_3_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 3 ))
CNN_add_3ns_3ns_3_1_1_U203(
    .din0(select_ln40_reg_1367),
    .din1(3'd1),
    .dout(add_ln41_fu_1224_p2)
);

CNN_CNN_add_7ns_7ns_7_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 7 ))
CNN_add_7ns_7ns_7_1_1_U204(
    .din0(indvar_flatten_reg_337),
    .din1(7'd1),
    .dout(add_ln40_27_fu_1229_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state7))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((icmp_ln52_fu_1109_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (cmp4827_reg_1261 == 1'd1))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state7)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state7);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter11 <= ap_enable_reg_pp1_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter12 <= ap_enable_reg_pp1_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter13 <= ap_enable_reg_pp1_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter14 <= ap_enable_reg_pp1_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter15 <= ap_enable_reg_pp1_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter16 <= ap_enable_reg_pp1_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter17 <= ap_enable_reg_pp1_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter18 <= ap_enable_reg_pp1_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter19 <= ap_enable_reg_pp1_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter20 <= ap_enable_reg_pp1_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter21 <= ap_enable_reg_pp1_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter22 <= ap_enable_reg_pp1_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter23 <= ap_enable_reg_pp1_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter24 <= ap_enable_reg_pp1_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter25 <= ap_enable_reg_pp1_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter26 <= ap_enable_reg_pp1_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter27 <= ap_enable_reg_pp1_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter28 <= ap_enable_reg_pp1_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter29 <= ap_enable_reg_pp1_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter30 <= ap_enable_reg_pp1_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter31 <= ap_enable_reg_pp1_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter32 <= ap_enable_reg_pp1_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter33 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter33 <= ap_enable_reg_pp1_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter34 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter34 <= ap_enable_reg_pp1_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter35 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter35 <= ap_enable_reg_pp1_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter36 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter36 <= ap_enable_reg_pp1_iter35;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter37 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter37 <= ap_enable_reg_pp1_iter36;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter38 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter38 <= ap_enable_reg_pp1_iter37;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter39 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter39 <= ap_enable_reg_pp1_iter38;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter40 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter40 <= ap_enable_reg_pp1_iter39;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter41 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter41 <= ap_enable_reg_pp1_iter40;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter42 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter42 <= ap_enable_reg_pp1_iter41;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter43 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter43 <= ap_enable_reg_pp1_iter42;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter44 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter44 <= ap_enable_reg_pp1_iter43;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter45 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter45 <= ap_enable_reg_pp1_iter44;
        end else if (((icmp_ln52_fu_1109_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (cmp4827_reg_1261 == 1'd1))) begin
            ap_enable_reg_pp1_iter45 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_fu_1109_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (cmp4827_reg_1261 == 1'd1))) begin
        b_reg_435 <= 31'd0;
    end else if (((icmp_ln64_fu_1135_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        b_reg_435 <= add_ln64_fu_1140_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        i_reg_349 <= add_ln41_fu_1224_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_349 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        indvar_flatten109_reg_315 <= add_ln39_reg_1289;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten109_reg_315 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        indvar_flatten_reg_337 <= select_ln40_12_fu_1235_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_337 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln42_reg_1247 == 1'd1))) begin
        j_reg_361 <= 31'd0;
    end else if (((icmp_ln42_3_fu_956_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        j_reg_361 <= add_ln42_fu_961_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        num_channel_reg_326 <= select_ln39_12_reg_1307;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        num_channel_reg_326 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        num_ker_reg_303 <= select_ln40_11_reg_1362;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        num_ker_reg_303 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_fu_1109_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (cmp4827_reg_1261 == 1'd1))) begin
        window_buffer_load_0_reg_424 <= line_buffer_0_10_0;
    end else if (((icmp_ln64_reg_1503 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        window_buffer_load_0_reg_424 <= window_buffer_load_5_0_reg_414;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_fu_1109_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (cmp4827_reg_1261 == 1'd1))) begin
        window_buffer_load_1_reg_403 <= line_buffer_1_10_0;
    end else if (((icmp_ln64_reg_1503 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        window_buffer_load_1_reg_403 <= window_buffer_load_5_1_reg_393;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_fu_1109_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (cmp4827_reg_1261 == 1'd1))) begin
        window_buffer_load_2_reg_382 <= line_buffer_2_10_0;
    end else if (((icmp_ln64_reg_1503 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        window_buffer_load_2_reg_382 <= window_buffer_load_5_2_reg_372;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_fu_1109_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (cmp4827_reg_1261 == 1'd1))) begin
        window_buffer_load_5_0_reg_414 <= line_buffer_0_10_1;
    end else if (((icmp_ln64_reg_1503 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        window_buffer_load_5_0_reg_414 <= select_ln69_reg_1512;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_fu_1109_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (cmp4827_reg_1261 == 1'd1))) begin
        window_buffer_load_5_1_reg_393 <= line_buffer_1_10_1;
    end else if (((icmp_ln64_reg_1503 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        window_buffer_load_5_1_reg_393 <= select_ln72_reg_1518;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_fu_1109_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (cmp4827_reg_1261 == 1'd1))) begin
        window_buffer_load_5_2_reg_372 <= line_buffer_2_10_1;
    end else if (((icmp_ln64_reg_1503 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        window_buffer_load_5_2_reg_372 <= select_ln75_reg_1524;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        add_ln31_reg_1242 <= add_ln31_fu_574_p2;
        bitcast_ln49_reg_1265 <= bitcast_ln49_fu_604_p1;
        cmp4827_reg_1261 <= cmp4827_fu_598_p2;
        icmp_ln42_reg_1247 <= icmp_ln42_fu_580_p2;
        sub13_reg_1251 <= sub13_fu_586_p2;
        sub47_reg_1256 <= sub47_fu_592_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln39_reg_1289 <= add_ln39_fu_667_p2;
        bias_conv4_load_reg_1281 <= bias_conv4_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_fu_661_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        and_ln39_reg_1301 <= and_ln39_fu_751_p2;
        icmp_ln40_reg_1294 <= icmp_ln40_fu_673_p2;
        select_ln39_12_reg_1307 <= select_ln39_12_fu_757_p3;
        select_ln40_11_reg_1362 <= select_ln40_11_fu_901_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        empty_31_reg_1270 <= empty_31_fu_613_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln64_reg_1503 <= icmp_ln64_fu_1135_p2;
        icmp_ln64_reg_1503_pp1_iter1_reg <= icmp_ln64_reg_1503;
        select_ln69_reg_1512_pp1_iter1_reg <= select_ln69_reg_1512;
        select_ln72_reg_1518_pp1_iter1_reg <= select_ln72_reg_1518;
        select_ln75_reg_1524_pp1_iter1_reg <= select_ln75_reg_1524;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        icmp_ln64_reg_1503_pp1_iter10_reg <= icmp_ln64_reg_1503_pp1_iter9_reg;
        icmp_ln64_reg_1503_pp1_iter11_reg <= icmp_ln64_reg_1503_pp1_iter10_reg;
        icmp_ln64_reg_1503_pp1_iter12_reg <= icmp_ln64_reg_1503_pp1_iter11_reg;
        icmp_ln64_reg_1503_pp1_iter13_reg <= icmp_ln64_reg_1503_pp1_iter12_reg;
        icmp_ln64_reg_1503_pp1_iter14_reg <= icmp_ln64_reg_1503_pp1_iter13_reg;
        icmp_ln64_reg_1503_pp1_iter15_reg <= icmp_ln64_reg_1503_pp1_iter14_reg;
        icmp_ln64_reg_1503_pp1_iter16_reg <= icmp_ln64_reg_1503_pp1_iter15_reg;
        icmp_ln64_reg_1503_pp1_iter17_reg <= icmp_ln64_reg_1503_pp1_iter16_reg;
        icmp_ln64_reg_1503_pp1_iter18_reg <= icmp_ln64_reg_1503_pp1_iter17_reg;
        icmp_ln64_reg_1503_pp1_iter19_reg <= icmp_ln64_reg_1503_pp1_iter18_reg;
        icmp_ln64_reg_1503_pp1_iter20_reg <= icmp_ln64_reg_1503_pp1_iter19_reg;
        icmp_ln64_reg_1503_pp1_iter21_reg <= icmp_ln64_reg_1503_pp1_iter20_reg;
        icmp_ln64_reg_1503_pp1_iter22_reg <= icmp_ln64_reg_1503_pp1_iter21_reg;
        icmp_ln64_reg_1503_pp1_iter23_reg <= icmp_ln64_reg_1503_pp1_iter22_reg;
        icmp_ln64_reg_1503_pp1_iter24_reg <= icmp_ln64_reg_1503_pp1_iter23_reg;
        icmp_ln64_reg_1503_pp1_iter25_reg <= icmp_ln64_reg_1503_pp1_iter24_reg;
        icmp_ln64_reg_1503_pp1_iter26_reg <= icmp_ln64_reg_1503_pp1_iter25_reg;
        icmp_ln64_reg_1503_pp1_iter27_reg <= icmp_ln64_reg_1503_pp1_iter26_reg;
        icmp_ln64_reg_1503_pp1_iter28_reg <= icmp_ln64_reg_1503_pp1_iter27_reg;
        icmp_ln64_reg_1503_pp1_iter29_reg <= icmp_ln64_reg_1503_pp1_iter28_reg;
        icmp_ln64_reg_1503_pp1_iter2_reg <= icmp_ln64_reg_1503_pp1_iter1_reg;
        icmp_ln64_reg_1503_pp1_iter30_reg <= icmp_ln64_reg_1503_pp1_iter29_reg;
        icmp_ln64_reg_1503_pp1_iter31_reg <= icmp_ln64_reg_1503_pp1_iter30_reg;
        icmp_ln64_reg_1503_pp1_iter32_reg <= icmp_ln64_reg_1503_pp1_iter31_reg;
        icmp_ln64_reg_1503_pp1_iter33_reg <= icmp_ln64_reg_1503_pp1_iter32_reg;
        icmp_ln64_reg_1503_pp1_iter34_reg <= icmp_ln64_reg_1503_pp1_iter33_reg;
        icmp_ln64_reg_1503_pp1_iter35_reg <= icmp_ln64_reg_1503_pp1_iter34_reg;
        icmp_ln64_reg_1503_pp1_iter36_reg <= icmp_ln64_reg_1503_pp1_iter35_reg;
        icmp_ln64_reg_1503_pp1_iter37_reg <= icmp_ln64_reg_1503_pp1_iter36_reg;
        icmp_ln64_reg_1503_pp1_iter38_reg <= icmp_ln64_reg_1503_pp1_iter37_reg;
        icmp_ln64_reg_1503_pp1_iter39_reg <= icmp_ln64_reg_1503_pp1_iter38_reg;
        icmp_ln64_reg_1503_pp1_iter3_reg <= icmp_ln64_reg_1503_pp1_iter2_reg;
        icmp_ln64_reg_1503_pp1_iter40_reg <= icmp_ln64_reg_1503_pp1_iter39_reg;
        icmp_ln64_reg_1503_pp1_iter41_reg <= icmp_ln64_reg_1503_pp1_iter40_reg;
        icmp_ln64_reg_1503_pp1_iter42_reg <= icmp_ln64_reg_1503_pp1_iter41_reg;
        icmp_ln64_reg_1503_pp1_iter43_reg <= icmp_ln64_reg_1503_pp1_iter42_reg;
        icmp_ln64_reg_1503_pp1_iter44_reg <= icmp_ln64_reg_1503_pp1_iter43_reg;
        icmp_ln64_reg_1503_pp1_iter4_reg <= icmp_ln64_reg_1503_pp1_iter3_reg;
        icmp_ln64_reg_1503_pp1_iter5_reg <= icmp_ln64_reg_1503_pp1_iter4_reg;
        icmp_ln64_reg_1503_pp1_iter6_reg <= icmp_ln64_reg_1503_pp1_iter5_reg;
        icmp_ln64_reg_1503_pp1_iter7_reg <= icmp_ln64_reg_1503_pp1_iter6_reg;
        icmp_ln64_reg_1503_pp1_iter8_reg <= icmp_ln64_reg_1503_pp1_iter7_reg;
        icmp_ln64_reg_1503_pp1_iter9_reg <= icmp_ln64_reg_1503_pp1_iter8_reg;
        mul_0_1_reg_1545_pp1_iter5_reg <= mul_0_1_reg_1545;
        mul_0_1_reg_1545_pp1_iter6_reg <= mul_0_1_reg_1545_pp1_iter5_reg;
        mul_0_1_reg_1545_pp1_iter7_reg <= mul_0_1_reg_1545_pp1_iter6_reg;
        mul_0_2_reg_1560_pp1_iter10_reg <= mul_0_2_reg_1560_pp1_iter9_reg;
        mul_0_2_reg_1560_pp1_iter11_reg <= mul_0_2_reg_1560_pp1_iter10_reg;
        mul_0_2_reg_1560_pp1_iter6_reg <= mul_0_2_reg_1560;
        mul_0_2_reg_1560_pp1_iter7_reg <= mul_0_2_reg_1560_pp1_iter6_reg;
        mul_0_2_reg_1560_pp1_iter8_reg <= mul_0_2_reg_1560_pp1_iter7_reg;
        mul_0_2_reg_1560_pp1_iter9_reg <= mul_0_2_reg_1560_pp1_iter8_reg;
        mul_1_1_reg_1550_pp1_iter10_reg <= mul_1_1_reg_1550_pp1_iter9_reg;
        mul_1_1_reg_1550_pp1_iter11_reg <= mul_1_1_reg_1550_pp1_iter10_reg;
        mul_1_1_reg_1550_pp1_iter12_reg <= mul_1_1_reg_1550_pp1_iter11_reg;
        mul_1_1_reg_1550_pp1_iter13_reg <= mul_1_1_reg_1550_pp1_iter12_reg;
        mul_1_1_reg_1550_pp1_iter14_reg <= mul_1_1_reg_1550_pp1_iter13_reg;
        mul_1_1_reg_1550_pp1_iter15_reg <= mul_1_1_reg_1550_pp1_iter14_reg;
        mul_1_1_reg_1550_pp1_iter16_reg <= mul_1_1_reg_1550_pp1_iter15_reg;
        mul_1_1_reg_1550_pp1_iter17_reg <= mul_1_1_reg_1550_pp1_iter16_reg;
        mul_1_1_reg_1550_pp1_iter18_reg <= mul_1_1_reg_1550_pp1_iter17_reg;
        mul_1_1_reg_1550_pp1_iter19_reg <= mul_1_1_reg_1550_pp1_iter18_reg;
        mul_1_1_reg_1550_pp1_iter5_reg <= mul_1_1_reg_1550;
        mul_1_1_reg_1550_pp1_iter6_reg <= mul_1_1_reg_1550_pp1_iter5_reg;
        mul_1_1_reg_1550_pp1_iter7_reg <= mul_1_1_reg_1550_pp1_iter6_reg;
        mul_1_1_reg_1550_pp1_iter8_reg <= mul_1_1_reg_1550_pp1_iter7_reg;
        mul_1_1_reg_1550_pp1_iter9_reg <= mul_1_1_reg_1550_pp1_iter8_reg;
        mul_1_2_reg_1565_pp1_iter10_reg <= mul_1_2_reg_1565_pp1_iter9_reg;
        mul_1_2_reg_1565_pp1_iter11_reg <= mul_1_2_reg_1565_pp1_iter10_reg;
        mul_1_2_reg_1565_pp1_iter12_reg <= mul_1_2_reg_1565_pp1_iter11_reg;
        mul_1_2_reg_1565_pp1_iter13_reg <= mul_1_2_reg_1565_pp1_iter12_reg;
        mul_1_2_reg_1565_pp1_iter14_reg <= mul_1_2_reg_1565_pp1_iter13_reg;
        mul_1_2_reg_1565_pp1_iter15_reg <= mul_1_2_reg_1565_pp1_iter14_reg;
        mul_1_2_reg_1565_pp1_iter16_reg <= mul_1_2_reg_1565_pp1_iter15_reg;
        mul_1_2_reg_1565_pp1_iter17_reg <= mul_1_2_reg_1565_pp1_iter16_reg;
        mul_1_2_reg_1565_pp1_iter18_reg <= mul_1_2_reg_1565_pp1_iter17_reg;
        mul_1_2_reg_1565_pp1_iter19_reg <= mul_1_2_reg_1565_pp1_iter18_reg;
        mul_1_2_reg_1565_pp1_iter20_reg <= mul_1_2_reg_1565_pp1_iter19_reg;
        mul_1_2_reg_1565_pp1_iter21_reg <= mul_1_2_reg_1565_pp1_iter20_reg;
        mul_1_2_reg_1565_pp1_iter22_reg <= mul_1_2_reg_1565_pp1_iter21_reg;
        mul_1_2_reg_1565_pp1_iter23_reg <= mul_1_2_reg_1565_pp1_iter22_reg;
        mul_1_2_reg_1565_pp1_iter6_reg <= mul_1_2_reg_1565;
        mul_1_2_reg_1565_pp1_iter7_reg <= mul_1_2_reg_1565_pp1_iter6_reg;
        mul_1_2_reg_1565_pp1_iter8_reg <= mul_1_2_reg_1565_pp1_iter7_reg;
        mul_1_2_reg_1565_pp1_iter9_reg <= mul_1_2_reg_1565_pp1_iter8_reg;
        mul_1_reg_1535_pp1_iter10_reg <= mul_1_reg_1535_pp1_iter9_reg;
        mul_1_reg_1535_pp1_iter11_reg <= mul_1_reg_1535_pp1_iter10_reg;
        mul_1_reg_1535_pp1_iter12_reg <= mul_1_reg_1535_pp1_iter11_reg;
        mul_1_reg_1535_pp1_iter13_reg <= mul_1_reg_1535_pp1_iter12_reg;
        mul_1_reg_1535_pp1_iter14_reg <= mul_1_reg_1535_pp1_iter13_reg;
        mul_1_reg_1535_pp1_iter15_reg <= mul_1_reg_1535_pp1_iter14_reg;
        mul_1_reg_1535_pp1_iter4_reg <= mul_1_reg_1535;
        mul_1_reg_1535_pp1_iter5_reg <= mul_1_reg_1535_pp1_iter4_reg;
        mul_1_reg_1535_pp1_iter6_reg <= mul_1_reg_1535_pp1_iter5_reg;
        mul_1_reg_1535_pp1_iter7_reg <= mul_1_reg_1535_pp1_iter6_reg;
        mul_1_reg_1535_pp1_iter8_reg <= mul_1_reg_1535_pp1_iter7_reg;
        mul_1_reg_1535_pp1_iter9_reg <= mul_1_reg_1535_pp1_iter8_reg;
        mul_2_1_reg_1555_pp1_iter10_reg <= mul_2_1_reg_1555_pp1_iter9_reg;
        mul_2_1_reg_1555_pp1_iter11_reg <= mul_2_1_reg_1555_pp1_iter10_reg;
        mul_2_1_reg_1555_pp1_iter12_reg <= mul_2_1_reg_1555_pp1_iter11_reg;
        mul_2_1_reg_1555_pp1_iter13_reg <= mul_2_1_reg_1555_pp1_iter12_reg;
        mul_2_1_reg_1555_pp1_iter14_reg <= mul_2_1_reg_1555_pp1_iter13_reg;
        mul_2_1_reg_1555_pp1_iter15_reg <= mul_2_1_reg_1555_pp1_iter14_reg;
        mul_2_1_reg_1555_pp1_iter16_reg <= mul_2_1_reg_1555_pp1_iter15_reg;
        mul_2_1_reg_1555_pp1_iter17_reg <= mul_2_1_reg_1555_pp1_iter16_reg;
        mul_2_1_reg_1555_pp1_iter18_reg <= mul_2_1_reg_1555_pp1_iter17_reg;
        mul_2_1_reg_1555_pp1_iter19_reg <= mul_2_1_reg_1555_pp1_iter18_reg;
        mul_2_1_reg_1555_pp1_iter20_reg <= mul_2_1_reg_1555_pp1_iter19_reg;
        mul_2_1_reg_1555_pp1_iter21_reg <= mul_2_1_reg_1555_pp1_iter20_reg;
        mul_2_1_reg_1555_pp1_iter22_reg <= mul_2_1_reg_1555_pp1_iter21_reg;
        mul_2_1_reg_1555_pp1_iter23_reg <= mul_2_1_reg_1555_pp1_iter22_reg;
        mul_2_1_reg_1555_pp1_iter24_reg <= mul_2_1_reg_1555_pp1_iter23_reg;
        mul_2_1_reg_1555_pp1_iter25_reg <= mul_2_1_reg_1555_pp1_iter24_reg;
        mul_2_1_reg_1555_pp1_iter26_reg <= mul_2_1_reg_1555_pp1_iter25_reg;
        mul_2_1_reg_1555_pp1_iter27_reg <= mul_2_1_reg_1555_pp1_iter26_reg;
        mul_2_1_reg_1555_pp1_iter28_reg <= mul_2_1_reg_1555_pp1_iter27_reg;
        mul_2_1_reg_1555_pp1_iter29_reg <= mul_2_1_reg_1555_pp1_iter28_reg;
        mul_2_1_reg_1555_pp1_iter30_reg <= mul_2_1_reg_1555_pp1_iter29_reg;
        mul_2_1_reg_1555_pp1_iter31_reg <= mul_2_1_reg_1555_pp1_iter30_reg;
        mul_2_1_reg_1555_pp1_iter5_reg <= mul_2_1_reg_1555;
        mul_2_1_reg_1555_pp1_iter6_reg <= mul_2_1_reg_1555_pp1_iter5_reg;
        mul_2_1_reg_1555_pp1_iter7_reg <= mul_2_1_reg_1555_pp1_iter6_reg;
        mul_2_1_reg_1555_pp1_iter8_reg <= mul_2_1_reg_1555_pp1_iter7_reg;
        mul_2_1_reg_1555_pp1_iter9_reg <= mul_2_1_reg_1555_pp1_iter8_reg;
        mul_2_2_reg_1570_pp1_iter10_reg <= mul_2_2_reg_1570_pp1_iter9_reg;
        mul_2_2_reg_1570_pp1_iter11_reg <= mul_2_2_reg_1570_pp1_iter10_reg;
        mul_2_2_reg_1570_pp1_iter12_reg <= mul_2_2_reg_1570_pp1_iter11_reg;
        mul_2_2_reg_1570_pp1_iter13_reg <= mul_2_2_reg_1570_pp1_iter12_reg;
        mul_2_2_reg_1570_pp1_iter14_reg <= mul_2_2_reg_1570_pp1_iter13_reg;
        mul_2_2_reg_1570_pp1_iter15_reg <= mul_2_2_reg_1570_pp1_iter14_reg;
        mul_2_2_reg_1570_pp1_iter16_reg <= mul_2_2_reg_1570_pp1_iter15_reg;
        mul_2_2_reg_1570_pp1_iter17_reg <= mul_2_2_reg_1570_pp1_iter16_reg;
        mul_2_2_reg_1570_pp1_iter18_reg <= mul_2_2_reg_1570_pp1_iter17_reg;
        mul_2_2_reg_1570_pp1_iter19_reg <= mul_2_2_reg_1570_pp1_iter18_reg;
        mul_2_2_reg_1570_pp1_iter20_reg <= mul_2_2_reg_1570_pp1_iter19_reg;
        mul_2_2_reg_1570_pp1_iter21_reg <= mul_2_2_reg_1570_pp1_iter20_reg;
        mul_2_2_reg_1570_pp1_iter22_reg <= mul_2_2_reg_1570_pp1_iter21_reg;
        mul_2_2_reg_1570_pp1_iter23_reg <= mul_2_2_reg_1570_pp1_iter22_reg;
        mul_2_2_reg_1570_pp1_iter24_reg <= mul_2_2_reg_1570_pp1_iter23_reg;
        mul_2_2_reg_1570_pp1_iter25_reg <= mul_2_2_reg_1570_pp1_iter24_reg;
        mul_2_2_reg_1570_pp1_iter26_reg <= mul_2_2_reg_1570_pp1_iter25_reg;
        mul_2_2_reg_1570_pp1_iter27_reg <= mul_2_2_reg_1570_pp1_iter26_reg;
        mul_2_2_reg_1570_pp1_iter28_reg <= mul_2_2_reg_1570_pp1_iter27_reg;
        mul_2_2_reg_1570_pp1_iter29_reg <= mul_2_2_reg_1570_pp1_iter28_reg;
        mul_2_2_reg_1570_pp1_iter30_reg <= mul_2_2_reg_1570_pp1_iter29_reg;
        mul_2_2_reg_1570_pp1_iter31_reg <= mul_2_2_reg_1570_pp1_iter30_reg;
        mul_2_2_reg_1570_pp1_iter32_reg <= mul_2_2_reg_1570_pp1_iter31_reg;
        mul_2_2_reg_1570_pp1_iter33_reg <= mul_2_2_reg_1570_pp1_iter32_reg;
        mul_2_2_reg_1570_pp1_iter34_reg <= mul_2_2_reg_1570_pp1_iter33_reg;
        mul_2_2_reg_1570_pp1_iter35_reg <= mul_2_2_reg_1570_pp1_iter34_reg;
        mul_2_2_reg_1570_pp1_iter6_reg <= mul_2_2_reg_1570;
        mul_2_2_reg_1570_pp1_iter7_reg <= mul_2_2_reg_1570_pp1_iter6_reg;
        mul_2_2_reg_1570_pp1_iter8_reg <= mul_2_2_reg_1570_pp1_iter7_reg;
        mul_2_2_reg_1570_pp1_iter9_reg <= mul_2_2_reg_1570_pp1_iter8_reg;
        mul_2_reg_1540_pp1_iter10_reg <= mul_2_reg_1540_pp1_iter9_reg;
        mul_2_reg_1540_pp1_iter11_reg <= mul_2_reg_1540_pp1_iter10_reg;
        mul_2_reg_1540_pp1_iter12_reg <= mul_2_reg_1540_pp1_iter11_reg;
        mul_2_reg_1540_pp1_iter13_reg <= mul_2_reg_1540_pp1_iter12_reg;
        mul_2_reg_1540_pp1_iter14_reg <= mul_2_reg_1540_pp1_iter13_reg;
        mul_2_reg_1540_pp1_iter15_reg <= mul_2_reg_1540_pp1_iter14_reg;
        mul_2_reg_1540_pp1_iter16_reg <= mul_2_reg_1540_pp1_iter15_reg;
        mul_2_reg_1540_pp1_iter17_reg <= mul_2_reg_1540_pp1_iter16_reg;
        mul_2_reg_1540_pp1_iter18_reg <= mul_2_reg_1540_pp1_iter17_reg;
        mul_2_reg_1540_pp1_iter19_reg <= mul_2_reg_1540_pp1_iter18_reg;
        mul_2_reg_1540_pp1_iter20_reg <= mul_2_reg_1540_pp1_iter19_reg;
        mul_2_reg_1540_pp1_iter21_reg <= mul_2_reg_1540_pp1_iter20_reg;
        mul_2_reg_1540_pp1_iter22_reg <= mul_2_reg_1540_pp1_iter21_reg;
        mul_2_reg_1540_pp1_iter23_reg <= mul_2_reg_1540_pp1_iter22_reg;
        mul_2_reg_1540_pp1_iter24_reg <= mul_2_reg_1540_pp1_iter23_reg;
        mul_2_reg_1540_pp1_iter25_reg <= mul_2_reg_1540_pp1_iter24_reg;
        mul_2_reg_1540_pp1_iter26_reg <= mul_2_reg_1540_pp1_iter25_reg;
        mul_2_reg_1540_pp1_iter27_reg <= mul_2_reg_1540_pp1_iter26_reg;
        mul_2_reg_1540_pp1_iter4_reg <= mul_2_reg_1540;
        mul_2_reg_1540_pp1_iter5_reg <= mul_2_reg_1540_pp1_iter4_reg;
        mul_2_reg_1540_pp1_iter6_reg <= mul_2_reg_1540_pp1_iter5_reg;
        mul_2_reg_1540_pp1_iter7_reg <= mul_2_reg_1540_pp1_iter6_reg;
        mul_2_reg_1540_pp1_iter8_reg <= mul_2_reg_1540_pp1_iter7_reg;
        mul_2_reg_1540_pp1_iter9_reg <= mul_2_reg_1540_pp1_iter8_reg;
        sum_reg_1620_pp1_iter44_reg <= sum_reg_1620;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        kernel_conv4_load_1_reg_1383 <= kernel_conv4_q1;
        kernel_conv4_load_2_reg_1388 <= kernel_conv4_q2;
        kernel_conv4_load_3_reg_1393 <= kernel_conv4_q3;
        kernel_conv4_load_4_reg_1398 <= kernel_conv4_q4;
        kernel_conv4_load_5_reg_1403 <= kernel_conv4_q5;
        kernel_conv4_load_6_reg_1408 <= kernel_conv4_q6;
        kernel_conv4_load_7_reg_1413 <= kernel_conv4_q7;
        kernel_conv4_load_8_reg_1418 <= kernel_conv4_q8;
        kernel_conv4_load_reg_1378 <= kernel_conv4_q0;
        select_ln40_9_reg_1373 <= select_ln40_9_fu_927_p3;
        select_ln40_reg_1367 <= select_ln40_fu_919_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln43_fu_967_p1 == 2'd0) & (icmp_ln42_3_fu_956_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        line_buffer_0_10_0 <= tmp_7_fu_971_p6;
        line_buffer_1_10_0 <= tmp_8_fu_985_p6;
        line_buffer_2_10_0 <= select_ln45_fu_1069_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln43_fu_967_p1 == 2'd1) & (icmp_ln42_3_fu_956_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        line_buffer_0_10_1 <= tmp_7_fu_971_p6;
        line_buffer_1_10_1 <= tmp_8_fu_985_p6;
        line_buffer_2_10_1 <= select_ln45_fu_1069_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln43_fu_967_p1 == 2'd2) & (icmp_ln42_3_fu_956_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        line_buffer_0_10_2 <= tmp_7_fu_971_p6;
        line_buffer_1_10_2 <= tmp_8_fu_985_p6;
        line_buffer_2_10_2 <= select_ln45_fu_1069_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_fu_1109_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (cmp4827_reg_1261 == 1'd1))) begin
        line_buffer_0_10_2_load_reg_1473 <= line_buffer_0_10_2;
        line_buffer_0_10_3_load_reg_1478 <= line_buffer_0_10_3;
        line_buffer_1_10_2_load_reg_1483 <= line_buffer_1_10_2;
        line_buffer_1_10_3_load_reg_1488 <= line_buffer_1_10_3;
        line_buffer_2_10_2_load_reg_1493 <= line_buffer_2_10_2;
        line_buffer_2_10_3_load_reg_1498 <= line_buffer_2_10_3;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln43_fu_967_p1 == 2'd3) & (icmp_ln42_3_fu_956_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        line_buffer_0_10_3 <= tmp_7_fu_971_p6;
        line_buffer_1_10_3 <= tmp_8_fu_985_p6;
        line_buffer_2_10_3 <= select_ln45_fu_1069_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1503_pp1_iter3_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        mul_0_1_reg_1545 <= grp_fu_502_p2;
        mul_1_1_reg_1550 <= grp_fu_507_p2;
        mul_2_1_reg_1555 <= grp_fu_512_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1503_pp1_iter4_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        mul_0_2_reg_1560 <= grp_fu_517_p2;
        mul_1_2_reg_1565 <= grp_fu_521_p2;
        mul_2_2_reg_1570 <= grp_fu_525_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1503_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        mul_1_reg_1535 <= grp_fu_492_p2;
        mul_2_reg_1540 <= grp_fu_497_p2;
        mul_reg_1530 <= grp_fu_487_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln42_reg_1247 == 1'd1))) begin
        or_ln45_reg_1423 <= or_ln45_fu_946_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_fu_1135_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        select_ln69_reg_1512 <= select_ln69_fu_1156_p3;
        select_ln72_reg_1518 <= select_ln72_fu_1162_p3;
        select_ln75_reg_1524 <= select_ln75_fu_1168_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1503_pp1_iter10_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        sum_7_0_1_reg_1580 <= grp_fu_451_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1503_pp1_iter14_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        sum_7_0_2_reg_1585 <= grp_fu_455_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1503_pp1_iter22_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        sum_7_1_1_reg_1595 <= grp_fu_463_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1503_pp1_iter26_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        sum_7_1_2_reg_1600 <= grp_fu_467_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1503_pp1_iter18_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        sum_7_1_reg_1590 <= grp_fu_459_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1503_pp1_iter34_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        sum_7_2_1_reg_1610 <= grp_fu_475_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1503_pp1_iter38_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        sum_7_2_2_reg_1615 <= grp_fu_479_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1503_pp1_iter30_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        sum_7_2_reg_1605 <= grp_fu_471_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1503_pp1_iter6_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        sum_7_reg_1575 <= grp_fu_446_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1503_pp1_iter42_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        sum_reg_1620 <= grp_fu_483_p2;
    end
end

always @ (*) begin
    if ((icmp_ln64_fu_1135_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln39_fu_661_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter45 == 1'b0) & (ap_enable_reg_pp1_iter44 == 1'b0) & (ap_enable_reg_pp1_iter43 == 1'b0) & (ap_enable_reg_pp1_iter42 == 1'b0) & (ap_enable_reg_pp1_iter41 == 1'b0) & (ap_enable_reg_pp1_iter40 == 1'b0) & (ap_enable_reg_pp1_iter39 == 1'b0) & (ap_enable_reg_pp1_iter38 == 1'b0) & (ap_enable_reg_pp1_iter37 == 1'b0) & (ap_enable_reg_pp1_iter36 == 1'b0) & (ap_enable_reg_pp1_iter35 == 1'b0) & (ap_enable_reg_pp1_iter34 == 1'b0) & (ap_enable_reg_pp1_iter33 == 1'b0) & (ap_enable_reg_pp1_iter32 == 1'b0) & (ap_enable_reg_pp1_iter31 == 1'b0) & (ap_enable_reg_pp1_iter30 == 1'b0) & (ap_enable_reg_pp1_iter29 == 1'b0) & (ap_enable_reg_pp1_iter28 == 1'b0) & (ap_enable_reg_pp1_iter27 == 1'b0) & (ap_enable_reg_pp1_iter26 == 1'b0) & (ap_enable_reg_pp1_iter25 == 1'b0) & (ap_enable_reg_pp1_iter24 == 1'b0) & (ap_enable_reg_pp1_iter23 == 1'b0) & (ap_enable_reg_pp1_iter22 == 1'b0) & (ap_enable_reg_pp1_iter21 == 1'b0) & (ap_enable_reg_pp1_iter20 == 1'b0) & (ap_enable_reg_pp1_iter19 == 1'b0) & (ap_enable_reg_pp1_iter18 == 1'b0) & (ap_enable_reg_pp1_iter17 == 1'b0) & (ap_enable_reg_pp1_iter16 == 1'b0) & (ap_enable_reg_pp1_iter15 == 1'b0) & (ap_enable_reg_pp1_iter14 == 1'b0) & (ap_enable_reg_pp1_iter13 == 1'b0) & (ap_enable_reg_pp1_iter12 == 1'b0) & (ap_enable_reg_pp1_iter11 == 1'b0) & (ap_enable_reg_pp1_iter10 == 1'b0) & (ap_enable_reg_pp1_iter9 == 1'b0) & (ap_enable_reg_pp1_iter8 == 1'b0) & (ap_enable_reg_pp1_iter7 == 1'b0) & (ap_enable_reg_pp1_iter6 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (icmp_ln64_reg_1503 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        ap_phi_mux_window_buffer_load_0_phi_fu_427_p4 = window_buffer_load_5_0_reg_414;
    end else begin
        ap_phi_mux_window_buffer_load_0_phi_fu_427_p4 = window_buffer_load_0_reg_424;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (icmp_ln64_reg_1503 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        ap_phi_mux_window_buffer_load_1_phi_fu_406_p4 = window_buffer_load_5_1_reg_393;
    end else begin
        ap_phi_mux_window_buffer_load_1_phi_fu_406_p4 = window_buffer_load_1_reg_403;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (icmp_ln64_reg_1503 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        ap_phi_mux_window_buffer_load_2_phi_fu_385_p4 = window_buffer_load_5_2_reg_372;
    end else begin
        ap_phi_mux_window_buffer_load_2_phi_fu_385_p4 = window_buffer_load_2_reg_382;
    end
end

always @ (*) begin
    if (((icmp_ln39_fu_661_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        bias_conv4_address0 = zext_ln40_19_fu_771_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        bias_conv4_address0 = zext_ln40_fu_608_p1;
    end else begin
        bias_conv4_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        bias_conv4_ce0 = 1'b1;
    end else begin
        bias_conv4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        kernel_conv4_ce0 = 1'b1;
    end else begin
        kernel_conv4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        kernel_conv4_ce1 = 1'b1;
    end else begin
        kernel_conv4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        kernel_conv4_ce2 = 1'b1;
    end else begin
        kernel_conv4_ce2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        kernel_conv4_ce3 = 1'b1;
    end else begin
        kernel_conv4_ce3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        kernel_conv4_ce4 = 1'b1;
    end else begin
        kernel_conv4_ce4 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        kernel_conv4_ce5 = 1'b1;
    end else begin
        kernel_conv4_ce5 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        kernel_conv4_ce6 = 1'b1;
    end else begin
        kernel_conv4_ce6 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        kernel_conv4_ce7 = 1'b1;
    end else begin
        kernel_conv4_ce7 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        kernel_conv4_ce8 = 1'b1;
    end else begin
        kernel_conv4_ce8 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_1503_pp1_iter44_reg == 1'd0) & (ap_enable_reg_pp1_iter45 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        output_conv4_ap_vld = 1'b1;
    end else begin
        output_conv4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln39_fu_661_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln42_reg_1247 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln42_3_fu_956_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln52_fu_1109_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (cmp4827_reg_1261 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln64_fu_1135_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((ap_enable_reg_pp1_iter44 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter45 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter44 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter45 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln64_fu_1135_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln83_7_fu_633_p0 = {{empty_fu_621_p1}, {3'd0}};

assign add_ln83_7_fu_633_p1 = num_channel_reg_326;

assign add_ln83_8_fu_709_p0 = {{empty_36_fu_697_p1}, {3'd0}};

assign add_ln83_8_fu_709_p1 = add_ln39_3_fu_687_p2;

assign add_ln83_9_fu_794_p0 = tmp5_mid1_fu_780_p4;

assign add_ln83_9_fu_794_p1 = select_ln39_9_fu_719_p3;

assign add_ln83_fu_655_p0 = tmp5_fu_643_p4;

assign add_ln83_fu_655_p1 = add_ln83_7_fu_633_p2;

assign and_ln11_fu_1209_p2 = (or_ln11_fu_1203_p2 & grp_fu_529_p2);

assign and_ln39_fu_751_p2 = (xor_ln39_fu_739_p2 & icmp_ln41_fu_745_p2);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp1_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp1_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp1_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp1_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp1_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp1_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp1_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp1_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp1_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp1_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp1_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp1_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp1_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp1_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp1_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp1_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp1_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp1_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp1_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp1_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp1_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp1_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp1_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp1_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp1_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp1_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp1_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp1_stage0_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp1_stage0_iter35 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp1_stage0_iter36 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp1_stage0_iter37 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp1_stage0_iter38 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp1_stage0_iter39 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp1_stage0_iter40 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp1_stage0_iter41 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp1_stage0_iter42 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp1_stage0_iter43 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp1_stage0_iter44 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp1_stage0_iter45 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign b_cast_fu_1131_p1 = b_reg_435;

assign bitcast_ln11_fu_1174_p1 = sum_reg_1620_pp1_iter44_reg;

assign bitcast_ln49_fu_604_p1 = p_read;

assign cmp4827_fu_598_p2 = (($signed(sub47_fu_592_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign empty_31_fu_613_p1 = num_ker_reg_303[2:0];

assign empty_34_fu_1146_p1 = b_reg_435[1:0];

assign empty_36_fu_697_p1 = add_ln39_3_fu_687_p2[2:0];

assign empty_37_fu_776_p1 = add_ln40_fu_765_p2[2:0];

assign empty_fu_621_p1 = num_channel_reg_326[2:0];

assign icmp_ln11_3_fu_1197_p2 = ((trunc_ln11_fu_1187_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln11_fu_1191_p2 = ((tmp_9_fu_1177_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_661_p2 = ((indvar_flatten109_reg_315 == 9'd384) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_673_p2 = ((indvar_flatten_reg_337 == 7'd48) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_745_p2 = ((i_reg_349 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln42_3_fu_956_p2 = ((j_cast_fu_952_p1 == add_ln31_reg_1242) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_580_p2 = (($signed(add_ln31_fu_574_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln45_3_fu_1053_p2 = ((j_cast_fu_952_p1 == sub13_reg_1251) ? 1'b1 : 1'b0);

assign icmp_ln45_6_fu_934_p2 = ((select_ln40_fu_919_p3 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln45_7_fu_940_p2 = ((select_ln40_fu_919_p3 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_1047_p2 = ((j_reg_361 == 31'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_1109_p2 = ((tmp_fu_1100_p4 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln64_fu_1135_p2 = ((b_cast_fu_1131_p1 == sub47_reg_1256) ? 1'b1 : 1'b0);

assign icmp_ln69_fu_1150_p2 = ((empty_34_fu_1146_p1 == 2'd0) ? 1'b1 : 1'b0);

assign j_cast_fu_952_p1 = j_reg_361;

assign kernel_conv4_address0 = zext_ln83_12_fu_808_p1;

assign kernel_conv4_address1 = zext_ln40_20_fu_819_p1;

assign kernel_conv4_address2 = zext_ln40_21_fu_830_p1;

assign kernel_conv4_address3 = zext_ln40_22_fu_841_p1;

assign kernel_conv4_address4 = zext_ln40_23_fu_852_p1;

assign kernel_conv4_address5 = zext_ln40_24_fu_863_p1;

assign kernel_conv4_address6 = zext_ln40_25_fu_874_p1;

assign kernel_conv4_address7 = zext_ln40_26_fu_885_p1;

assign kernel_conv4_address8 = zext_ln40_27_fu_896_p1;

assign or_ln11_fu_1203_p2 = (icmp_ln11_fu_1191_p2 | icmp_ln11_3_fu_1197_p2);

assign or_ln40_fu_915_p2 = (icmp_ln40_reg_1294 | and_ln39_reg_1301);

assign or_ln45_5_fu_1058_p2 = (icmp_ln45_fu_1047_p2 | icmp_ln45_3_fu_1053_p2);

assign or_ln45_6_fu_1064_p2 = (or_ln45_reg_1423 | or_ln45_5_fu_1058_p2);

assign or_ln45_fu_946_p2 = (icmp_ln45_7_fu_940_p2 | icmp_ln45_6_fu_934_p2);

assign output_conv4 = ((and_ln11_fu_1209_p2[0:0] === 1'b1) ? bitcast_ln11_fu_1174_p1 : 64'd0);

assign select_ln39_10_fu_909_p3 = ((icmp_ln40_reg_1294[0:0] === 1'b1) ? 64'd4604006781183250843 : bias_conv4_load_reg_1281);

assign select_ln39_11_fu_731_p3 = ((icmp_ln40_fu_673_p2[0:0] === 1'b1) ? zext_ln83_10_fu_715_p1 : add_ln83_fu_655_p2);

assign select_ln39_12_fu_757_p3 = ((icmp_ln40_fu_673_p2[0:0] === 1'b1) ? add_ln39_3_fu_687_p2 : num_channel_reg_326);

assign select_ln39_9_fu_719_p3 = ((icmp_ln40_fu_673_p2[0:0] === 1'b1) ? add_ln83_8_fu_709_p2 : add_ln83_7_fu_633_p2);

assign select_ln39_fu_679_p3 = ((icmp_ln40_fu_673_p2[0:0] === 1'b1) ? 4'd0 : num_ker_reg_303);

assign select_ln40_10_fu_800_p3 = ((and_ln39_fu_751_p2[0:0] === 1'b1) ? add_ln83_9_fu_794_p2 : select_ln39_11_fu_731_p3);

assign select_ln40_11_fu_901_p3 = ((and_ln39_fu_751_p2[0:0] === 1'b1) ? add_ln40_fu_765_p2 : select_ln39_fu_679_p3);

assign select_ln40_12_fu_1235_p3 = ((icmp_ln40_reg_1294[0:0] === 1'b1) ? 7'd1 : add_ln40_27_fu_1229_p2);

assign select_ln40_9_fu_927_p3 = ((and_ln39_reg_1301[0:0] === 1'b1) ? bias_conv4_q0 : select_ln39_10_fu_909_p3);

assign select_ln40_fu_919_p3 = ((or_ln40_fu_915_p2[0:0] === 1'b1) ? 3'd0 : i_reg_349);

assign select_ln45_fu_1069_p3 = ((or_ln45_6_fu_1064_p2[0:0] === 1'b1) ? 64'd0 : bitcast_ln49_reg_1265);

assign select_ln69_fu_1156_p3 = ((icmp_ln69_fu_1150_p2[0:0] === 1'b1) ? line_buffer_0_10_2_load_reg_1473 : line_buffer_0_10_3_load_reg_1478);

assign select_ln72_fu_1162_p3 = ((icmp_ln69_fu_1150_p2[0:0] === 1'b1) ? line_buffer_1_10_2_load_reg_1483 : line_buffer_1_10_3_load_reg_1488);

assign select_ln75_fu_1168_p3 = ((icmp_ln69_fu_1150_p2[0:0] === 1'b1) ? line_buffer_2_10_2_load_reg_1493 : line_buffer_2_10_3_load_reg_1498);

assign shl_ln_fu_566_p3 = {{padding}, {1'd0}};

assign tmp5_fu_643_p4 = {{{empty_31_reg_1270}, {empty_31_reg_1270}}, {3'd0}};

assign tmp5_mid1_fu_780_p4 = {{{empty_37_fu_776_p1}, {empty_37_fu_776_p1}}, {3'd0}};

assign tmp_9_fu_1177_p4 = {{bitcast_ln11_fu_1174_p1[62:52]}};

assign tmp_fu_1100_p4 = {{select_ln40_reg_1367[2:1]}};

assign trunc_ln11_fu_1187_p1 = bitcast_ln11_fu_1174_p1[51:0];

assign trunc_ln43_fu_967_p1 = j_reg_361[1:0];

assign xor_ln39_fu_739_p2 = (icmp_ln40_fu_673_p2 ^ 1'd1);

assign zext_ln40_19_fu_771_p1 = add_ln40_fu_765_p2;

assign zext_ln40_20_fu_819_p1 = add_ln40_19_fu_813_p2;

assign zext_ln40_21_fu_830_p1 = add_ln40_20_fu_824_p2;

assign zext_ln40_22_fu_841_p1 = add_ln40_21_fu_835_p2;

assign zext_ln40_23_fu_852_p1 = add_ln40_22_fu_846_p2;

assign zext_ln40_24_fu_863_p1 = add_ln40_23_fu_857_p2;

assign zext_ln40_25_fu_874_p1 = add_ln40_24_fu_868_p2;

assign zext_ln40_26_fu_885_p1 = add_ln40_25_fu_879_p2;

assign zext_ln40_27_fu_896_p1 = add_ln40_26_fu_890_p2;

assign zext_ln40_fu_608_p1 = num_ker_reg_303;

assign zext_ln83_10_fu_715_p1 = add_ln83_8_fu_709_p2;

assign zext_ln83_12_fu_808_p1 = select_ln40_10_fu_800_p3;

endmodule //CNN_convolution_double_double_double_double_4_4_8_8_4_4_3_3_1_1_s
