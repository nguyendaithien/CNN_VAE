// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module CNN_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read,
        output_conv1,
        output_conv1_ap_vld,
        padding
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_pp0_stage0 = 8'd8;
parameter    ap_ST_fsm_state6 = 8'd16;
parameter    ap_ST_fsm_state7 = 8'd32;
parameter    ap_ST_fsm_pp1_stage0 = 8'd64;
parameter    ap_ST_fsm_state55 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] p_read;
output  [63:0] output_conv1;
output   output_conv1_ap_vld;
input  [30:0] padding;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg output_conv1_ap_vld;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [4:0] line_buffer_1_2_address0;
reg    line_buffer_1_2_ce0;
wire   [63:0] line_buffer_1_2_q0;
reg   [4:0] line_buffer_1_2_address1;
reg    line_buffer_1_2_ce1;
reg    line_buffer_1_2_we1;
wire   [63:0] line_buffer_1_2_q1;
reg   [4:0] line_buffer_0_2_address0;
reg    line_buffer_0_2_ce0;
reg    line_buffer_0_2_we0;
wire   [63:0] line_buffer_0_2_q0;
reg   [4:0] line_buffer_0_2_address1;
reg    line_buffer_0_2_ce1;
wire   [63:0] line_buffer_0_2_q1;
reg   [4:0] line_buffer_2_2_address0;
reg    line_buffer_2_2_ce0;
reg    line_buffer_2_2_we0;
wire   [63:0] line_buffer_2_2_d0;
wire   [63:0] line_buffer_2_2_q0;
reg   [4:0] line_buffer_2_2_address1;
reg    line_buffer_2_2_ce1;
wire   [63:0] line_buffer_2_2_q1;
wire   [3:0] bias_conv1_address0;
reg    bias_conv1_ce0;
wire   [63:0] bias_conv1_q0;
wire   [7:0] kernel_conv1_address0;
reg    kernel_conv1_ce0;
wire   [63:0] kernel_conv1_q0;
wire   [7:0] kernel_conv1_address1;
reg    kernel_conv1_ce1;
wire   [63:0] kernel_conv1_q1;
wire   [7:0] kernel_conv1_address2;
reg    kernel_conv1_ce2;
wire   [63:0] kernel_conv1_q2;
wire   [7:0] kernel_conv1_address3;
reg    kernel_conv1_ce3;
wire   [63:0] kernel_conv1_q3;
wire   [7:0] kernel_conv1_address4;
reg    kernel_conv1_ce4;
wire   [63:0] kernel_conv1_q4;
wire   [7:0] kernel_conv1_address5;
reg    kernel_conv1_ce5;
wire   [63:0] kernel_conv1_q5;
wire   [7:0] kernel_conv1_address6;
reg    kernel_conv1_ce6;
wire   [63:0] kernel_conv1_q6;
wire   [7:0] kernel_conv1_address7;
reg    kernel_conv1_ce7;
wire   [63:0] kernel_conv1_q7;
wire   [7:0] kernel_conv1_address8;
reg    kernel_conv1_ce8;
wire   [63:0] kernel_conv1_q8;
reg   [4:0] j_reg_387;
reg   [30:0] b_reg_398;
reg   [63:0] window_buffer_load_9_0_reg_409;
wire    ap_block_state8_pp1_stage0_iter0;
wire    ap_block_state9_pp1_stage0_iter1;
wire    ap_block_state10_pp1_stage0_iter2;
wire    ap_block_state11_pp1_stage0_iter3;
wire    ap_block_state12_pp1_stage0_iter4;
wire    ap_block_state13_pp1_stage0_iter5;
wire    ap_block_state14_pp1_stage0_iter6;
wire    ap_block_state15_pp1_stage0_iter7;
wire    ap_block_state16_pp1_stage0_iter8;
wire    ap_block_state17_pp1_stage0_iter9;
wire    ap_block_state18_pp1_stage0_iter10;
wire    ap_block_state19_pp1_stage0_iter11;
wire    ap_block_state20_pp1_stage0_iter12;
wire    ap_block_state21_pp1_stage0_iter13;
wire    ap_block_state22_pp1_stage0_iter14;
wire    ap_block_state23_pp1_stage0_iter15;
wire    ap_block_state24_pp1_stage0_iter16;
wire    ap_block_state25_pp1_stage0_iter17;
wire    ap_block_state26_pp1_stage0_iter18;
wire    ap_block_state27_pp1_stage0_iter19;
wire    ap_block_state28_pp1_stage0_iter20;
wire    ap_block_state29_pp1_stage0_iter21;
wire    ap_block_state30_pp1_stage0_iter22;
wire    ap_block_state31_pp1_stage0_iter23;
wire    ap_block_state32_pp1_stage0_iter24;
wire    ap_block_state33_pp1_stage0_iter25;
wire    ap_block_state34_pp1_stage0_iter26;
wire    ap_block_state35_pp1_stage0_iter27;
wire    ap_block_state36_pp1_stage0_iter28;
wire    ap_block_state37_pp1_stage0_iter29;
wire    ap_block_state38_pp1_stage0_iter30;
wire    ap_block_state39_pp1_stage0_iter31;
wire    ap_block_state40_pp1_stage0_iter32;
wire    ap_block_state41_pp1_stage0_iter33;
wire    ap_block_state42_pp1_stage0_iter34;
wire    ap_block_state43_pp1_stage0_iter35;
wire    ap_block_state44_pp1_stage0_iter36;
wire    ap_block_state45_pp1_stage0_iter37;
wire    ap_block_state46_pp1_stage0_iter38;
wire    ap_block_state47_pp1_stage0_iter39;
wire    ap_block_state48_pp1_stage0_iter40;
wire    ap_block_state49_pp1_stage0_iter41;
wire    ap_block_state50_pp1_stage0_iter42;
wire    ap_block_state51_pp1_stage0_iter43;
wire    ap_block_state52_pp1_stage0_iter44;
wire    ap_block_state53_pp1_stage0_iter45;
wire    ap_block_state54_pp1_stage0_iter46;
wire    ap_block_pp1_stage0_11001;
reg   [63:0] window_buffer_load_0_reg_419;
reg   [63:0] window_buffer_load_9_1_reg_430;
reg   [63:0] window_buffer_load_1_reg_440;
reg   [63:0] window_buffer_load_9_2_reg_451;
reg   [63:0] window_buffer_load_2_reg_461;
wire   [31:0] add_ln31_fu_568_p2;
reg   [31:0] add_ln31_reg_967;
wire   [0:0] icmp_ln42_fu_574_p2;
reg   [0:0] icmp_ln42_reg_972;
wire   [31:0] sub13_fu_580_p2;
reg   [31:0] sub13_reg_976;
wire   [31:0] sub47_fu_586_p2;
reg   [31:0] sub47_reg_981;
wire   [0:0] cmp4827_fu_592_p2;
reg   [0:0] cmp4827_reg_986;
wire   [63:0] bitcast_ln49_fu_598_p1;
reg   [63:0] bitcast_ln49_reg_990;
wire   [8:0] add_ln40_fu_634_p2;
reg   [8:0] add_ln40_reg_998;
wire    ap_CS_fsm_state2;
wire   [4:0] select_ln40_fu_646_p3;
reg   [4:0] select_ln40_reg_1003;
wire   [0:0] icmp_ln40_fu_628_p2;
wire   [4:0] select_ln40_13_fu_686_p3;
reg   [4:0] select_ln40_13_reg_1011;
reg   [63:0] bias_conv1_load_reg_1066;
wire    ap_CS_fsm_state3;
reg   [63:0] kernel_conv1_load_reg_1071;
reg   [63:0] kernel_conv1_load_1_reg_1076;
reg   [63:0] kernel_conv1_load_2_reg_1081;
reg   [63:0] kernel_conv1_load_3_reg_1086;
reg   [63:0] kernel_conv1_load_4_reg_1091;
reg   [63:0] kernel_conv1_load_5_reg_1096;
reg   [63:0] kernel_conv1_load_6_reg_1101;
reg   [63:0] kernel_conv1_load_7_reg_1106;
reg   [63:0] kernel_conv1_load_8_reg_1111;
wire   [0:0] or_ln45_fu_810_p2;
reg   [0:0] or_ln45_reg_1116;
wire   [0:0] icmp_ln42_5_fu_820_p2;
reg   [0:0] icmp_ln42_5_reg_1121;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [4:0] add_ln42_fu_825_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [63:0] j_cast4_fu_831_p1;
reg   [63:0] j_cast4_reg_1130;
reg   [4:0] line_buffer_1_2_addr_reg_1135;
wire   [0:0] icmp_ln52_fu_876_p2;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln64_fu_886_p2;
reg   [0:0] icmp_ln64_reg_1180;
wire    ap_CS_fsm_pp1_stage0;
reg   [0:0] icmp_ln64_reg_1180_pp1_iter1_reg;
reg   [0:0] icmp_ln64_reg_1180_pp1_iter2_reg;
reg   [0:0] icmp_ln64_reg_1180_pp1_iter3_reg;
reg   [0:0] icmp_ln64_reg_1180_pp1_iter4_reg;
reg   [0:0] icmp_ln64_reg_1180_pp1_iter5_reg;
reg   [0:0] icmp_ln64_reg_1180_pp1_iter6_reg;
reg   [0:0] icmp_ln64_reg_1180_pp1_iter7_reg;
reg   [0:0] icmp_ln64_reg_1180_pp1_iter8_reg;
reg   [0:0] icmp_ln64_reg_1180_pp1_iter9_reg;
reg   [0:0] icmp_ln64_reg_1180_pp1_iter10_reg;
reg   [0:0] icmp_ln64_reg_1180_pp1_iter11_reg;
reg   [0:0] icmp_ln64_reg_1180_pp1_iter12_reg;
reg   [0:0] icmp_ln64_reg_1180_pp1_iter13_reg;
reg   [0:0] icmp_ln64_reg_1180_pp1_iter14_reg;
reg   [0:0] icmp_ln64_reg_1180_pp1_iter15_reg;
reg   [0:0] icmp_ln64_reg_1180_pp1_iter16_reg;
reg   [0:0] icmp_ln64_reg_1180_pp1_iter17_reg;
reg   [0:0] icmp_ln64_reg_1180_pp1_iter18_reg;
reg   [0:0] icmp_ln64_reg_1180_pp1_iter19_reg;
reg   [0:0] icmp_ln64_reg_1180_pp1_iter20_reg;
reg   [0:0] icmp_ln64_reg_1180_pp1_iter21_reg;
reg   [0:0] icmp_ln64_reg_1180_pp1_iter22_reg;
reg   [0:0] icmp_ln64_reg_1180_pp1_iter23_reg;
reg   [0:0] icmp_ln64_reg_1180_pp1_iter24_reg;
reg   [0:0] icmp_ln64_reg_1180_pp1_iter25_reg;
reg   [0:0] icmp_ln64_reg_1180_pp1_iter26_reg;
reg   [0:0] icmp_ln64_reg_1180_pp1_iter27_reg;
reg   [0:0] icmp_ln64_reg_1180_pp1_iter28_reg;
reg   [0:0] icmp_ln64_reg_1180_pp1_iter29_reg;
reg   [0:0] icmp_ln64_reg_1180_pp1_iter30_reg;
reg   [0:0] icmp_ln64_reg_1180_pp1_iter31_reg;
reg   [0:0] icmp_ln64_reg_1180_pp1_iter32_reg;
reg   [0:0] icmp_ln64_reg_1180_pp1_iter33_reg;
reg   [0:0] icmp_ln64_reg_1180_pp1_iter34_reg;
reg   [0:0] icmp_ln64_reg_1180_pp1_iter35_reg;
reg   [0:0] icmp_ln64_reg_1180_pp1_iter36_reg;
reg   [0:0] icmp_ln64_reg_1180_pp1_iter37_reg;
reg   [0:0] icmp_ln64_reg_1180_pp1_iter38_reg;
reg   [0:0] icmp_ln64_reg_1180_pp1_iter39_reg;
reg   [0:0] icmp_ln64_reg_1180_pp1_iter40_reg;
reg   [0:0] icmp_ln64_reg_1180_pp1_iter41_reg;
reg   [0:0] icmp_ln64_reg_1180_pp1_iter42_reg;
reg   [0:0] icmp_ln64_reg_1180_pp1_iter43_reg;
reg   [0:0] icmp_ln64_reg_1180_pp1_iter44_reg;
reg   [0:0] icmp_ln64_reg_1180_pp1_iter45_reg;
wire   [30:0] add_ln64_fu_891_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [63:0] p_cast5_fu_907_p1;
reg   [63:0] p_cast5_reg_1189;
reg   [63:0] p_cast5_reg_1189_pp1_iter1_reg;
reg   [63:0] p_cast5_reg_1189_pp1_iter2_reg;
reg   [63:0] p_cast5_reg_1189_pp1_iter3_reg;
reg   [63:0] p_cast5_reg_1189_pp1_iter4_reg;
reg   [63:0] p_cast5_reg_1189_pp1_iter5_reg;
reg   [63:0] p_cast5_reg_1189_pp1_iter6_reg;
reg   [63:0] p_cast5_reg_1189_pp1_iter7_reg;
reg   [63:0] p_cast5_reg_1189_pp1_iter8_reg;
reg   [63:0] p_cast5_reg_1189_pp1_iter9_reg;
reg   [63:0] p_cast5_reg_1189_pp1_iter10_reg;
reg   [63:0] p_cast5_reg_1189_pp1_iter11_reg;
reg   [63:0] p_cast5_reg_1189_pp1_iter12_reg;
reg   [63:0] p_cast5_reg_1189_pp1_iter13_reg;
reg   [63:0] p_cast5_reg_1189_pp1_iter14_reg;
reg   [63:0] p_cast5_reg_1189_pp1_iter15_reg;
reg   [63:0] p_cast5_reg_1189_pp1_iter16_reg;
reg   [63:0] p_cast5_reg_1189_pp1_iter17_reg;
reg   [63:0] p_cast5_reg_1189_pp1_iter18_reg;
reg   [63:0] p_cast5_reg_1189_pp1_iter19_reg;
reg   [63:0] p_cast5_reg_1189_pp1_iter20_reg;
reg   [63:0] p_cast5_reg_1189_pp1_iter21_reg;
reg   [63:0] p_cast5_reg_1189_pp1_iter22_reg;
reg   [63:0] p_cast5_reg_1189_pp1_iter23_reg;
reg   [63:0] line_buffer_0_2_load_2_reg_1200;
reg    ap_enable_reg_pp1_iter1;
reg   [63:0] line_buffer_0_2_load_2_reg_1200_pp1_iter2_reg;
wire   [63:0] grp_fu_513_p2;
reg   [63:0] mul_reg_1206;
wire   [63:0] grp_fu_518_p2;
reg   [63:0] mul_0_1_reg_1211;
reg   [63:0] mul_0_1_reg_1211_pp1_iter6_reg;
reg   [63:0] mul_0_1_reg_1211_pp1_iter7_reg;
reg   [63:0] mul_0_1_reg_1211_pp1_iter8_reg;
wire   [63:0] grp_fu_523_p2;
reg   [63:0] mul_0_2_reg_1216;
reg   [63:0] mul_0_2_reg_1216_pp1_iter7_reg;
reg   [63:0] mul_0_2_reg_1216_pp1_iter8_reg;
reg   [63:0] mul_0_2_reg_1216_pp1_iter9_reg;
reg   [63:0] mul_0_2_reg_1216_pp1_iter10_reg;
reg   [63:0] mul_0_2_reg_1216_pp1_iter11_reg;
reg   [63:0] mul_0_2_reg_1216_pp1_iter12_reg;
wire   [63:0] grp_fu_472_p2;
reg   [63:0] sum_s_reg_1221;
wire   [63:0] grp_fu_477_p2;
reg   [63:0] sum_18_0_1_reg_1231;
reg   [63:0] line_buffer_1_2_load_3_reg_1236;
reg    ap_enable_reg_pp1_iter13;
reg   [63:0] line_buffer_1_2_load_3_reg_1236_pp1_iter14_reg;
wire   [63:0] grp_fu_481_p2;
reg   [63:0] sum_18_0_2_reg_1242;
wire   [63:0] grp_fu_527_p2;
reg   [63:0] mul_1_reg_1247;
wire   [63:0] grp_fu_532_p2;
reg   [63:0] mul_1_1_reg_1252;
reg   [63:0] mul_1_1_reg_1252_pp1_iter18_reg;
reg   [63:0] mul_1_1_reg_1252_pp1_iter19_reg;
reg   [63:0] mul_1_1_reg_1252_pp1_iter20_reg;
wire   [63:0] grp_fu_537_p2;
reg   [63:0] mul_1_2_reg_1257;
reg   [63:0] mul_1_2_reg_1257_pp1_iter19_reg;
reg   [63:0] mul_1_2_reg_1257_pp1_iter20_reg;
reg   [63:0] mul_1_2_reg_1257_pp1_iter21_reg;
reg   [63:0] mul_1_2_reg_1257_pp1_iter22_reg;
reg   [63:0] mul_1_2_reg_1257_pp1_iter23_reg;
reg   [63:0] mul_1_2_reg_1257_pp1_iter24_reg;
wire   [63:0] grp_fu_485_p2;
reg   [63:0] sum_18_1_reg_1262;
wire   [63:0] grp_fu_489_p2;
reg   [63:0] sum_18_1_1_reg_1272;
reg   [63:0] line_buffer_2_2_load_3_reg_1277;
reg    ap_enable_reg_pp1_iter25;
reg   [63:0] line_buffer_2_2_load_3_reg_1277_pp1_iter26_reg;
wire   [63:0] grp_fu_493_p2;
reg   [63:0] sum_18_1_2_reg_1283;
wire   [63:0] grp_fu_541_p2;
reg   [63:0] mul_2_reg_1288;
wire   [63:0] grp_fu_546_p2;
reg   [63:0] mul_2_1_reg_1293;
reg   [63:0] mul_2_1_reg_1293_pp1_iter30_reg;
reg   [63:0] mul_2_1_reg_1293_pp1_iter31_reg;
reg   [63:0] mul_2_1_reg_1293_pp1_iter32_reg;
wire   [63:0] grp_fu_551_p2;
reg   [63:0] mul_2_2_reg_1298;
reg   [63:0] mul_2_2_reg_1298_pp1_iter31_reg;
reg   [63:0] mul_2_2_reg_1298_pp1_iter32_reg;
reg   [63:0] mul_2_2_reg_1298_pp1_iter33_reg;
reg   [63:0] mul_2_2_reg_1298_pp1_iter34_reg;
reg   [63:0] mul_2_2_reg_1298_pp1_iter35_reg;
reg   [63:0] mul_2_2_reg_1298_pp1_iter36_reg;
wire   [63:0] grp_fu_497_p2;
reg   [63:0] sum_18_2_reg_1303;
wire   [63:0] grp_fu_501_p2;
reg   [63:0] sum_18_2_1_reg_1308;
wire   [63:0] grp_fu_505_p2;
reg   [63:0] sum_18_2_2_reg_1313;
wire   [63:0] grp_fu_509_p2;
reg   [63:0] sum_reg_1318;
reg   [63:0] sum_reg_1318_pp1_iter45_reg;
wire   [4:0] add_ln41_fu_962_p2;
wire    ap_CS_fsm_state55;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_flush_enable;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg    ap_enable_reg_pp1_iter4;
reg    ap_enable_reg_pp1_iter5;
reg    ap_enable_reg_pp1_iter6;
reg    ap_enable_reg_pp1_iter7;
reg    ap_enable_reg_pp1_iter8;
reg    ap_enable_reg_pp1_iter9;
reg    ap_enable_reg_pp1_iter10;
reg    ap_enable_reg_pp1_iter11;
reg    ap_enable_reg_pp1_iter12;
reg    ap_enable_reg_pp1_iter14;
reg    ap_enable_reg_pp1_iter15;
reg    ap_enable_reg_pp1_iter16;
reg    ap_enable_reg_pp1_iter17;
reg    ap_enable_reg_pp1_iter18;
reg    ap_enable_reg_pp1_iter19;
reg    ap_enable_reg_pp1_iter20;
reg    ap_enable_reg_pp1_iter21;
reg    ap_enable_reg_pp1_iter22;
reg    ap_enable_reg_pp1_iter23;
reg    ap_enable_reg_pp1_iter24;
reg    ap_enable_reg_pp1_iter26;
reg    ap_condition_pp1_exit_iter25_state33;
reg    ap_enable_reg_pp1_iter27;
reg    ap_enable_reg_pp1_iter28;
reg    ap_enable_reg_pp1_iter29;
reg    ap_enable_reg_pp1_iter30;
reg    ap_enable_reg_pp1_iter31;
reg    ap_enable_reg_pp1_iter32;
reg    ap_enable_reg_pp1_iter33;
reg    ap_enable_reg_pp1_iter34;
reg    ap_enable_reg_pp1_iter35;
reg    ap_enable_reg_pp1_iter36;
reg    ap_enable_reg_pp1_iter37;
reg    ap_enable_reg_pp1_iter38;
reg    ap_enable_reg_pp1_iter39;
reg    ap_enable_reg_pp1_iter40;
reg    ap_enable_reg_pp1_iter41;
reg    ap_enable_reg_pp1_iter42;
reg    ap_enable_reg_pp1_iter43;
reg    ap_enable_reg_pp1_iter44;
reg    ap_enable_reg_pp1_iter45;
reg    ap_enable_reg_pp1_iter46;
reg   [8:0] indvar_flatten_reg_354;
reg   [4:0] num_ker_reg_365;
reg   [4:0] i_reg_376;
wire    ap_block_pp1_stage0;
reg   [63:0] ap_phi_mux_window_buffer_load_0_phi_fu_422_p4;
reg   [63:0] ap_phi_mux_window_buffer_load_1_phi_fu_443_p4;
reg   [63:0] ap_phi_mux_window_buffer_load_2_phi_fu_464_p4;
wire   [63:0] zext_ln40_28_fu_694_p1;
wire   [63:0] zext_ln40_29_fu_707_p1;
wire   [63:0] zext_ln40_30_fu_718_p1;
wire   [63:0] zext_ln40_31_fu_729_p1;
wire   [63:0] zext_ln40_32_fu_740_p1;
wire   [63:0] zext_ln40_33_fu_751_p1;
wire   [63:0] zext_ln40_34_fu_762_p1;
wire   [63:0] zext_ln40_35_fu_773_p1;
wire   [63:0] zext_ln40_36_fu_784_p1;
wire   [63:0] zext_ln40_37_fu_795_p1;
wire    ap_block_pp0_stage0;
wire    ap_block_pp1_stage0_01001;
wire   [31:0] shl_ln_fu_560_p3;
wire   [3:0] empty_fu_606_p1;
wire   [6:0] p_shl_fu_610_p3;
wire   [7:0] empty_45_fu_622_p0;
wire   [7:0] empty_45_fu_622_p1;
wire   [0:0] icmp_ln41_fu_640_p2;
wire   [4:0] add_ln40_36_fu_654_p2;
wire   [3:0] empty_51_fu_664_p1;
wire   [6:0] p_shl_mid1_fu_668_p3;
wire   [7:0] p_mid1_fu_680_p0;
wire   [7:0] p_mid1_fu_680_p1;
wire   [7:0] p_mid1_fu_680_p2;
wire   [7:0] empty_45_fu_622_p2;
wire   [7:0] select_ln40_14_fu_699_p3;
wire   [7:0] add_ln40_28_fu_712_p2;
wire   [7:0] add_ln40_29_fu_723_p2;
wire   [7:0] add_ln40_30_fu_734_p2;
wire   [7:0] add_ln40_31_fu_745_p2;
wire   [7:0] add_ln40_32_fu_756_p2;
wire   [7:0] add_ln40_33_fu_767_p2;
wire   [7:0] add_ln40_34_fu_778_p2;
wire   [7:0] add_ln40_35_fu_789_p2;
wire   [0:0] icmp_ln45_10_fu_800_p2;
wire   [0:0] icmp_ln45_11_fu_805_p2;
wire   [31:0] j_cast_fu_816_p1;
wire   [0:0] icmp_ln45_5_fu_843_p2;
wire   [0:0] icmp_ln45_fu_837_p2;
wire   [0:0] or_ln45_9_fu_848_p2;
wire   [0:0] or_ln45_10_fu_854_p2;
wire   [3:0] tmp_4_fu_867_p4;
wire   [31:0] b_cast_fu_882_p1;
wire   [4:0] empty_49_fu_901_p1;
wire   [4:0] empty_49_fu_901_p2;
wire   [63:0] bitcast_ln11_fu_912_p1;
wire   [10:0] tmp_fu_915_p4;
wire   [51:0] trunc_ln11_fu_925_p1;
wire   [0:0] icmp_ln11_5_fu_935_p2;
wire   [0:0] icmp_ln11_fu_929_p2;
wire   [0:0] or_ln11_fu_941_p2;
wire   [0:0] grp_fu_555_p2;
wire   [0:0] and_ln11_fu_947_p2;
wire    ap_block_pp1_stage0_00001;
reg   [7:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter13 = 1'b0;
#0 ap_enable_reg_pp1_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp1_iter6 = 1'b0;
#0 ap_enable_reg_pp1_iter7 = 1'b0;
#0 ap_enable_reg_pp1_iter8 = 1'b0;
#0 ap_enable_reg_pp1_iter9 = 1'b0;
#0 ap_enable_reg_pp1_iter10 = 1'b0;
#0 ap_enable_reg_pp1_iter11 = 1'b0;
#0 ap_enable_reg_pp1_iter12 = 1'b0;
#0 ap_enable_reg_pp1_iter14 = 1'b0;
#0 ap_enable_reg_pp1_iter15 = 1'b0;
#0 ap_enable_reg_pp1_iter16 = 1'b0;
#0 ap_enable_reg_pp1_iter17 = 1'b0;
#0 ap_enable_reg_pp1_iter18 = 1'b0;
#0 ap_enable_reg_pp1_iter19 = 1'b0;
#0 ap_enable_reg_pp1_iter20 = 1'b0;
#0 ap_enable_reg_pp1_iter21 = 1'b0;
#0 ap_enable_reg_pp1_iter22 = 1'b0;
#0 ap_enable_reg_pp1_iter23 = 1'b0;
#0 ap_enable_reg_pp1_iter24 = 1'b0;
#0 ap_enable_reg_pp1_iter26 = 1'b0;
#0 ap_enable_reg_pp1_iter27 = 1'b0;
#0 ap_enable_reg_pp1_iter28 = 1'b0;
#0 ap_enable_reg_pp1_iter29 = 1'b0;
#0 ap_enable_reg_pp1_iter30 = 1'b0;
#0 ap_enable_reg_pp1_iter31 = 1'b0;
#0 ap_enable_reg_pp1_iter32 = 1'b0;
#0 ap_enable_reg_pp1_iter33 = 1'b0;
#0 ap_enable_reg_pp1_iter34 = 1'b0;
#0 ap_enable_reg_pp1_iter35 = 1'b0;
#0 ap_enable_reg_pp1_iter36 = 1'b0;
#0 ap_enable_reg_pp1_iter37 = 1'b0;
#0 ap_enable_reg_pp1_iter38 = 1'b0;
#0 ap_enable_reg_pp1_iter39 = 1'b0;
#0 ap_enable_reg_pp1_iter40 = 1'b0;
#0 ap_enable_reg_pp1_iter41 = 1'b0;
#0 ap_enable_reg_pp1_iter42 = 1'b0;
#0 ap_enable_reg_pp1_iter43 = 1'b0;
#0 ap_enable_reg_pp1_iter44 = 1'b0;
#0 ap_enable_reg_pp1_iter45 = 1'b0;
#0 ap_enable_reg_pp1_iter46 = 1'b0;
end

CNN_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_line_buffebkb #(
    .DataWidth( 64 ),
    .AddressRange( 28 ),
    .AddressWidth( 5 ))
line_buffer_1_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_1_2_address0),
    .ce0(line_buffer_1_2_ce0),
    .q0(line_buffer_1_2_q0),
    .address1(line_buffer_1_2_address1),
    .ce1(line_buffer_1_2_ce1),
    .we1(line_buffer_1_2_we1),
    .d1(line_buffer_2_2_q0),
    .q1(line_buffer_1_2_q1)
);

CNN_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_line_buffecud #(
    .DataWidth( 64 ),
    .AddressRange( 28 ),
    .AddressWidth( 5 ))
line_buffer_0_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_0_2_address0),
    .ce0(line_buffer_0_2_ce0),
    .we0(line_buffer_0_2_we0),
    .d0(line_buffer_1_2_q0),
    .q0(line_buffer_0_2_q0),
    .address1(line_buffer_0_2_address1),
    .ce1(line_buffer_0_2_ce1),
    .q1(line_buffer_0_2_q1)
);

CNN_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_line_buffecud #(
    .DataWidth( 64 ),
    .AddressRange( 28 ),
    .AddressWidth( 5 ))
line_buffer_2_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_2_2_address0),
    .ce0(line_buffer_2_2_ce0),
    .we0(line_buffer_2_2_we0),
    .d0(line_buffer_2_2_d0),
    .q0(line_buffer_2_2_q0),
    .address1(line_buffer_2_2_address1),
    .ce1(line_buffer_2_2_ce1),
    .q1(line_buffer_2_2_q1)
);

CNN_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_bias_conv1 #(
    .DataWidth( 64 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
bias_conv1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bias_conv1_address0),
    .ce0(bias_conv1_ce0),
    .q0(bias_conv1_q0)
);

CNN_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_kernel_conv1 #(
    .DataWidth( 64 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
kernel_conv1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(kernel_conv1_address0),
    .ce0(kernel_conv1_ce0),
    .q0(kernel_conv1_q0),
    .address1(kernel_conv1_address1),
    .ce1(kernel_conv1_ce1),
    .q1(kernel_conv1_q1),
    .address2(kernel_conv1_address2),
    .ce2(kernel_conv1_ce2),
    .q2(kernel_conv1_q2),
    .address3(kernel_conv1_address3),
    .ce3(kernel_conv1_ce3),
    .q3(kernel_conv1_q3),
    .address4(kernel_conv1_address4),
    .ce4(kernel_conv1_ce4),
    .q4(kernel_conv1_q4),
    .address5(kernel_conv1_address5),
    .ce5(kernel_conv1_ce5),
    .q5(kernel_conv1_q5),
    .address6(kernel_conv1_address6),
    .ce6(kernel_conv1_ce6),
    .q6(kernel_conv1_q6),
    .address7(kernel_conv1_address7),
    .ce7(kernel_conv1_ce7),
    .q7(kernel_conv1_q7),
    .address8(kernel_conv1_address8),
    .ce8(kernel_conv1_ce8),
    .q8(kernel_conv1_q8)
);

CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dadd_64ns_64ns_64_4_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mul_reg_1206),
    .din1(64'd0),
    .ce(1'b1),
    .dout(grp_fu_472_p2)
);

CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dadd_64ns_64ns_64_4_full_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_s_reg_1221),
    .din1(mul_0_1_reg_1211_pp1_iter8_reg),
    .ce(1'b1),
    .dout(grp_fu_477_p2)
);

CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dadd_64ns_64ns_64_4_full_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_18_0_1_reg_1231),
    .din1(mul_0_2_reg_1216_pp1_iter12_reg),
    .ce(1'b1),
    .dout(grp_fu_481_p2)
);

CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dadd_64ns_64ns_64_4_full_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_18_0_2_reg_1242),
    .din1(mul_1_reg_1247),
    .ce(1'b1),
    .dout(grp_fu_485_p2)
);

CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dadd_64ns_64ns_64_4_full_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_18_1_reg_1262),
    .din1(mul_1_1_reg_1252_pp1_iter20_reg),
    .ce(1'b1),
    .dout(grp_fu_489_p2)
);

CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dadd_64ns_64ns_64_4_full_dsp_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_18_1_1_reg_1272),
    .din1(mul_1_2_reg_1257_pp1_iter24_reg),
    .ce(1'b1),
    .dout(grp_fu_493_p2)
);

CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dadd_64ns_64ns_64_4_full_dsp_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_18_1_2_reg_1283),
    .din1(mul_2_reg_1288),
    .ce(1'b1),
    .dout(grp_fu_497_p2)
);

CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dadd_64ns_64ns_64_4_full_dsp_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_18_2_reg_1303),
    .din1(mul_2_1_reg_1293_pp1_iter32_reg),
    .ce(1'b1),
    .dout(grp_fu_501_p2)
);

CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dadd_64ns_64ns_64_4_full_dsp_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_18_2_1_reg_1308),
    .din1(mul_2_2_reg_1298_pp1_iter36_reg),
    .ce(1'b1),
    .dout(grp_fu_505_p2)
);

CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dadd_64ns_64ns_64_4_full_dsp_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_18_2_2_reg_1313),
    .din1(bias_conv1_load_reg_1066),
    .ce(1'b1),
    .dout(grp_fu_509_p2)
);

CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dmul_64ns_64ns_64_4_max_dsp_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_mux_window_buffer_load_0_phi_fu_422_p4),
    .din1(kernel_conv1_load_reg_1071),
    .ce(1'b1),
    .dout(grp_fu_513_p2)
);

CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dmul_64ns_64ns_64_4_max_dsp_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(window_buffer_load_9_0_reg_409),
    .din1(kernel_conv1_load_1_reg_1076),
    .ce(1'b1),
    .dout(grp_fu_518_p2)
);

CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dmul_64ns_64ns_64_4_max_dsp_1_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(line_buffer_0_2_load_2_reg_1200_pp1_iter2_reg),
    .din1(kernel_conv1_load_2_reg_1081),
    .ce(1'b1),
    .dout(grp_fu_523_p2)
);

CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dmul_64ns_64ns_64_4_max_dsp_1_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_mux_window_buffer_load_1_phi_fu_443_p4),
    .din1(kernel_conv1_load_3_reg_1086),
    .ce(1'b1),
    .dout(grp_fu_527_p2)
);

CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dmul_64ns_64ns_64_4_max_dsp_1_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(window_buffer_load_9_1_reg_430),
    .din1(kernel_conv1_load_4_reg_1091),
    .ce(1'b1),
    .dout(grp_fu_532_p2)
);

CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dmul_64ns_64ns_64_4_max_dsp_1_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(line_buffer_1_2_load_3_reg_1236_pp1_iter14_reg),
    .din1(kernel_conv1_load_5_reg_1096),
    .ce(1'b1),
    .dout(grp_fu_537_p2)
);

CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dmul_64ns_64ns_64_4_max_dsp_1_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_mux_window_buffer_load_2_phi_fu_464_p4),
    .din1(kernel_conv1_load_6_reg_1101),
    .ce(1'b1),
    .dout(grp_fu_541_p2)
);

CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dmul_64ns_64ns_64_4_max_dsp_1_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(window_buffer_load_9_2_reg_451),
    .din1(kernel_conv1_load_7_reg_1106),
    .ce(1'b1),
    .dout(grp_fu_546_p2)
);

CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dmul_64ns_64ns_64_4_max_dsp_1_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(line_buffer_2_2_load_3_reg_1277_pp1_iter26_reg),
    .din1(kernel_conv1_load_8_reg_1111),
    .ce(1'b1),
    .dout(grp_fu_551_p2)
);

CNN_CNN_dcmp_64ns_64ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
CNN_dcmp_64ns_64ns_1_2_no_dsp_1_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_reg_1318),
    .din1(64'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_555_p2)
);

CNN_CNN_add_32ns_32ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
CNN_add_32ns_32ns_32_1_1_U21(
    .din0(shl_ln_fu_560_p3),
    .din1(32'd28),
    .dout(add_ln31_fu_568_p2)
);

CNN_CNN_add_32ns_32ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
CNN_add_32ns_32ns_32_1_1_U22(
    .din0(shl_ln_fu_560_p3),
    .din1(32'd27),
    .dout(sub13_fu_580_p2)
);

CNN_CNN_add_32ns_32ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
CNN_add_32ns_32ns_32_1_1_U23(
    .din0(shl_ln_fu_560_p3),
    .din1(32'd26),
    .dout(sub47_fu_586_p2)
);

CNN_CNN_add_8ns_8ns_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
CNN_add_8ns_8ns_8_1_1_U24(
    .din0(empty_45_fu_622_p0),
    .din1(empty_45_fu_622_p1),
    .dout(empty_45_fu_622_p2)
);

CNN_CNN_add_9ns_9ns_9_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 9 ))
CNN_add_9ns_9ns_9_1_1_U25(
    .din0(9'd1),
    .din1(indvar_flatten_reg_354),
    .dout(add_ln40_fu_634_p2)
);

CNN_CNN_add_5ns_5ns_5_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 5 ))
CNN_add_5ns_5ns_5_1_1_U26(
    .din0(5'd1),
    .din1(num_ker_reg_365),
    .dout(add_ln40_36_fu_654_p2)
);

CNN_CNN_add_8ns_8ns_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
CNN_add_8ns_8ns_8_1_1_U27(
    .din0(p_mid1_fu_680_p0),
    .din1(p_mid1_fu_680_p1),
    .dout(p_mid1_fu_680_p2)
);

CNN_CNN_add_8ns_8ns_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
CNN_add_8ns_8ns_8_1_1_U28(
    .din0(8'd1),
    .din1(select_ln40_14_fu_699_p3),
    .dout(add_ln40_28_fu_712_p2)
);

CNN_CNN_add_8ns_8ns_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
CNN_add_8ns_8ns_8_1_1_U29(
    .din0(8'd2),
    .din1(select_ln40_14_fu_699_p3),
    .dout(add_ln40_29_fu_723_p2)
);

CNN_CNN_add_8ns_8ns_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
CNN_add_8ns_8ns_8_1_1_U30(
    .din0(8'd3),
    .din1(select_ln40_14_fu_699_p3),
    .dout(add_ln40_30_fu_734_p2)
);

CNN_CNN_add_8ns_8ns_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
CNN_add_8ns_8ns_8_1_1_U31(
    .din0(8'd4),
    .din1(select_ln40_14_fu_699_p3),
    .dout(add_ln40_31_fu_745_p2)
);

CNN_CNN_add_8ns_8ns_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
CNN_add_8ns_8ns_8_1_1_U32(
    .din0(8'd5),
    .din1(select_ln40_14_fu_699_p3),
    .dout(add_ln40_32_fu_756_p2)
);

CNN_CNN_add_8ns_8ns_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
CNN_add_8ns_8ns_8_1_1_U33(
    .din0(8'd6),
    .din1(select_ln40_14_fu_699_p3),
    .dout(add_ln40_33_fu_767_p2)
);

CNN_CNN_add_8ns_8ns_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
CNN_add_8ns_8ns_8_1_1_U34(
    .din0(8'd7),
    .din1(select_ln40_14_fu_699_p3),
    .dout(add_ln40_34_fu_778_p2)
);

CNN_CNN_add_8ns_8ns_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
CNN_add_8ns_8ns_8_1_1_U35(
    .din0(8'd8),
    .din1(select_ln40_14_fu_699_p3),
    .dout(add_ln40_35_fu_789_p2)
);

CNN_CNN_add_5ns_5ns_5_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 5 ))
CNN_add_5ns_5ns_5_1_1_U36(
    .din0(j_reg_387),
    .din1(5'd1),
    .dout(add_ln42_fu_825_p2)
);

CNN_CNN_add_31ns_31ns_31_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
CNN_add_31ns_31ns_31_1_1_U37(
    .din0(b_reg_398),
    .din1(31'd1),
    .dout(add_ln64_fu_891_p2)
);

CNN_CNN_add_5ns_5ns_5_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 5 ))
CNN_add_5ns_5ns_5_1_1_U38(
    .din0(5'd2),
    .din1(empty_49_fu_901_p1),
    .dout(empty_49_fu_901_p2)
);

CNN_CNN_add_5ns_5ns_5_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 5 ))
CNN_add_5ns_5ns_5_1_1_U39(
    .din0(select_ln40_reg_1003),
    .din1(5'd1),
    .dout(add_ln41_fu_962_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln42_reg_972 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln42_reg_972 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp1_flush_enable)) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((cmp4827_reg_986 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter11 <= ap_enable_reg_pp1_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter12 <= ap_enable_reg_pp1_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter13 <= ap_enable_reg_pp1_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter14 <= ap_enable_reg_pp1_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter15 <= ap_enable_reg_pp1_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter16 <= ap_enable_reg_pp1_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter17 <= ap_enable_reg_pp1_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter18 <= ap_enable_reg_pp1_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter19 <= ap_enable_reg_pp1_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter20 <= ap_enable_reg_pp1_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter21 <= ap_enable_reg_pp1_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter22 <= ap_enable_reg_pp1_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter23 <= ap_enable_reg_pp1_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter24 <= ap_enable_reg_pp1_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter25 <= ap_enable_reg_pp1_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter25_state33)) begin
                ap_enable_reg_pp1_iter26 <= ap_enable_reg_pp1_iter24;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter26 <= ap_enable_reg_pp1_iter25;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter27 <= ap_enable_reg_pp1_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter28 <= ap_enable_reg_pp1_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter29 <= ap_enable_reg_pp1_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter30 <= ap_enable_reg_pp1_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter31 <= ap_enable_reg_pp1_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter32 <= ap_enable_reg_pp1_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter33 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter33 <= ap_enable_reg_pp1_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter34 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter34 <= ap_enable_reg_pp1_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter35 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter35 <= ap_enable_reg_pp1_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter36 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter36 <= ap_enable_reg_pp1_iter35;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter37 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter37 <= ap_enable_reg_pp1_iter36;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter38 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter38 <= ap_enable_reg_pp1_iter37;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter39 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter39 <= ap_enable_reg_pp1_iter38;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter40 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter40 <= ap_enable_reg_pp1_iter39;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter41 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter41 <= ap_enable_reg_pp1_iter40;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter42 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter42 <= ap_enable_reg_pp1_iter41;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter43 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter43 <= ap_enable_reg_pp1_iter42;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter44 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter44 <= ap_enable_reg_pp1_iter43;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter45 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter45 <= ap_enable_reg_pp1_iter44;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter46 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter46 <= ap_enable_reg_pp1_iter45;
        end else if (((cmp4827_reg_986 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_enable_reg_pp1_iter46 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((cmp4827_reg_986 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        b_reg_398 <= 31'd0;
    end else if (((icmp_ln64_fu_886_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        b_reg_398 <= add_ln64_fu_891_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        i_reg_376 <= add_ln41_fu_962_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_376 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        indvar_flatten_reg_354 <= add_ln40_reg_998;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_354 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_reg_972 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        j_reg_387 <= 5'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln42_5_fu_820_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_reg_387 <= add_ln42_fu_825_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        num_ker_reg_365 <= select_ln40_13_reg_1011;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        num_ker_reg_365 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp4827_reg_986 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        window_buffer_load_0_reg_419 <= line_buffer_0_2_q0;
    end else if (((icmp_ln64_reg_1180_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        window_buffer_load_0_reg_419 <= window_buffer_load_9_0_reg_409;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp4827_reg_986 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        window_buffer_load_1_reg_440 <= line_buffer_1_2_q0;
    end else if (((icmp_ln64_reg_1180_pp1_iter13_reg == 1'd0) & (ap_enable_reg_pp1_iter14 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        window_buffer_load_1_reg_440 <= window_buffer_load_9_1_reg_430;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp4827_reg_986 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        window_buffer_load_2_reg_461 <= line_buffer_2_2_q0;
    end else if (((icmp_ln64_reg_1180_pp1_iter25_reg == 1'd0) & (ap_enable_reg_pp1_iter26 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        window_buffer_load_2_reg_461 <= window_buffer_load_9_2_reg_451;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp4827_reg_986 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        window_buffer_load_9_0_reg_409 <= line_buffer_0_2_q1;
    end else if (((icmp_ln64_reg_1180_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        window_buffer_load_9_0_reg_409 <= line_buffer_0_2_load_2_reg_1200;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp4827_reg_986 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        window_buffer_load_9_1_reg_430 <= line_buffer_1_2_q1;
    end else if (((icmp_ln64_reg_1180_pp1_iter13_reg == 1'd0) & (ap_enable_reg_pp1_iter14 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        window_buffer_load_9_1_reg_430 <= line_buffer_1_2_load_3_reg_1236;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp4827_reg_986 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        window_buffer_load_9_2_reg_451 <= line_buffer_2_2_q1;
    end else if (((icmp_ln64_reg_1180_pp1_iter25_reg == 1'd0) & (ap_enable_reg_pp1_iter26 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        window_buffer_load_9_2_reg_451 <= line_buffer_2_2_load_3_reg_1277;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        add_ln31_reg_967 <= add_ln31_fu_568_p2;
        bitcast_ln49_reg_990 <= bitcast_ln49_fu_598_p1;
        cmp4827_reg_986 <= cmp4827_fu_592_p2;
        icmp_ln42_reg_972 <= icmp_ln42_fu_574_p2;
        sub13_reg_976 <= sub13_fu_580_p2;
        sub47_reg_981 <= sub47_fu_586_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln40_reg_998 <= add_ln40_fu_634_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        bias_conv1_load_reg_1066 <= bias_conv1_q0;
        kernel_conv1_load_1_reg_1076 <= kernel_conv1_q1;
        kernel_conv1_load_2_reg_1081 <= kernel_conv1_q2;
        kernel_conv1_load_3_reg_1086 <= kernel_conv1_q3;
        kernel_conv1_load_4_reg_1091 <= kernel_conv1_q4;
        kernel_conv1_load_5_reg_1096 <= kernel_conv1_q5;
        kernel_conv1_load_6_reg_1101 <= kernel_conv1_q6;
        kernel_conv1_load_7_reg_1106 <= kernel_conv1_q7;
        kernel_conv1_load_8_reg_1111 <= kernel_conv1_q8;
        kernel_conv1_load_reg_1071 <= kernel_conv1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln42_5_reg_1121 <= icmp_ln42_5_fu_820_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln64_reg_1180 <= icmp_ln64_fu_886_p2;
        icmp_ln64_reg_1180_pp1_iter1_reg <= icmp_ln64_reg_1180;
        p_cast5_reg_1189_pp1_iter1_reg[4 : 0] <= p_cast5_reg_1189[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        icmp_ln64_reg_1180_pp1_iter10_reg <= icmp_ln64_reg_1180_pp1_iter9_reg;
        icmp_ln64_reg_1180_pp1_iter11_reg <= icmp_ln64_reg_1180_pp1_iter10_reg;
        icmp_ln64_reg_1180_pp1_iter12_reg <= icmp_ln64_reg_1180_pp1_iter11_reg;
        icmp_ln64_reg_1180_pp1_iter13_reg <= icmp_ln64_reg_1180_pp1_iter12_reg;
        icmp_ln64_reg_1180_pp1_iter14_reg <= icmp_ln64_reg_1180_pp1_iter13_reg;
        icmp_ln64_reg_1180_pp1_iter15_reg <= icmp_ln64_reg_1180_pp1_iter14_reg;
        icmp_ln64_reg_1180_pp1_iter16_reg <= icmp_ln64_reg_1180_pp1_iter15_reg;
        icmp_ln64_reg_1180_pp1_iter17_reg <= icmp_ln64_reg_1180_pp1_iter16_reg;
        icmp_ln64_reg_1180_pp1_iter18_reg <= icmp_ln64_reg_1180_pp1_iter17_reg;
        icmp_ln64_reg_1180_pp1_iter19_reg <= icmp_ln64_reg_1180_pp1_iter18_reg;
        icmp_ln64_reg_1180_pp1_iter20_reg <= icmp_ln64_reg_1180_pp1_iter19_reg;
        icmp_ln64_reg_1180_pp1_iter21_reg <= icmp_ln64_reg_1180_pp1_iter20_reg;
        icmp_ln64_reg_1180_pp1_iter22_reg <= icmp_ln64_reg_1180_pp1_iter21_reg;
        icmp_ln64_reg_1180_pp1_iter23_reg <= icmp_ln64_reg_1180_pp1_iter22_reg;
        icmp_ln64_reg_1180_pp1_iter24_reg <= icmp_ln64_reg_1180_pp1_iter23_reg;
        icmp_ln64_reg_1180_pp1_iter25_reg <= icmp_ln64_reg_1180_pp1_iter24_reg;
        icmp_ln64_reg_1180_pp1_iter26_reg <= icmp_ln64_reg_1180_pp1_iter25_reg;
        icmp_ln64_reg_1180_pp1_iter27_reg <= icmp_ln64_reg_1180_pp1_iter26_reg;
        icmp_ln64_reg_1180_pp1_iter28_reg <= icmp_ln64_reg_1180_pp1_iter27_reg;
        icmp_ln64_reg_1180_pp1_iter29_reg <= icmp_ln64_reg_1180_pp1_iter28_reg;
        icmp_ln64_reg_1180_pp1_iter2_reg <= icmp_ln64_reg_1180_pp1_iter1_reg;
        icmp_ln64_reg_1180_pp1_iter30_reg <= icmp_ln64_reg_1180_pp1_iter29_reg;
        icmp_ln64_reg_1180_pp1_iter31_reg <= icmp_ln64_reg_1180_pp1_iter30_reg;
        icmp_ln64_reg_1180_pp1_iter32_reg <= icmp_ln64_reg_1180_pp1_iter31_reg;
        icmp_ln64_reg_1180_pp1_iter33_reg <= icmp_ln64_reg_1180_pp1_iter32_reg;
        icmp_ln64_reg_1180_pp1_iter34_reg <= icmp_ln64_reg_1180_pp1_iter33_reg;
        icmp_ln64_reg_1180_pp1_iter35_reg <= icmp_ln64_reg_1180_pp1_iter34_reg;
        icmp_ln64_reg_1180_pp1_iter36_reg <= icmp_ln64_reg_1180_pp1_iter35_reg;
        icmp_ln64_reg_1180_pp1_iter37_reg <= icmp_ln64_reg_1180_pp1_iter36_reg;
        icmp_ln64_reg_1180_pp1_iter38_reg <= icmp_ln64_reg_1180_pp1_iter37_reg;
        icmp_ln64_reg_1180_pp1_iter39_reg <= icmp_ln64_reg_1180_pp1_iter38_reg;
        icmp_ln64_reg_1180_pp1_iter3_reg <= icmp_ln64_reg_1180_pp1_iter2_reg;
        icmp_ln64_reg_1180_pp1_iter40_reg <= icmp_ln64_reg_1180_pp1_iter39_reg;
        icmp_ln64_reg_1180_pp1_iter41_reg <= icmp_ln64_reg_1180_pp1_iter40_reg;
        icmp_ln64_reg_1180_pp1_iter42_reg <= icmp_ln64_reg_1180_pp1_iter41_reg;
        icmp_ln64_reg_1180_pp1_iter43_reg <= icmp_ln64_reg_1180_pp1_iter42_reg;
        icmp_ln64_reg_1180_pp1_iter44_reg <= icmp_ln64_reg_1180_pp1_iter43_reg;
        icmp_ln64_reg_1180_pp1_iter45_reg <= icmp_ln64_reg_1180_pp1_iter44_reg;
        icmp_ln64_reg_1180_pp1_iter4_reg <= icmp_ln64_reg_1180_pp1_iter3_reg;
        icmp_ln64_reg_1180_pp1_iter5_reg <= icmp_ln64_reg_1180_pp1_iter4_reg;
        icmp_ln64_reg_1180_pp1_iter6_reg <= icmp_ln64_reg_1180_pp1_iter5_reg;
        icmp_ln64_reg_1180_pp1_iter7_reg <= icmp_ln64_reg_1180_pp1_iter6_reg;
        icmp_ln64_reg_1180_pp1_iter8_reg <= icmp_ln64_reg_1180_pp1_iter7_reg;
        icmp_ln64_reg_1180_pp1_iter9_reg <= icmp_ln64_reg_1180_pp1_iter8_reg;
        line_buffer_0_2_load_2_reg_1200_pp1_iter2_reg <= line_buffer_0_2_load_2_reg_1200;
        line_buffer_1_2_load_3_reg_1236_pp1_iter14_reg <= line_buffer_1_2_load_3_reg_1236;
        line_buffer_2_2_load_3_reg_1277_pp1_iter26_reg <= line_buffer_2_2_load_3_reg_1277;
        mul_0_1_reg_1211_pp1_iter6_reg <= mul_0_1_reg_1211;
        mul_0_1_reg_1211_pp1_iter7_reg <= mul_0_1_reg_1211_pp1_iter6_reg;
        mul_0_1_reg_1211_pp1_iter8_reg <= mul_0_1_reg_1211_pp1_iter7_reg;
        mul_0_2_reg_1216_pp1_iter10_reg <= mul_0_2_reg_1216_pp1_iter9_reg;
        mul_0_2_reg_1216_pp1_iter11_reg <= mul_0_2_reg_1216_pp1_iter10_reg;
        mul_0_2_reg_1216_pp1_iter12_reg <= mul_0_2_reg_1216_pp1_iter11_reg;
        mul_0_2_reg_1216_pp1_iter7_reg <= mul_0_2_reg_1216;
        mul_0_2_reg_1216_pp1_iter8_reg <= mul_0_2_reg_1216_pp1_iter7_reg;
        mul_0_2_reg_1216_pp1_iter9_reg <= mul_0_2_reg_1216_pp1_iter8_reg;
        mul_1_1_reg_1252_pp1_iter18_reg <= mul_1_1_reg_1252;
        mul_1_1_reg_1252_pp1_iter19_reg <= mul_1_1_reg_1252_pp1_iter18_reg;
        mul_1_1_reg_1252_pp1_iter20_reg <= mul_1_1_reg_1252_pp1_iter19_reg;
        mul_1_2_reg_1257_pp1_iter19_reg <= mul_1_2_reg_1257;
        mul_1_2_reg_1257_pp1_iter20_reg <= mul_1_2_reg_1257_pp1_iter19_reg;
        mul_1_2_reg_1257_pp1_iter21_reg <= mul_1_2_reg_1257_pp1_iter20_reg;
        mul_1_2_reg_1257_pp1_iter22_reg <= mul_1_2_reg_1257_pp1_iter21_reg;
        mul_1_2_reg_1257_pp1_iter23_reg <= mul_1_2_reg_1257_pp1_iter22_reg;
        mul_1_2_reg_1257_pp1_iter24_reg <= mul_1_2_reg_1257_pp1_iter23_reg;
        mul_2_1_reg_1293_pp1_iter30_reg <= mul_2_1_reg_1293;
        mul_2_1_reg_1293_pp1_iter31_reg <= mul_2_1_reg_1293_pp1_iter30_reg;
        mul_2_1_reg_1293_pp1_iter32_reg <= mul_2_1_reg_1293_pp1_iter31_reg;
        mul_2_2_reg_1298_pp1_iter31_reg <= mul_2_2_reg_1298;
        mul_2_2_reg_1298_pp1_iter32_reg <= mul_2_2_reg_1298_pp1_iter31_reg;
        mul_2_2_reg_1298_pp1_iter33_reg <= mul_2_2_reg_1298_pp1_iter32_reg;
        mul_2_2_reg_1298_pp1_iter34_reg <= mul_2_2_reg_1298_pp1_iter33_reg;
        mul_2_2_reg_1298_pp1_iter35_reg <= mul_2_2_reg_1298_pp1_iter34_reg;
        mul_2_2_reg_1298_pp1_iter36_reg <= mul_2_2_reg_1298_pp1_iter35_reg;
        p_cast5_reg_1189_pp1_iter10_reg[4 : 0] <= p_cast5_reg_1189_pp1_iter9_reg[4 : 0];
        p_cast5_reg_1189_pp1_iter11_reg[4 : 0] <= p_cast5_reg_1189_pp1_iter10_reg[4 : 0];
        p_cast5_reg_1189_pp1_iter12_reg[4 : 0] <= p_cast5_reg_1189_pp1_iter11_reg[4 : 0];
        p_cast5_reg_1189_pp1_iter13_reg[4 : 0] <= p_cast5_reg_1189_pp1_iter12_reg[4 : 0];
        p_cast5_reg_1189_pp1_iter14_reg[4 : 0] <= p_cast5_reg_1189_pp1_iter13_reg[4 : 0];
        p_cast5_reg_1189_pp1_iter15_reg[4 : 0] <= p_cast5_reg_1189_pp1_iter14_reg[4 : 0];
        p_cast5_reg_1189_pp1_iter16_reg[4 : 0] <= p_cast5_reg_1189_pp1_iter15_reg[4 : 0];
        p_cast5_reg_1189_pp1_iter17_reg[4 : 0] <= p_cast5_reg_1189_pp1_iter16_reg[4 : 0];
        p_cast5_reg_1189_pp1_iter18_reg[4 : 0] <= p_cast5_reg_1189_pp1_iter17_reg[4 : 0];
        p_cast5_reg_1189_pp1_iter19_reg[4 : 0] <= p_cast5_reg_1189_pp1_iter18_reg[4 : 0];
        p_cast5_reg_1189_pp1_iter20_reg[4 : 0] <= p_cast5_reg_1189_pp1_iter19_reg[4 : 0];
        p_cast5_reg_1189_pp1_iter21_reg[4 : 0] <= p_cast5_reg_1189_pp1_iter20_reg[4 : 0];
        p_cast5_reg_1189_pp1_iter22_reg[4 : 0] <= p_cast5_reg_1189_pp1_iter21_reg[4 : 0];
        p_cast5_reg_1189_pp1_iter23_reg[4 : 0] <= p_cast5_reg_1189_pp1_iter22_reg[4 : 0];
        p_cast5_reg_1189_pp1_iter2_reg[4 : 0] <= p_cast5_reg_1189_pp1_iter1_reg[4 : 0];
        p_cast5_reg_1189_pp1_iter3_reg[4 : 0] <= p_cast5_reg_1189_pp1_iter2_reg[4 : 0];
        p_cast5_reg_1189_pp1_iter4_reg[4 : 0] <= p_cast5_reg_1189_pp1_iter3_reg[4 : 0];
        p_cast5_reg_1189_pp1_iter5_reg[4 : 0] <= p_cast5_reg_1189_pp1_iter4_reg[4 : 0];
        p_cast5_reg_1189_pp1_iter6_reg[4 : 0] <= p_cast5_reg_1189_pp1_iter5_reg[4 : 0];
        p_cast5_reg_1189_pp1_iter7_reg[4 : 0] <= p_cast5_reg_1189_pp1_iter6_reg[4 : 0];
        p_cast5_reg_1189_pp1_iter8_reg[4 : 0] <= p_cast5_reg_1189_pp1_iter7_reg[4 : 0];
        p_cast5_reg_1189_pp1_iter9_reg[4 : 0] <= p_cast5_reg_1189_pp1_iter8_reg[4 : 0];
        sum_reg_1318_pp1_iter45_reg <= sum_reg_1318;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln42_5_fu_820_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_cast4_reg_1130[4 : 0] <= j_cast4_fu_831_p1[4 : 0];
        line_buffer_1_2_addr_reg_1135 <= j_cast4_fu_831_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1180 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        line_buffer_0_2_load_2_reg_1200 <= line_buffer_0_2_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1180_pp1_iter12_reg == 1'd0) & (ap_enable_reg_pp1_iter13 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        line_buffer_1_2_load_3_reg_1236 <= line_buffer_1_2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1180_pp1_iter24_reg == 1'd0) & (ap_enable_reg_pp1_iter25 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        line_buffer_2_2_load_3_reg_1277 <= line_buffer_2_2_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1180_pp1_iter4_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        mul_0_1_reg_1211 <= grp_fu_518_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1180_pp1_iter5_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        mul_0_2_reg_1216 <= grp_fu_523_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1180_pp1_iter16_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        mul_1_1_reg_1252 <= grp_fu_532_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1180_pp1_iter17_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        mul_1_2_reg_1257 <= grp_fu_537_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1180_pp1_iter15_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        mul_1_reg_1247 <= grp_fu_527_p2;
        sum_18_0_2_reg_1242 <= grp_fu_481_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1180_pp1_iter28_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        mul_2_1_reg_1293 <= grp_fu_546_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1180_pp1_iter29_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        mul_2_2_reg_1298 <= grp_fu_551_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1180_pp1_iter27_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        mul_2_reg_1288 <= grp_fu_541_p2;
        sum_18_1_2_reg_1283 <= grp_fu_493_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1180_pp1_iter3_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        mul_reg_1206 <= grp_fu_513_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_reg_972 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        or_ln45_reg_1116 <= or_ln45_fu_810_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_fu_886_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        p_cast5_reg_1189[4 : 0] <= p_cast5_fu_907_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_fu_628_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        select_ln40_13_reg_1011 <= select_ln40_13_fu_686_p3;
        select_ln40_reg_1003 <= select_ln40_fu_646_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1180_pp1_iter11_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        sum_18_0_1_reg_1231 <= grp_fu_477_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1180_pp1_iter23_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        sum_18_1_1_reg_1272 <= grp_fu_489_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1180_pp1_iter19_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        sum_18_1_reg_1262 <= grp_fu_485_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1180_pp1_iter35_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        sum_18_2_1_reg_1308 <= grp_fu_501_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1180_pp1_iter39_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        sum_18_2_2_reg_1313 <= grp_fu_505_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1180_pp1_iter31_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        sum_18_2_reg_1303 <= grp_fu_497_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1180_pp1_iter43_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        sum_reg_1318 <= grp_fu_509_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1180_pp1_iter7_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        sum_s_reg_1221 <= grp_fu_472_p2;
    end
end

always @ (*) begin
    if ((icmp_ln42_5_fu_820_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter24 == 1'b0) & (ap_enable_reg_pp1_iter25 == 1'b1))) begin
        ap_condition_pp1_exit_iter25_state33 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter25_state33 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln64_fu_886_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_condition_pp1_flush_enable = 1'b1;
    end else begin
        ap_condition_pp1_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln40_fu_628_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter46 == 1'b0) & (ap_enable_reg_pp1_iter45 == 1'b0) & (ap_enable_reg_pp1_iter44 == 1'b0) & (ap_enable_reg_pp1_iter43 == 1'b0) & (ap_enable_reg_pp1_iter42 == 1'b0) & (ap_enable_reg_pp1_iter41 == 1'b0) & (ap_enable_reg_pp1_iter40 == 1'b0) & (ap_enable_reg_pp1_iter39 == 1'b0) & (ap_enable_reg_pp1_iter38 == 1'b0) & (ap_enable_reg_pp1_iter37 == 1'b0) & (ap_enable_reg_pp1_iter36 == 1'b0) & (ap_enable_reg_pp1_iter35 == 1'b0) & (ap_enable_reg_pp1_iter34 == 1'b0) & (ap_enable_reg_pp1_iter33 == 1'b0) & (ap_enable_reg_pp1_iter32 == 1'b0) & (ap_enable_reg_pp1_iter31 == 1'b0) & (ap_enable_reg_pp1_iter30 == 1'b0) & (ap_enable_reg_pp1_iter29 == 1'b0) & (ap_enable_reg_pp1_iter28 == 1'b0) & (ap_enable_reg_pp1_iter27 == 1'b0) & (ap_enable_reg_pp1_iter26 == 1'b0) & (ap_enable_reg_pp1_iter24 == 1'b0) & (ap_enable_reg_pp1_iter23 == 1'b0) & (ap_enable_reg_pp1_iter22 == 1'b0) & (ap_enable_reg_pp1_iter21 == 1'b0) & (ap_enable_reg_pp1_iter20 == 1'b0) & (ap_enable_reg_pp1_iter19 == 1'b0) & (ap_enable_reg_pp1_iter18 == 1'b0) & (ap_enable_reg_pp1_iter17 == 1'b0) & (ap_enable_reg_pp1_iter16 == 1'b0) & (ap_enable_reg_pp1_iter15 == 1'b0) & (ap_enable_reg_pp1_iter14 == 1'b0) & (ap_enable_reg_pp1_iter12 == 1'b0) & (ap_enable_reg_pp1_iter11 == 1'b0) & (ap_enable_reg_pp1_iter10 == 1'b0) & (ap_enable_reg_pp1_iter9 == 1'b0) & (ap_enable_reg_pp1_iter8 == 1'b0) & (ap_enable_reg_pp1_iter7 == 1'b0) & (ap_enable_reg_pp1_iter6 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter25 == 1'b0) & (ap_enable_reg_pp1_iter13 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (icmp_ln64_reg_1180_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        ap_phi_mux_window_buffer_load_0_phi_fu_422_p4 = window_buffer_load_9_0_reg_409;
    end else begin
        ap_phi_mux_window_buffer_load_0_phi_fu_422_p4 = window_buffer_load_0_reg_419;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (icmp_ln64_reg_1180_pp1_iter13_reg == 1'd0) & (ap_enable_reg_pp1_iter14 == 1'b1))) begin
        ap_phi_mux_window_buffer_load_1_phi_fu_443_p4 = window_buffer_load_9_1_reg_430;
    end else begin
        ap_phi_mux_window_buffer_load_1_phi_fu_443_p4 = window_buffer_load_1_reg_440;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (icmp_ln64_reg_1180_pp1_iter25_reg == 1'd0) & (ap_enable_reg_pp1_iter26 == 1'b1))) begin
        ap_phi_mux_window_buffer_load_2_phi_fu_464_p4 = window_buffer_load_9_2_reg_451;
    end else begin
        ap_phi_mux_window_buffer_load_2_phi_fu_464_p4 = window_buffer_load_2_reg_461;
    end
end

always @ (*) begin
    if (((icmp_ln40_fu_628_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bias_conv1_ce0 = 1'b1;
    end else begin
        bias_conv1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_conv1_ce0 = 1'b1;
    end else begin
        kernel_conv1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_conv1_ce1 = 1'b1;
    end else begin
        kernel_conv1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_conv1_ce2 = 1'b1;
    end else begin
        kernel_conv1_ce2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_conv1_ce3 = 1'b1;
    end else begin
        kernel_conv1_ce3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_conv1_ce4 = 1'b1;
    end else begin
        kernel_conv1_ce4 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_conv1_ce5 = 1'b1;
    end else begin
        kernel_conv1_ce5 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_conv1_ce6 = 1'b1;
    end else begin
        kernel_conv1_ce6 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_conv1_ce7 = 1'b1;
    end else begin
        kernel_conv1_ce7 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_conv1_ce8 = 1'b1;
    end else begin
        kernel_conv1_ce8 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        line_buffer_0_2_address0 = 5'd0;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_0_2_address0 = j_cast4_reg_1130;
    end else begin
        line_buffer_0_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        line_buffer_0_2_address1 = p_cast5_fu_907_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        line_buffer_0_2_address1 = 5'd1;
    end else begin
        line_buffer_0_2_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        line_buffer_0_2_ce0 = 1'b1;
    end else begin
        line_buffer_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        line_buffer_0_2_ce1 = 1'b1;
    end else begin
        line_buffer_0_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln42_5_reg_1121 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_0_2_we0 = 1'b1;
    end else begin
        line_buffer_0_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter12 == 1'b1))) begin
        line_buffer_1_2_address0 = p_cast5_reg_1189_pp1_iter11_reg;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        line_buffer_1_2_address0 = 5'd0;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_1_2_address0 = j_cast4_fu_831_p1;
    end else begin
        line_buffer_1_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        line_buffer_1_2_address1 = 5'd1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_1_2_address1 = line_buffer_1_2_addr_reg_1135;
    end else begin
        line_buffer_1_2_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp1_iter12 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        line_buffer_1_2_ce0 = 1'b1;
    end else begin
        line_buffer_1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        line_buffer_1_2_ce1 = 1'b1;
    end else begin
        line_buffer_1_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln42_5_reg_1121 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_1_2_we1 = 1'b1;
    end else begin
        line_buffer_1_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        line_buffer_2_2_address0 = 5'd0;
    end else if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln42_5_fu_820_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_2_2_address0 = j_cast4_fu_831_p1;
    end else begin
        line_buffer_2_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter24 == 1'b1))) begin
        line_buffer_2_2_address1 = p_cast5_reg_1189_pp1_iter23_reg;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        line_buffer_2_2_address1 = 5'd1;
    end else begin
        line_buffer_2_2_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln42_5_fu_820_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        line_buffer_2_2_ce0 = 1'b1;
    end else begin
        line_buffer_2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((ap_enable_reg_pp1_iter24 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        line_buffer_2_2_ce1 = 1'b1;
    end else begin
        line_buffer_2_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln42_5_fu_820_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_2_2_we0 = 1'b1;
    end else begin
        line_buffer_2_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_1180_pp1_iter45_reg == 1'd0) & (ap_enable_reg_pp1_iter46 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        output_conv1_ap_vld = 1'b1;
    end else begin
        output_conv1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln40_fu_628_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln42_reg_972 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln42_5_fu_820_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln42_5_fu_820_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln52_fu_876_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((cmp4827_reg_986 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter26 == 1'b0) & (ap_enable_reg_pp1_iter24 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter25 == 1'b1)) & ~((ap_enable_reg_pp1_iter45 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter46 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter45 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter46 == 1'b1)) | ((ap_enable_reg_pp1_iter26 == 1'b0) & (ap_enable_reg_pp1_iter24 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter25 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln11_fu_947_p2 = (or_ln11_fu_941_p2 & grp_fu_555_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp1_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp1_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp1_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp1_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp1_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp1_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp1_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp1_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp1_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp1_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp1_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp1_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp1_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp1_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp1_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp1_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp1_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp1_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp1_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp1_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp1_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp1_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp1_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp1_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp1_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp1_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp1_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp1_stage0_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp1_stage0_iter35 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp1_stage0_iter36 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp1_stage0_iter37 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp1_stage0_iter38 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp1_stage0_iter39 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp1_stage0_iter40 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp1_stage0_iter41 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp1_stage0_iter42 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp1_stage0_iter43 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp1_stage0_iter44 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp1_stage0_iter45 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp1_stage0_iter46 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign b_cast_fu_882_p1 = b_reg_398;

assign bias_conv1_address0 = zext_ln40_28_fu_694_p1;

assign bitcast_ln11_fu_912_p1 = sum_reg_1318_pp1_iter45_reg;

assign bitcast_ln49_fu_598_p1 = p_read;

assign cmp4827_fu_592_p2 = (($signed(sub47_fu_586_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign empty_45_fu_622_p0 = num_ker_reg_365;

assign empty_45_fu_622_p1 = p_shl_fu_610_p3;

assign empty_49_fu_901_p1 = b_reg_398[4:0];

assign empty_51_fu_664_p1 = add_ln40_36_fu_654_p2[3:0];

assign empty_fu_606_p1 = num_ker_reg_365[3:0];

assign icmp_ln11_5_fu_935_p2 = ((trunc_ln11_fu_925_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln11_fu_929_p2 = ((tmp_fu_915_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_628_p2 = ((indvar_flatten_reg_354 == 9'd480) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_640_p2 = ((i_reg_376 == 5'd30) ? 1'b1 : 1'b0);

assign icmp_ln42_5_fu_820_p2 = ((j_cast_fu_816_p1 == add_ln31_reg_967) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_574_p2 = (($signed(add_ln31_fu_568_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln45_10_fu_800_p2 = ((select_ln40_reg_1003 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln45_11_fu_805_p2 = ((select_ln40_reg_1003 == 5'd29) ? 1'b1 : 1'b0);

assign icmp_ln45_5_fu_843_p2 = ((j_cast_fu_816_p1 == sub13_reg_976) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_837_p2 = ((j_reg_387 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_876_p2 = ((tmp_4_fu_867_p4 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln64_fu_886_p2 = ((b_cast_fu_882_p1 == sub47_reg_981) ? 1'b1 : 1'b0);

assign j_cast4_fu_831_p1 = j_reg_387;

assign j_cast_fu_816_p1 = j_reg_387;

assign kernel_conv1_address0 = zext_ln40_29_fu_707_p1;

assign kernel_conv1_address1 = zext_ln40_30_fu_718_p1;

assign kernel_conv1_address2 = zext_ln40_31_fu_729_p1;

assign kernel_conv1_address3 = zext_ln40_32_fu_740_p1;

assign kernel_conv1_address4 = zext_ln40_33_fu_751_p1;

assign kernel_conv1_address5 = zext_ln40_34_fu_762_p1;

assign kernel_conv1_address6 = zext_ln40_35_fu_773_p1;

assign kernel_conv1_address7 = zext_ln40_36_fu_784_p1;

assign kernel_conv1_address8 = zext_ln40_37_fu_795_p1;

assign line_buffer_2_2_d0 = ((or_ln45_10_fu_854_p2[0:0] === 1'b1) ? 64'd0 : bitcast_ln49_reg_990);

assign or_ln11_fu_941_p2 = (icmp_ln11_fu_929_p2 | icmp_ln11_5_fu_935_p2);

assign or_ln45_10_fu_854_p2 = (or_ln45_reg_1116 | or_ln45_9_fu_848_p2);

assign or_ln45_9_fu_848_p2 = (icmp_ln45_fu_837_p2 | icmp_ln45_5_fu_843_p2);

assign or_ln45_fu_810_p2 = (icmp_ln45_11_fu_805_p2 | icmp_ln45_10_fu_800_p2);

assign output_conv1 = ((and_ln11_fu_947_p2[0:0] === 1'b1) ? bitcast_ln11_fu_912_p1 : 64'd0);

assign p_cast5_fu_907_p1 = empty_49_fu_901_p2;

assign p_mid1_fu_680_p0 = add_ln40_36_fu_654_p2;

assign p_mid1_fu_680_p1 = p_shl_mid1_fu_668_p3;

assign p_shl_fu_610_p3 = {{empty_fu_606_p1}, {3'd0}};

assign p_shl_mid1_fu_668_p3 = {{empty_51_fu_664_p1}, {3'd0}};

assign select_ln40_13_fu_686_p3 = ((icmp_ln41_fu_640_p2[0:0] === 1'b1) ? add_ln40_36_fu_654_p2 : num_ker_reg_365);

assign select_ln40_14_fu_699_p3 = ((icmp_ln41_fu_640_p2[0:0] === 1'b1) ? p_mid1_fu_680_p2 : empty_45_fu_622_p2);

assign select_ln40_fu_646_p3 = ((icmp_ln41_fu_640_p2[0:0] === 1'b1) ? 5'd0 : i_reg_376);

assign shl_ln_fu_560_p3 = {{padding}, {1'd0}};

assign tmp_4_fu_867_p4 = {{select_ln40_reg_1003[4:1]}};

assign tmp_fu_915_p4 = {{bitcast_ln11_fu_912_p1[62:52]}};

assign trunc_ln11_fu_925_p1 = bitcast_ln11_fu_912_p1[51:0];

assign zext_ln40_28_fu_694_p1 = select_ln40_13_fu_686_p3;

assign zext_ln40_29_fu_707_p1 = select_ln40_14_fu_699_p3;

assign zext_ln40_30_fu_718_p1 = add_ln40_28_fu_712_p2;

assign zext_ln40_31_fu_729_p1 = add_ln40_29_fu_723_p2;

assign zext_ln40_32_fu_740_p1 = add_ln40_30_fu_734_p2;

assign zext_ln40_33_fu_751_p1 = add_ln40_31_fu_745_p2;

assign zext_ln40_34_fu_762_p1 = add_ln40_32_fu_756_p2;

assign zext_ln40_35_fu_773_p1 = add_ln40_33_fu_767_p2;

assign zext_ln40_36_fu_784_p1 = add_ln40_34_fu_778_p2;

assign zext_ln40_37_fu_795_p1 = add_ln40_35_fu_789_p2;

always @ (posedge ap_clk) begin
    j_cast4_reg_1130[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    p_cast5_reg_1189[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    p_cast5_reg_1189_pp1_iter1_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    p_cast5_reg_1189_pp1_iter2_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    p_cast5_reg_1189_pp1_iter3_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    p_cast5_reg_1189_pp1_iter4_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    p_cast5_reg_1189_pp1_iter5_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    p_cast5_reg_1189_pp1_iter6_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    p_cast5_reg_1189_pp1_iter7_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    p_cast5_reg_1189_pp1_iter8_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    p_cast5_reg_1189_pp1_iter9_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    p_cast5_reg_1189_pp1_iter10_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    p_cast5_reg_1189_pp1_iter11_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    p_cast5_reg_1189_pp1_iter12_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    p_cast5_reg_1189_pp1_iter13_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    p_cast5_reg_1189_pp1_iter14_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    p_cast5_reg_1189_pp1_iter15_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    p_cast5_reg_1189_pp1_iter16_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    p_cast5_reg_1189_pp1_iter17_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    p_cast5_reg_1189_pp1_iter18_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    p_cast5_reg_1189_pp1_iter19_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    p_cast5_reg_1189_pp1_iter20_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    p_cast5_reg_1189_pp1_iter21_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    p_cast5_reg_1189_pp1_iter22_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    p_cast5_reg_1189_pp1_iter23_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //CNN_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s
