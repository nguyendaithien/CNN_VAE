// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module CNN_convolution_double_double_double_double_14_14_16_8_14_14_3_3_1_1_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read,
        output_conv2,
        output_conv2_ap_vld,
        padding
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_pp0_stage0 = 9'd16;
parameter    ap_ST_fsm_state7 = 9'd32;
parameter    ap_ST_fsm_state8 = 9'd64;
parameter    ap_ST_fsm_pp1_stage0 = 9'd128;
parameter    ap_ST_fsm_state56 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] p_read;
output  [63:0] output_conv2;
output   output_conv2_ap_vld;
input  [30:0] padding;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg output_conv2_ap_vld;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [2:0] bias_conv2_address0;
reg    bias_conv2_ce0;
wire   [63:0] bias_conv2_q0;
reg   [3:0] line_buffer_1_4_address0;
reg    line_buffer_1_4_ce0;
wire   [63:0] line_buffer_1_4_q0;
reg   [3:0] line_buffer_1_4_address1;
reg    line_buffer_1_4_ce1;
reg    line_buffer_1_4_we1;
wire   [63:0] line_buffer_1_4_q1;
reg   [3:0] line_buffer_0_4_address0;
reg    line_buffer_0_4_ce0;
reg    line_buffer_0_4_we0;
wire   [63:0] line_buffer_0_4_q0;
reg   [3:0] line_buffer_0_4_address1;
reg    line_buffer_0_4_ce1;
wire   [63:0] line_buffer_0_4_q1;
reg   [3:0] line_buffer_2_4_address0;
reg    line_buffer_2_4_ce0;
reg    line_buffer_2_4_we0;
wire   [63:0] line_buffer_2_4_d0;
wire   [63:0] line_buffer_2_4_q0;
reg   [3:0] line_buffer_2_4_address1;
reg    line_buffer_2_4_ce1;
wire   [63:0] line_buffer_2_4_q1;
wire   [10:0] kernel_conv2_address0;
reg    kernel_conv2_ce0;
wire   [63:0] kernel_conv2_q0;
wire   [10:0] kernel_conv2_address1;
reg    kernel_conv2_ce1;
wire   [63:0] kernel_conv2_q1;
wire   [10:0] kernel_conv2_address2;
reg    kernel_conv2_ce2;
wire   [63:0] kernel_conv2_q2;
wire   [10:0] kernel_conv2_address3;
reg    kernel_conv2_ce3;
wire   [63:0] kernel_conv2_q3;
wire   [10:0] kernel_conv2_address4;
reg    kernel_conv2_ce4;
wire   [63:0] kernel_conv2_q4;
wire   [10:0] kernel_conv2_address5;
reg    kernel_conv2_ce5;
wire   [63:0] kernel_conv2_q5;
wire   [10:0] kernel_conv2_address6;
reg    kernel_conv2_ce6;
wire   [63:0] kernel_conv2_q6;
wire   [10:0] kernel_conv2_address7;
reg    kernel_conv2_ce7;
wire   [63:0] kernel_conv2_q7;
wire   [10:0] kernel_conv2_address8;
reg    kernel_conv2_ce8;
wire   [63:0] kernel_conv2_q8;
reg   [3:0] j_reg_436;
reg   [30:0] b_reg_447;
reg   [63:0] window_buffer_load_13_0_reg_458;
wire    ap_block_state9_pp1_stage0_iter0;
wire    ap_block_state10_pp1_stage0_iter1;
wire    ap_block_state11_pp1_stage0_iter2;
wire    ap_block_state12_pp1_stage0_iter3;
wire    ap_block_state13_pp1_stage0_iter4;
wire    ap_block_state14_pp1_stage0_iter5;
wire    ap_block_state15_pp1_stage0_iter6;
wire    ap_block_state16_pp1_stage0_iter7;
wire    ap_block_state17_pp1_stage0_iter8;
wire    ap_block_state18_pp1_stage0_iter9;
wire    ap_block_state19_pp1_stage0_iter10;
wire    ap_block_state20_pp1_stage0_iter11;
wire    ap_block_state21_pp1_stage0_iter12;
wire    ap_block_state22_pp1_stage0_iter13;
wire    ap_block_state23_pp1_stage0_iter14;
wire    ap_block_state24_pp1_stage0_iter15;
wire    ap_block_state25_pp1_stage0_iter16;
wire    ap_block_state26_pp1_stage0_iter17;
wire    ap_block_state27_pp1_stage0_iter18;
wire    ap_block_state28_pp1_stage0_iter19;
wire    ap_block_state29_pp1_stage0_iter20;
wire    ap_block_state30_pp1_stage0_iter21;
wire    ap_block_state31_pp1_stage0_iter22;
wire    ap_block_state32_pp1_stage0_iter23;
wire    ap_block_state33_pp1_stage0_iter24;
wire    ap_block_state34_pp1_stage0_iter25;
wire    ap_block_state35_pp1_stage0_iter26;
wire    ap_block_state36_pp1_stage0_iter27;
wire    ap_block_state37_pp1_stage0_iter28;
wire    ap_block_state38_pp1_stage0_iter29;
wire    ap_block_state39_pp1_stage0_iter30;
wire    ap_block_state40_pp1_stage0_iter31;
wire    ap_block_state41_pp1_stage0_iter32;
wire    ap_block_state42_pp1_stage0_iter33;
wire    ap_block_state43_pp1_stage0_iter34;
wire    ap_block_state44_pp1_stage0_iter35;
wire    ap_block_state45_pp1_stage0_iter36;
wire    ap_block_state46_pp1_stage0_iter37;
wire    ap_block_state47_pp1_stage0_iter38;
wire    ap_block_state48_pp1_stage0_iter39;
wire    ap_block_state49_pp1_stage0_iter40;
wire    ap_block_state50_pp1_stage0_iter41;
wire    ap_block_state51_pp1_stage0_iter42;
wire    ap_block_state52_pp1_stage0_iter43;
wire    ap_block_state53_pp1_stage0_iter44;
wire    ap_block_state54_pp1_stage0_iter45;
wire    ap_block_state55_pp1_stage0_iter46;
wire    ap_block_pp1_stage0_11001;
reg   [63:0] window_buffer_load_0_reg_468;
reg   [63:0] window_buffer_load_13_1_reg_479;
reg   [63:0] window_buffer_load_1_reg_489;
reg   [63:0] window_buffer_load_13_2_reg_500;
reg   [63:0] window_buffer_load_2_reg_510;
wire   [31:0] add_ln31_fu_617_p2;
reg   [31:0] add_ln31_reg_1171;
wire   [0:0] icmp_ln42_fu_623_p2;
reg   [0:0] icmp_ln42_reg_1176;
wire   [31:0] sub13_fu_629_p2;
reg   [31:0] sub13_reg_1180;
wire   [31:0] sub47_fu_635_p2;
reg   [31:0] sub47_reg_1185;
wire   [0:0] cmp4827_fu_641_p2;
reg   [0:0] cmp4827_reg_1190;
wire   [63:0] bitcast_ln49_fu_647_p1;
reg   [63:0] bitcast_ln49_reg_1194;
wire   [2:0] empty_61_fu_656_p1;
reg   [2:0] empty_61_reg_1199;
wire    ap_CS_fsm_state2;
reg   [63:0] bias_conv2_load_reg_1210;
wire    ap_CS_fsm_state3;
wire   [11:0] add_ln39_fu_714_p2;
reg   [11:0] add_ln39_reg_1218;
wire   [0:0] icmp_ln40_fu_720_p2;
reg   [0:0] icmp_ln40_reg_1223;
wire   [0:0] icmp_ln39_fu_708_p2;
wire   [0:0] and_ln39_fu_802_p2;
reg   [0:0] and_ln39_reg_1230;
wire   [4:0] select_ln39_22_fu_808_p3;
reg   [4:0] select_ln39_22_reg_1236;
wire   [3:0] select_ln40_21_fu_952_p3;
reg   [3:0] select_ln40_21_reg_1291;
wire   [4:0] select_ln40_fu_970_p3;
reg   [4:0] select_ln40_reg_1296;
wire    ap_CS_fsm_state4;
wire   [63:0] select_ln40_19_fu_978_p3;
reg   [63:0] select_ln40_19_reg_1302;
reg   [63:0] kernel_conv2_load_reg_1307;
reg   [63:0] kernel_conv2_load_1_reg_1312;
reg   [63:0] kernel_conv2_load_2_reg_1317;
reg   [63:0] kernel_conv2_load_3_reg_1322;
reg   [63:0] kernel_conv2_load_4_reg_1327;
reg   [63:0] kernel_conv2_load_5_reg_1332;
reg   [63:0] kernel_conv2_load_6_reg_1337;
reg   [63:0] kernel_conv2_load_7_reg_1342;
reg   [63:0] kernel_conv2_load_8_reg_1347;
wire   [0:0] or_ln45_fu_1001_p2;
reg   [0:0] or_ln45_reg_1352;
wire   [0:0] icmp_ln42_7_fu_1011_p2;
reg   [0:0] icmp_ln42_7_reg_1357;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state5_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [3:0] add_ln42_fu_1016_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [63:0] j_cast5_fu_1022_p1;
reg   [63:0] j_cast5_reg_1366;
reg   [3:0] line_buffer_1_4_addr_reg_1371;
wire   [0:0] icmp_ln52_fu_1067_p2;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln64_fu_1077_p2;
reg   [0:0] icmp_ln64_reg_1416;
wire    ap_CS_fsm_pp1_stage0;
reg   [0:0] icmp_ln64_reg_1416_pp1_iter1_reg;
reg   [0:0] icmp_ln64_reg_1416_pp1_iter2_reg;
reg   [0:0] icmp_ln64_reg_1416_pp1_iter3_reg;
reg   [0:0] icmp_ln64_reg_1416_pp1_iter4_reg;
reg   [0:0] icmp_ln64_reg_1416_pp1_iter5_reg;
reg   [0:0] icmp_ln64_reg_1416_pp1_iter6_reg;
reg   [0:0] icmp_ln64_reg_1416_pp1_iter7_reg;
reg   [0:0] icmp_ln64_reg_1416_pp1_iter8_reg;
reg   [0:0] icmp_ln64_reg_1416_pp1_iter9_reg;
reg   [0:0] icmp_ln64_reg_1416_pp1_iter10_reg;
reg   [0:0] icmp_ln64_reg_1416_pp1_iter11_reg;
reg   [0:0] icmp_ln64_reg_1416_pp1_iter12_reg;
reg   [0:0] icmp_ln64_reg_1416_pp1_iter13_reg;
reg   [0:0] icmp_ln64_reg_1416_pp1_iter14_reg;
reg   [0:0] icmp_ln64_reg_1416_pp1_iter15_reg;
reg   [0:0] icmp_ln64_reg_1416_pp1_iter16_reg;
reg   [0:0] icmp_ln64_reg_1416_pp1_iter17_reg;
reg   [0:0] icmp_ln64_reg_1416_pp1_iter18_reg;
reg   [0:0] icmp_ln64_reg_1416_pp1_iter19_reg;
reg   [0:0] icmp_ln64_reg_1416_pp1_iter20_reg;
reg   [0:0] icmp_ln64_reg_1416_pp1_iter21_reg;
reg   [0:0] icmp_ln64_reg_1416_pp1_iter22_reg;
reg   [0:0] icmp_ln64_reg_1416_pp1_iter23_reg;
reg   [0:0] icmp_ln64_reg_1416_pp1_iter24_reg;
reg   [0:0] icmp_ln64_reg_1416_pp1_iter25_reg;
reg   [0:0] icmp_ln64_reg_1416_pp1_iter26_reg;
reg   [0:0] icmp_ln64_reg_1416_pp1_iter27_reg;
reg   [0:0] icmp_ln64_reg_1416_pp1_iter28_reg;
reg   [0:0] icmp_ln64_reg_1416_pp1_iter29_reg;
reg   [0:0] icmp_ln64_reg_1416_pp1_iter30_reg;
reg   [0:0] icmp_ln64_reg_1416_pp1_iter31_reg;
reg   [0:0] icmp_ln64_reg_1416_pp1_iter32_reg;
reg   [0:0] icmp_ln64_reg_1416_pp1_iter33_reg;
reg   [0:0] icmp_ln64_reg_1416_pp1_iter34_reg;
reg   [0:0] icmp_ln64_reg_1416_pp1_iter35_reg;
reg   [0:0] icmp_ln64_reg_1416_pp1_iter36_reg;
reg   [0:0] icmp_ln64_reg_1416_pp1_iter37_reg;
reg   [0:0] icmp_ln64_reg_1416_pp1_iter38_reg;
reg   [0:0] icmp_ln64_reg_1416_pp1_iter39_reg;
reg   [0:0] icmp_ln64_reg_1416_pp1_iter40_reg;
reg   [0:0] icmp_ln64_reg_1416_pp1_iter41_reg;
reg   [0:0] icmp_ln64_reg_1416_pp1_iter42_reg;
reg   [0:0] icmp_ln64_reg_1416_pp1_iter43_reg;
reg   [0:0] icmp_ln64_reg_1416_pp1_iter44_reg;
reg   [0:0] icmp_ln64_reg_1416_pp1_iter45_reg;
wire   [30:0] add_ln64_fu_1082_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [63:0] p_cast_fu_1098_p1;
reg   [63:0] p_cast_reg_1425;
reg   [63:0] p_cast_reg_1425_pp1_iter1_reg;
reg   [63:0] p_cast_reg_1425_pp1_iter2_reg;
reg   [63:0] p_cast_reg_1425_pp1_iter3_reg;
reg   [63:0] p_cast_reg_1425_pp1_iter4_reg;
reg   [63:0] p_cast_reg_1425_pp1_iter5_reg;
reg   [63:0] p_cast_reg_1425_pp1_iter6_reg;
reg   [63:0] p_cast_reg_1425_pp1_iter7_reg;
reg   [63:0] p_cast_reg_1425_pp1_iter8_reg;
reg   [63:0] p_cast_reg_1425_pp1_iter9_reg;
reg   [63:0] p_cast_reg_1425_pp1_iter10_reg;
reg   [63:0] p_cast_reg_1425_pp1_iter11_reg;
reg   [63:0] p_cast_reg_1425_pp1_iter12_reg;
reg   [63:0] p_cast_reg_1425_pp1_iter13_reg;
reg   [63:0] p_cast_reg_1425_pp1_iter14_reg;
reg   [63:0] p_cast_reg_1425_pp1_iter15_reg;
reg   [63:0] p_cast_reg_1425_pp1_iter16_reg;
reg   [63:0] p_cast_reg_1425_pp1_iter17_reg;
reg   [63:0] p_cast_reg_1425_pp1_iter18_reg;
reg   [63:0] p_cast_reg_1425_pp1_iter19_reg;
reg   [63:0] p_cast_reg_1425_pp1_iter20_reg;
reg   [63:0] p_cast_reg_1425_pp1_iter21_reg;
reg   [63:0] p_cast_reg_1425_pp1_iter22_reg;
reg   [63:0] p_cast_reg_1425_pp1_iter23_reg;
reg   [63:0] line_buffer_0_4_load_2_reg_1436;
reg    ap_enable_reg_pp1_iter1;
reg   [63:0] line_buffer_0_4_load_2_reg_1436_pp1_iter2_reg;
wire   [63:0] grp_fu_562_p2;
reg   [63:0] mul_reg_1442;
wire   [63:0] grp_fu_567_p2;
reg   [63:0] mul_0_1_reg_1447;
reg   [63:0] mul_0_1_reg_1447_pp1_iter6_reg;
reg   [63:0] mul_0_1_reg_1447_pp1_iter7_reg;
reg   [63:0] mul_0_1_reg_1447_pp1_iter8_reg;
wire   [63:0] grp_fu_572_p2;
reg   [63:0] mul_0_2_reg_1452;
reg   [63:0] mul_0_2_reg_1452_pp1_iter7_reg;
reg   [63:0] mul_0_2_reg_1452_pp1_iter8_reg;
reg   [63:0] mul_0_2_reg_1452_pp1_iter9_reg;
reg   [63:0] mul_0_2_reg_1452_pp1_iter10_reg;
reg   [63:0] mul_0_2_reg_1452_pp1_iter11_reg;
reg   [63:0] mul_0_2_reg_1452_pp1_iter12_reg;
wire   [63:0] grp_fu_521_p2;
reg   [63:0] sum_s_reg_1457;
wire   [63:0] grp_fu_526_p2;
reg   [63:0] sum_26_0_1_reg_1467;
reg   [63:0] line_buffer_1_4_load_3_reg_1472;
reg    ap_enable_reg_pp1_iter13;
reg   [63:0] line_buffer_1_4_load_3_reg_1472_pp1_iter14_reg;
wire   [63:0] grp_fu_530_p2;
reg   [63:0] sum_26_0_2_reg_1478;
wire   [63:0] grp_fu_576_p2;
reg   [63:0] mul_1_reg_1483;
wire   [63:0] grp_fu_581_p2;
reg   [63:0] mul_1_1_reg_1488;
reg   [63:0] mul_1_1_reg_1488_pp1_iter18_reg;
reg   [63:0] mul_1_1_reg_1488_pp1_iter19_reg;
reg   [63:0] mul_1_1_reg_1488_pp1_iter20_reg;
wire   [63:0] grp_fu_586_p2;
reg   [63:0] mul_1_2_reg_1493;
reg   [63:0] mul_1_2_reg_1493_pp1_iter19_reg;
reg   [63:0] mul_1_2_reg_1493_pp1_iter20_reg;
reg   [63:0] mul_1_2_reg_1493_pp1_iter21_reg;
reg   [63:0] mul_1_2_reg_1493_pp1_iter22_reg;
reg   [63:0] mul_1_2_reg_1493_pp1_iter23_reg;
reg   [63:0] mul_1_2_reg_1493_pp1_iter24_reg;
wire   [63:0] grp_fu_534_p2;
reg   [63:0] sum_26_1_reg_1498;
wire   [63:0] grp_fu_538_p2;
reg   [63:0] sum_26_1_1_reg_1508;
reg   [63:0] line_buffer_2_4_load_3_reg_1513;
reg    ap_enable_reg_pp1_iter25;
reg   [63:0] line_buffer_2_4_load_3_reg_1513_pp1_iter26_reg;
wire   [63:0] grp_fu_542_p2;
reg   [63:0] sum_26_1_2_reg_1519;
wire   [63:0] grp_fu_590_p2;
reg   [63:0] mul_2_reg_1524;
wire   [63:0] grp_fu_595_p2;
reg   [63:0] mul_2_1_reg_1529;
reg   [63:0] mul_2_1_reg_1529_pp1_iter30_reg;
reg   [63:0] mul_2_1_reg_1529_pp1_iter31_reg;
reg   [63:0] mul_2_1_reg_1529_pp1_iter32_reg;
wire   [63:0] grp_fu_600_p2;
reg   [63:0] mul_2_2_reg_1534;
reg   [63:0] mul_2_2_reg_1534_pp1_iter31_reg;
reg   [63:0] mul_2_2_reg_1534_pp1_iter32_reg;
reg   [63:0] mul_2_2_reg_1534_pp1_iter33_reg;
reg   [63:0] mul_2_2_reg_1534_pp1_iter34_reg;
reg   [63:0] mul_2_2_reg_1534_pp1_iter35_reg;
reg   [63:0] mul_2_2_reg_1534_pp1_iter36_reg;
wire   [63:0] grp_fu_546_p2;
reg   [63:0] sum_26_2_reg_1539;
wire   [63:0] grp_fu_550_p2;
reg   [63:0] sum_26_2_1_reg_1544;
wire   [63:0] grp_fu_554_p2;
reg   [63:0] sum_26_2_2_reg_1549;
wire   [63:0] grp_fu_558_p2;
reg   [63:0] sum_reg_1554;
reg   [63:0] sum_reg_1554_pp1_iter45_reg;
wire   [4:0] add_ln41_fu_1153_p2;
wire    ap_CS_fsm_state56;
wire   [8:0] select_ln40_22_fu_1164_p3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_flush_enable;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg    ap_enable_reg_pp1_iter4;
reg    ap_enable_reg_pp1_iter5;
reg    ap_enable_reg_pp1_iter6;
reg    ap_enable_reg_pp1_iter7;
reg    ap_enable_reg_pp1_iter8;
reg    ap_enable_reg_pp1_iter9;
reg    ap_enable_reg_pp1_iter10;
reg    ap_enable_reg_pp1_iter11;
reg    ap_enable_reg_pp1_iter12;
reg    ap_enable_reg_pp1_iter14;
reg    ap_enable_reg_pp1_iter15;
reg    ap_enable_reg_pp1_iter16;
reg    ap_enable_reg_pp1_iter17;
reg    ap_enable_reg_pp1_iter18;
reg    ap_enable_reg_pp1_iter19;
reg    ap_enable_reg_pp1_iter20;
reg    ap_enable_reg_pp1_iter21;
reg    ap_enable_reg_pp1_iter22;
reg    ap_enable_reg_pp1_iter23;
reg    ap_enable_reg_pp1_iter24;
reg    ap_enable_reg_pp1_iter26;
reg    ap_condition_pp1_exit_iter25_state34;
reg    ap_enable_reg_pp1_iter27;
reg    ap_enable_reg_pp1_iter28;
reg    ap_enable_reg_pp1_iter29;
reg    ap_enable_reg_pp1_iter30;
reg    ap_enable_reg_pp1_iter31;
reg    ap_enable_reg_pp1_iter32;
reg    ap_enable_reg_pp1_iter33;
reg    ap_enable_reg_pp1_iter34;
reg    ap_enable_reg_pp1_iter35;
reg    ap_enable_reg_pp1_iter36;
reg    ap_enable_reg_pp1_iter37;
reg    ap_enable_reg_pp1_iter38;
reg    ap_enable_reg_pp1_iter39;
reg    ap_enable_reg_pp1_iter40;
reg    ap_enable_reg_pp1_iter41;
reg    ap_enable_reg_pp1_iter42;
reg    ap_enable_reg_pp1_iter43;
reg    ap_enable_reg_pp1_iter44;
reg    ap_enable_reg_pp1_iter45;
reg    ap_enable_reg_pp1_iter46;
reg   [3:0] num_ker_reg_378;
reg   [11:0] indvar_flatten109_reg_390;
reg   [4:0] num_channel_reg_401;
reg   [8:0] indvar_flatten_reg_412;
reg   [4:0] i_reg_424;
wire    ap_block_pp1_stage0;
reg   [63:0] ap_phi_mux_window_buffer_load_0_phi_fu_471_p4;
reg   [63:0] ap_phi_mux_window_buffer_load_1_phi_fu_492_p4;
reg   [63:0] ap_phi_mux_window_buffer_load_2_phi_fu_513_p4;
wire   [63:0] zext_ln40_8_fu_651_p1;
wire   [63:0] zext_ln40_48_fu_822_p1;
wire   [63:0] zext_ln83_18_fu_859_p1;
wire   [63:0] zext_ln40_49_fu_870_p1;
wire   [63:0] zext_ln40_50_fu_881_p1;
wire   [63:0] zext_ln40_51_fu_892_p1;
wire   [63:0] zext_ln40_52_fu_903_p1;
wire   [63:0] zext_ln40_53_fu_914_p1;
wire   [63:0] zext_ln40_54_fu_925_p1;
wire   [63:0] zext_ln40_55_fu_936_p1;
wire   [63:0] zext_ln40_56_fu_947_p1;
wire    ap_block_pp0_stage0;
wire    ap_block_pp1_stage0_01001;
wire   [31:0] shl_ln_fu_609_p3;
wire   [3:0] empty_fu_664_p1;
wire   [6:0] p_shl_fu_668_p3;
wire   [7:0] add_ln83_15_fu_680_p0;
wire   [7:0] add_ln83_15_fu_680_p1;
wire   [7:0] add_ln83_15_fu_680_p2;
wire   [9:0] tmp_fu_690_p4;
wire   [10:0] add_ln83_fu_702_p0;
wire   [10:0] add_ln83_fu_702_p1;
wire   [4:0] add_ln39_14_fu_734_p2;
wire   [3:0] empty_68_fu_744_p1;
wire   [6:0] p_shl_mid1_fu_748_p3;
wire   [7:0] add_ln83_16_fu_760_p0;
wire   [7:0] add_ln83_16_fu_760_p1;
wire   [7:0] add_ln83_16_fu_760_p2;
wire   [7:0] select_ln39_19_fu_770_p3;
wire   [10:0] zext_ln83_16_fu_766_p1;
wire   [10:0] add_ln83_fu_702_p2;
wire   [0:0] icmp_ln41_fu_796_p2;
wire   [0:0] xor_ln39_fu_790_p2;
wire   [3:0] select_ln39_fu_726_p3;
wire   [3:0] add_ln40_fu_816_p2;
wire   [2:0] empty_69_fu_827_p1;
wire   [9:0] tmp_mid1_fu_831_p4;
wire   [10:0] add_ln83_17_fu_845_p0;
wire   [10:0] add_ln83_17_fu_845_p1;
wire   [10:0] add_ln83_17_fu_845_p2;
wire   [10:0] select_ln39_21_fu_782_p3;
wire   [10:0] select_ln40_20_fu_851_p3;
wire   [10:0] add_ln40_46_fu_864_p2;
wire   [10:0] add_ln40_47_fu_875_p2;
wire   [10:0] add_ln40_48_fu_886_p2;
wire   [10:0] add_ln40_49_fu_897_p2;
wire   [10:0] add_ln40_50_fu_908_p2;
wire   [10:0] add_ln40_51_fu_919_p2;
wire   [10:0] add_ln40_52_fu_930_p2;
wire   [10:0] add_ln40_53_fu_941_p2;
wire   [0:0] or_ln40_fu_966_p2;
wire   [63:0] select_ln39_20_fu_960_p3;
wire   [3:0] empty_62_fu_985_p1;
wire   [0:0] icmp_ln45_14_fu_989_p2;
wire   [0:0] icmp_ln45_15_fu_995_p2;
wire   [31:0] j_cast_fu_1007_p1;
wire   [0:0] icmp_ln45_7_fu_1034_p2;
wire   [0:0] icmp_ln45_fu_1028_p2;
wire   [0:0] or_ln45_13_fu_1039_p2;
wire   [0:0] or_ln45_14_fu_1045_p2;
wire   [3:0] tmp_6_fu_1058_p4;
wire   [31:0] b_cast_fu_1073_p1;
wire   [3:0] empty_66_fu_1092_p1;
wire   [3:0] empty_66_fu_1092_p2;
wire   [63:0] bitcast_ln11_fu_1103_p1;
wire   [10:0] tmp_1_fu_1106_p4;
wire   [51:0] trunc_ln11_fu_1116_p1;
wire   [0:0] icmp_ln11_7_fu_1126_p2;
wire   [0:0] icmp_ln11_fu_1120_p2;
wire   [0:0] or_ln11_fu_1132_p2;
wire   [0:0] grp_fu_604_p2;
wire   [0:0] and_ln11_fu_1138_p2;
wire   [8:0] add_ln40_54_fu_1158_p2;
wire    ap_block_pp1_stage0_00001;
reg   [8:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter13 = 1'b0;
#0 ap_enable_reg_pp1_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp1_iter6 = 1'b0;
#0 ap_enable_reg_pp1_iter7 = 1'b0;
#0 ap_enable_reg_pp1_iter8 = 1'b0;
#0 ap_enable_reg_pp1_iter9 = 1'b0;
#0 ap_enable_reg_pp1_iter10 = 1'b0;
#0 ap_enable_reg_pp1_iter11 = 1'b0;
#0 ap_enable_reg_pp1_iter12 = 1'b0;
#0 ap_enable_reg_pp1_iter14 = 1'b0;
#0 ap_enable_reg_pp1_iter15 = 1'b0;
#0 ap_enable_reg_pp1_iter16 = 1'b0;
#0 ap_enable_reg_pp1_iter17 = 1'b0;
#0 ap_enable_reg_pp1_iter18 = 1'b0;
#0 ap_enable_reg_pp1_iter19 = 1'b0;
#0 ap_enable_reg_pp1_iter20 = 1'b0;
#0 ap_enable_reg_pp1_iter21 = 1'b0;
#0 ap_enable_reg_pp1_iter22 = 1'b0;
#0 ap_enable_reg_pp1_iter23 = 1'b0;
#0 ap_enable_reg_pp1_iter24 = 1'b0;
#0 ap_enable_reg_pp1_iter26 = 1'b0;
#0 ap_enable_reg_pp1_iter27 = 1'b0;
#0 ap_enable_reg_pp1_iter28 = 1'b0;
#0 ap_enable_reg_pp1_iter29 = 1'b0;
#0 ap_enable_reg_pp1_iter30 = 1'b0;
#0 ap_enable_reg_pp1_iter31 = 1'b0;
#0 ap_enable_reg_pp1_iter32 = 1'b0;
#0 ap_enable_reg_pp1_iter33 = 1'b0;
#0 ap_enable_reg_pp1_iter34 = 1'b0;
#0 ap_enable_reg_pp1_iter35 = 1'b0;
#0 ap_enable_reg_pp1_iter36 = 1'b0;
#0 ap_enable_reg_pp1_iter37 = 1'b0;
#0 ap_enable_reg_pp1_iter38 = 1'b0;
#0 ap_enable_reg_pp1_iter39 = 1'b0;
#0 ap_enable_reg_pp1_iter40 = 1'b0;
#0 ap_enable_reg_pp1_iter41 = 1'b0;
#0 ap_enable_reg_pp1_iter42 = 1'b0;
#0 ap_enable_reg_pp1_iter43 = 1'b0;
#0 ap_enable_reg_pp1_iter44 = 1'b0;
#0 ap_enable_reg_pp1_iter45 = 1'b0;
#0 ap_enable_reg_pp1_iter46 = 1'b0;
end

CNN_convolution_double_double_double_double_14_14_16_8_14_14_3_3_1_1_s_bias_conv2 #(
    .DataWidth( 64 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
bias_conv2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bias_conv2_address0),
    .ce0(bias_conv2_ce0),
    .q0(bias_conv2_q0)
);

CNN_convolution_double_double_double_double_14_14_16_8_14_14_3_3_1_1_s_line_buffeeOg #(
    .DataWidth( 64 ),
    .AddressRange( 14 ),
    .AddressWidth( 4 ))
line_buffer_1_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_1_4_address0),
    .ce0(line_buffer_1_4_ce0),
    .q0(line_buffer_1_4_q0),
    .address1(line_buffer_1_4_address1),
    .ce1(line_buffer_1_4_ce1),
    .we1(line_buffer_1_4_we1),
    .d1(line_buffer_2_4_q0),
    .q1(line_buffer_1_4_q1)
);

CNN_convolution_double_double_double_double_14_14_16_8_14_14_3_3_1_1_s_line_buffefYi #(
    .DataWidth( 64 ),
    .AddressRange( 14 ),
    .AddressWidth( 4 ))
line_buffer_0_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_0_4_address0),
    .ce0(line_buffer_0_4_ce0),
    .we0(line_buffer_0_4_we0),
    .d0(line_buffer_1_4_q0),
    .q0(line_buffer_0_4_q0),
    .address1(line_buffer_0_4_address1),
    .ce1(line_buffer_0_4_ce1),
    .q1(line_buffer_0_4_q1)
);

CNN_convolution_double_double_double_double_14_14_16_8_14_14_3_3_1_1_s_line_buffefYi #(
    .DataWidth( 64 ),
    .AddressRange( 14 ),
    .AddressWidth( 4 ))
line_buffer_2_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_2_4_address0),
    .ce0(line_buffer_2_4_ce0),
    .we0(line_buffer_2_4_we0),
    .d0(line_buffer_2_4_d0),
    .q0(line_buffer_2_4_q0),
    .address1(line_buffer_2_4_address1),
    .ce1(line_buffer_2_4_ce1),
    .q1(line_buffer_2_4_q1)
);

CNN_convolution_double_double_double_double_14_14_16_8_14_14_3_3_1_1_s_kernel_conv2 #(
    .DataWidth( 64 ),
    .AddressRange( 1152 ),
    .AddressWidth( 11 ))
kernel_conv2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(kernel_conv2_address0),
    .ce0(kernel_conv2_ce0),
    .q0(kernel_conv2_q0),
    .address1(kernel_conv2_address1),
    .ce1(kernel_conv2_ce1),
    .q1(kernel_conv2_q1),
    .address2(kernel_conv2_address2),
    .ce2(kernel_conv2_ce2),
    .q2(kernel_conv2_q2),
    .address3(kernel_conv2_address3),
    .ce3(kernel_conv2_ce3),
    .q3(kernel_conv2_q3),
    .address4(kernel_conv2_address4),
    .ce4(kernel_conv2_ce4),
    .q4(kernel_conv2_q4),
    .address5(kernel_conv2_address5),
    .ce5(kernel_conv2_ce5),
    .q5(kernel_conv2_q5),
    .address6(kernel_conv2_address6),
    .ce6(kernel_conv2_ce6),
    .q6(kernel_conv2_q6),
    .address7(kernel_conv2_address7),
    .ce7(kernel_conv2_ce7),
    .q7(kernel_conv2_q7),
    .address8(kernel_conv2_address8),
    .ce8(kernel_conv2_ce8),
    .q8(kernel_conv2_q8)
);

CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dadd_64ns_64ns_64_4_full_dsp_1_U55(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mul_reg_1442),
    .din1(64'd0),
    .ce(1'b1),
    .dout(grp_fu_521_p2)
);

CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dadd_64ns_64ns_64_4_full_dsp_1_U56(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_s_reg_1457),
    .din1(mul_0_1_reg_1447_pp1_iter8_reg),
    .ce(1'b1),
    .dout(grp_fu_526_p2)
);

CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dadd_64ns_64ns_64_4_full_dsp_1_U57(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_26_0_1_reg_1467),
    .din1(mul_0_2_reg_1452_pp1_iter12_reg),
    .ce(1'b1),
    .dout(grp_fu_530_p2)
);

CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dadd_64ns_64ns_64_4_full_dsp_1_U58(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_26_0_2_reg_1478),
    .din1(mul_1_reg_1483),
    .ce(1'b1),
    .dout(grp_fu_534_p2)
);

CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dadd_64ns_64ns_64_4_full_dsp_1_U59(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_26_1_reg_1498),
    .din1(mul_1_1_reg_1488_pp1_iter20_reg),
    .ce(1'b1),
    .dout(grp_fu_538_p2)
);

CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dadd_64ns_64ns_64_4_full_dsp_1_U60(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_26_1_1_reg_1508),
    .din1(mul_1_2_reg_1493_pp1_iter24_reg),
    .ce(1'b1),
    .dout(grp_fu_542_p2)
);

CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dadd_64ns_64ns_64_4_full_dsp_1_U61(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_26_1_2_reg_1519),
    .din1(mul_2_reg_1524),
    .ce(1'b1),
    .dout(grp_fu_546_p2)
);

CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dadd_64ns_64ns_64_4_full_dsp_1_U62(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_26_2_reg_1539),
    .din1(mul_2_1_reg_1529_pp1_iter32_reg),
    .ce(1'b1),
    .dout(grp_fu_550_p2)
);

CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dadd_64ns_64ns_64_4_full_dsp_1_U63(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_26_2_1_reg_1544),
    .din1(mul_2_2_reg_1534_pp1_iter36_reg),
    .ce(1'b1),
    .dout(grp_fu_554_p2)
);

CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dadd_64ns_64ns_64_4_full_dsp_1_U64(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_26_2_2_reg_1549),
    .din1(select_ln40_19_reg_1302),
    .ce(1'b1),
    .dout(grp_fu_558_p2)
);

CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dmul_64ns_64ns_64_4_max_dsp_1_U65(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_mux_window_buffer_load_0_phi_fu_471_p4),
    .din1(kernel_conv2_load_reg_1307),
    .ce(1'b1),
    .dout(grp_fu_562_p2)
);

CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dmul_64ns_64ns_64_4_max_dsp_1_U66(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(window_buffer_load_13_0_reg_458),
    .din1(kernel_conv2_load_1_reg_1312),
    .ce(1'b1),
    .dout(grp_fu_567_p2)
);

CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dmul_64ns_64ns_64_4_max_dsp_1_U67(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(line_buffer_0_4_load_2_reg_1436_pp1_iter2_reg),
    .din1(kernel_conv2_load_2_reg_1317),
    .ce(1'b1),
    .dout(grp_fu_572_p2)
);

CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dmul_64ns_64ns_64_4_max_dsp_1_U68(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_mux_window_buffer_load_1_phi_fu_492_p4),
    .din1(kernel_conv2_load_3_reg_1322),
    .ce(1'b1),
    .dout(grp_fu_576_p2)
);

CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dmul_64ns_64ns_64_4_max_dsp_1_U69(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(window_buffer_load_13_1_reg_479),
    .din1(kernel_conv2_load_4_reg_1327),
    .ce(1'b1),
    .dout(grp_fu_581_p2)
);

CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dmul_64ns_64ns_64_4_max_dsp_1_U70(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(line_buffer_1_4_load_3_reg_1472_pp1_iter14_reg),
    .din1(kernel_conv2_load_5_reg_1332),
    .ce(1'b1),
    .dout(grp_fu_586_p2)
);

CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dmul_64ns_64ns_64_4_max_dsp_1_U71(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_mux_window_buffer_load_2_phi_fu_513_p4),
    .din1(kernel_conv2_load_6_reg_1337),
    .ce(1'b1),
    .dout(grp_fu_590_p2)
);

CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dmul_64ns_64ns_64_4_max_dsp_1_U72(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(window_buffer_load_13_2_reg_500),
    .din1(kernel_conv2_load_7_reg_1342),
    .ce(1'b1),
    .dout(grp_fu_595_p2)
);

CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CNN_dmul_64ns_64ns_64_4_max_dsp_1_U73(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(line_buffer_2_4_load_3_reg_1513_pp1_iter26_reg),
    .din1(kernel_conv2_load_8_reg_1347),
    .ce(1'b1),
    .dout(grp_fu_600_p2)
);

CNN_CNN_dcmp_64ns_64ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
CNN_dcmp_64ns_64ns_1_2_no_dsp_1_U74(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_reg_1554),
    .din1(64'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_604_p2)
);

CNN_CNN_add_32ns_32ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
CNN_add_32ns_32ns_32_1_1_U75(
    .din0(shl_ln_fu_609_p3),
    .din1(32'd14),
    .dout(add_ln31_fu_617_p2)
);

CNN_CNN_add_32ns_32ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
CNN_add_32ns_32ns_32_1_1_U76(
    .din0(shl_ln_fu_609_p3),
    .din1(32'd13),
    .dout(sub13_fu_629_p2)
);

CNN_CNN_add_32ns_32ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
CNN_add_32ns_32ns_32_1_1_U77(
    .din0(shl_ln_fu_609_p3),
    .din1(32'd12),
    .dout(sub47_fu_635_p2)
);

CNN_CNN_add_8ns_8ns_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
CNN_add_8ns_8ns_8_1_1_U78(
    .din0(add_ln83_15_fu_680_p0),
    .din1(add_ln83_15_fu_680_p1),
    .dout(add_ln83_15_fu_680_p2)
);

CNN_CNN_add_11ns_11ns_11_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 11 ))
CNN_add_11ns_11ns_11_1_1_U79(
    .din0(add_ln83_fu_702_p0),
    .din1(add_ln83_fu_702_p1),
    .dout(add_ln83_fu_702_p2)
);

CNN_CNN_add_12ns_12ns_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
CNN_add_12ns_12ns_12_1_1_U80(
    .din0(12'd1),
    .din1(indvar_flatten109_reg_390),
    .dout(add_ln39_fu_714_p2)
);

CNN_CNN_add_5ns_5ns_5_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 5 ))
CNN_add_5ns_5ns_5_1_1_U81(
    .din0(5'd1),
    .din1(num_channel_reg_401),
    .dout(add_ln39_14_fu_734_p2)
);

CNN_CNN_add_8ns_8ns_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
CNN_add_8ns_8ns_8_1_1_U82(
    .din0(add_ln83_16_fu_760_p0),
    .din1(add_ln83_16_fu_760_p1),
    .dout(add_ln83_16_fu_760_p2)
);

CNN_CNN_add_4ns_4ns_4_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 4 ))
CNN_add_4ns_4ns_4_1_1_U83(
    .din0(4'd1),
    .din1(select_ln39_fu_726_p3),
    .dout(add_ln40_fu_816_p2)
);

CNN_CNN_add_11ns_11ns_11_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 11 ))
CNN_add_11ns_11ns_11_1_1_U84(
    .din0(add_ln83_17_fu_845_p0),
    .din1(add_ln83_17_fu_845_p1),
    .dout(add_ln83_17_fu_845_p2)
);

CNN_CNN_add_11ns_11ns_11_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 11 ))
CNN_add_11ns_11ns_11_1_1_U85(
    .din0(11'd1),
    .din1(select_ln40_20_fu_851_p3),
    .dout(add_ln40_46_fu_864_p2)
);

CNN_CNN_add_11ns_11ns_11_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 11 ))
CNN_add_11ns_11ns_11_1_1_U86(
    .din0(11'd2),
    .din1(select_ln40_20_fu_851_p3),
    .dout(add_ln40_47_fu_875_p2)
);

CNN_CNN_add_11ns_11ns_11_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 11 ))
CNN_add_11ns_11ns_11_1_1_U87(
    .din0(11'd3),
    .din1(select_ln40_20_fu_851_p3),
    .dout(add_ln40_48_fu_886_p2)
);

CNN_CNN_add_11ns_11ns_11_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 11 ))
CNN_add_11ns_11ns_11_1_1_U88(
    .din0(11'd4),
    .din1(select_ln40_20_fu_851_p3),
    .dout(add_ln40_49_fu_897_p2)
);

CNN_CNN_add_11ns_11ns_11_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 11 ))
CNN_add_11ns_11ns_11_1_1_U89(
    .din0(11'd5),
    .din1(select_ln40_20_fu_851_p3),
    .dout(add_ln40_50_fu_908_p2)
);

CNN_CNN_add_11ns_11ns_11_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 11 ))
CNN_add_11ns_11ns_11_1_1_U90(
    .din0(11'd6),
    .din1(select_ln40_20_fu_851_p3),
    .dout(add_ln40_51_fu_919_p2)
);

CNN_CNN_add_11ns_11ns_11_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 11 ))
CNN_add_11ns_11ns_11_1_1_U91(
    .din0(11'd7),
    .din1(select_ln40_20_fu_851_p3),
    .dout(add_ln40_52_fu_930_p2)
);

CNN_CNN_add_11ns_11ns_11_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 11 ))
CNN_add_11ns_11ns_11_1_1_U92(
    .din0(11'd8),
    .din1(select_ln40_20_fu_851_p3),
    .dout(add_ln40_53_fu_941_p2)
);

CNN_CNN_add_4ns_4ns_4_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 4 ))
CNN_add_4ns_4ns_4_1_1_U93(
    .din0(j_reg_436),
    .din1(4'd1),
    .dout(add_ln42_fu_1016_p2)
);

CNN_CNN_add_31ns_31ns_31_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
CNN_add_31ns_31ns_31_1_1_U94(
    .din0(b_reg_447),
    .din1(31'd1),
    .dout(add_ln64_fu_1082_p2)
);

CNN_CNN_add_4ns_4ns_4_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 4 ))
CNN_add_4ns_4ns_4_1_1_U95(
    .din0(4'd2),
    .din1(empty_66_fu_1092_p1),
    .dout(empty_66_fu_1092_p2)
);

CNN_CNN_add_5ns_5ns_5_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 5 ))
CNN_add_5ns_5ns_5_1_1_U96(
    .din0(select_ln40_reg_1296),
    .din1(5'd1),
    .dout(add_ln41_fu_1153_p2)
);

CNN_CNN_add_9ns_9ns_9_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 9 ))
CNN_add_9ns_9ns_9_1_1_U97(
    .din0(indvar_flatten_reg_412),
    .din1(9'd1),
    .dout(add_ln40_54_fu_1158_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln42_reg_1176 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state5))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state5);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln42_reg_1176 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp1_flush_enable)) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((cmp4827_reg_1190 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter11 <= ap_enable_reg_pp1_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter12 <= ap_enable_reg_pp1_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter13 <= ap_enable_reg_pp1_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter14 <= ap_enable_reg_pp1_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter15 <= ap_enable_reg_pp1_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter16 <= ap_enable_reg_pp1_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter17 <= ap_enable_reg_pp1_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter18 <= ap_enable_reg_pp1_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter19 <= ap_enable_reg_pp1_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter20 <= ap_enable_reg_pp1_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter21 <= ap_enable_reg_pp1_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter22 <= ap_enable_reg_pp1_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter23 <= ap_enable_reg_pp1_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter24 <= ap_enable_reg_pp1_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter25 <= ap_enable_reg_pp1_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter25_state34)) begin
                ap_enable_reg_pp1_iter26 <= ap_enable_reg_pp1_iter24;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter26 <= ap_enable_reg_pp1_iter25;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter27 <= ap_enable_reg_pp1_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter28 <= ap_enable_reg_pp1_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter29 <= ap_enable_reg_pp1_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter30 <= ap_enable_reg_pp1_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter31 <= ap_enable_reg_pp1_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter32 <= ap_enable_reg_pp1_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter33 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter33 <= ap_enable_reg_pp1_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter34 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter34 <= ap_enable_reg_pp1_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter35 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter35 <= ap_enable_reg_pp1_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter36 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter36 <= ap_enable_reg_pp1_iter35;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter37 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter37 <= ap_enable_reg_pp1_iter36;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter38 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter38 <= ap_enable_reg_pp1_iter37;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter39 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter39 <= ap_enable_reg_pp1_iter38;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter40 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter40 <= ap_enable_reg_pp1_iter39;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter41 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter41 <= ap_enable_reg_pp1_iter40;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter42 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter42 <= ap_enable_reg_pp1_iter41;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter43 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter43 <= ap_enable_reg_pp1_iter42;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter44 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter44 <= ap_enable_reg_pp1_iter43;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter45 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter45 <= ap_enable_reg_pp1_iter44;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter46 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter46 <= ap_enable_reg_pp1_iter45;
        end else if (((cmp4827_reg_1190 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
            ap_enable_reg_pp1_iter46 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((cmp4827_reg_1190 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        b_reg_447 <= 31'd0;
    end else if (((icmp_ln64_fu_1077_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        b_reg_447 <= add_ln64_fu_1082_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        i_reg_424 <= add_ln41_fu_1153_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_424 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        indvar_flatten109_reg_390 <= add_ln39_reg_1218;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten109_reg_390 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        indvar_flatten_reg_412 <= select_ln40_22_fu_1164_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_412 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln42_7_fu_1011_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_reg_436 <= add_ln42_fu_1016_p2;
    end else if (((icmp_ln42_reg_1176 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        j_reg_436 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        num_channel_reg_401 <= select_ln39_22_reg_1236;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        num_channel_reg_401 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        num_ker_reg_378 <= select_ln40_21_reg_1291;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        num_ker_reg_378 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp4827_reg_1190 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        window_buffer_load_0_reg_468 <= line_buffer_0_4_q0;
    end else if (((icmp_ln64_reg_1416_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        window_buffer_load_0_reg_468 <= window_buffer_load_13_0_reg_458;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp4827_reg_1190 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        window_buffer_load_13_0_reg_458 <= line_buffer_0_4_q1;
    end else if (((icmp_ln64_reg_1416_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        window_buffer_load_13_0_reg_458 <= line_buffer_0_4_load_2_reg_1436;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp4827_reg_1190 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        window_buffer_load_13_1_reg_479 <= line_buffer_1_4_q1;
    end else if (((icmp_ln64_reg_1416_pp1_iter13_reg == 1'd0) & (ap_enable_reg_pp1_iter14 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        window_buffer_load_13_1_reg_479 <= line_buffer_1_4_load_3_reg_1472;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp4827_reg_1190 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        window_buffer_load_13_2_reg_500 <= line_buffer_2_4_q1;
    end else if (((icmp_ln64_reg_1416_pp1_iter25_reg == 1'd0) & (ap_enable_reg_pp1_iter26 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        window_buffer_load_13_2_reg_500 <= line_buffer_2_4_load_3_reg_1513;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp4827_reg_1190 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        window_buffer_load_1_reg_489 <= line_buffer_1_4_q0;
    end else if (((icmp_ln64_reg_1416_pp1_iter13_reg == 1'd0) & (ap_enable_reg_pp1_iter14 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        window_buffer_load_1_reg_489 <= window_buffer_load_13_1_reg_479;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp4827_reg_1190 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        window_buffer_load_2_reg_510 <= line_buffer_2_4_q0;
    end else if (((icmp_ln64_reg_1416_pp1_iter25_reg == 1'd0) & (ap_enable_reg_pp1_iter26 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        window_buffer_load_2_reg_510 <= window_buffer_load_13_2_reg_500;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        add_ln31_reg_1171 <= add_ln31_fu_617_p2;
        bitcast_ln49_reg_1194 <= bitcast_ln49_fu_647_p1;
        cmp4827_reg_1190 <= cmp4827_fu_641_p2;
        icmp_ln42_reg_1176 <= icmp_ln42_fu_623_p2;
        sub13_reg_1180 <= sub13_fu_629_p2;
        sub47_reg_1185 <= sub47_fu_635_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln39_reg_1218 <= add_ln39_fu_714_p2;
        bias_conv2_load_reg_1210 <= bias_conv2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_fu_708_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        and_ln39_reg_1230 <= and_ln39_fu_802_p2;
        icmp_ln40_reg_1223 <= icmp_ln40_fu_720_p2;
        select_ln39_22_reg_1236 <= select_ln39_22_fu_808_p3;
        select_ln40_21_reg_1291 <= select_ln40_21_fu_952_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        empty_61_reg_1199 <= empty_61_fu_656_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln42_7_reg_1357 <= icmp_ln42_7_fu_1011_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln64_reg_1416 <= icmp_ln64_fu_1077_p2;
        icmp_ln64_reg_1416_pp1_iter1_reg <= icmp_ln64_reg_1416;
        p_cast_reg_1425_pp1_iter1_reg[3 : 0] <= p_cast_reg_1425[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        icmp_ln64_reg_1416_pp1_iter10_reg <= icmp_ln64_reg_1416_pp1_iter9_reg;
        icmp_ln64_reg_1416_pp1_iter11_reg <= icmp_ln64_reg_1416_pp1_iter10_reg;
        icmp_ln64_reg_1416_pp1_iter12_reg <= icmp_ln64_reg_1416_pp1_iter11_reg;
        icmp_ln64_reg_1416_pp1_iter13_reg <= icmp_ln64_reg_1416_pp1_iter12_reg;
        icmp_ln64_reg_1416_pp1_iter14_reg <= icmp_ln64_reg_1416_pp1_iter13_reg;
        icmp_ln64_reg_1416_pp1_iter15_reg <= icmp_ln64_reg_1416_pp1_iter14_reg;
        icmp_ln64_reg_1416_pp1_iter16_reg <= icmp_ln64_reg_1416_pp1_iter15_reg;
        icmp_ln64_reg_1416_pp1_iter17_reg <= icmp_ln64_reg_1416_pp1_iter16_reg;
        icmp_ln64_reg_1416_pp1_iter18_reg <= icmp_ln64_reg_1416_pp1_iter17_reg;
        icmp_ln64_reg_1416_pp1_iter19_reg <= icmp_ln64_reg_1416_pp1_iter18_reg;
        icmp_ln64_reg_1416_pp1_iter20_reg <= icmp_ln64_reg_1416_pp1_iter19_reg;
        icmp_ln64_reg_1416_pp1_iter21_reg <= icmp_ln64_reg_1416_pp1_iter20_reg;
        icmp_ln64_reg_1416_pp1_iter22_reg <= icmp_ln64_reg_1416_pp1_iter21_reg;
        icmp_ln64_reg_1416_pp1_iter23_reg <= icmp_ln64_reg_1416_pp1_iter22_reg;
        icmp_ln64_reg_1416_pp1_iter24_reg <= icmp_ln64_reg_1416_pp1_iter23_reg;
        icmp_ln64_reg_1416_pp1_iter25_reg <= icmp_ln64_reg_1416_pp1_iter24_reg;
        icmp_ln64_reg_1416_pp1_iter26_reg <= icmp_ln64_reg_1416_pp1_iter25_reg;
        icmp_ln64_reg_1416_pp1_iter27_reg <= icmp_ln64_reg_1416_pp1_iter26_reg;
        icmp_ln64_reg_1416_pp1_iter28_reg <= icmp_ln64_reg_1416_pp1_iter27_reg;
        icmp_ln64_reg_1416_pp1_iter29_reg <= icmp_ln64_reg_1416_pp1_iter28_reg;
        icmp_ln64_reg_1416_pp1_iter2_reg <= icmp_ln64_reg_1416_pp1_iter1_reg;
        icmp_ln64_reg_1416_pp1_iter30_reg <= icmp_ln64_reg_1416_pp1_iter29_reg;
        icmp_ln64_reg_1416_pp1_iter31_reg <= icmp_ln64_reg_1416_pp1_iter30_reg;
        icmp_ln64_reg_1416_pp1_iter32_reg <= icmp_ln64_reg_1416_pp1_iter31_reg;
        icmp_ln64_reg_1416_pp1_iter33_reg <= icmp_ln64_reg_1416_pp1_iter32_reg;
        icmp_ln64_reg_1416_pp1_iter34_reg <= icmp_ln64_reg_1416_pp1_iter33_reg;
        icmp_ln64_reg_1416_pp1_iter35_reg <= icmp_ln64_reg_1416_pp1_iter34_reg;
        icmp_ln64_reg_1416_pp1_iter36_reg <= icmp_ln64_reg_1416_pp1_iter35_reg;
        icmp_ln64_reg_1416_pp1_iter37_reg <= icmp_ln64_reg_1416_pp1_iter36_reg;
        icmp_ln64_reg_1416_pp1_iter38_reg <= icmp_ln64_reg_1416_pp1_iter37_reg;
        icmp_ln64_reg_1416_pp1_iter39_reg <= icmp_ln64_reg_1416_pp1_iter38_reg;
        icmp_ln64_reg_1416_pp1_iter3_reg <= icmp_ln64_reg_1416_pp1_iter2_reg;
        icmp_ln64_reg_1416_pp1_iter40_reg <= icmp_ln64_reg_1416_pp1_iter39_reg;
        icmp_ln64_reg_1416_pp1_iter41_reg <= icmp_ln64_reg_1416_pp1_iter40_reg;
        icmp_ln64_reg_1416_pp1_iter42_reg <= icmp_ln64_reg_1416_pp1_iter41_reg;
        icmp_ln64_reg_1416_pp1_iter43_reg <= icmp_ln64_reg_1416_pp1_iter42_reg;
        icmp_ln64_reg_1416_pp1_iter44_reg <= icmp_ln64_reg_1416_pp1_iter43_reg;
        icmp_ln64_reg_1416_pp1_iter45_reg <= icmp_ln64_reg_1416_pp1_iter44_reg;
        icmp_ln64_reg_1416_pp1_iter4_reg <= icmp_ln64_reg_1416_pp1_iter3_reg;
        icmp_ln64_reg_1416_pp1_iter5_reg <= icmp_ln64_reg_1416_pp1_iter4_reg;
        icmp_ln64_reg_1416_pp1_iter6_reg <= icmp_ln64_reg_1416_pp1_iter5_reg;
        icmp_ln64_reg_1416_pp1_iter7_reg <= icmp_ln64_reg_1416_pp1_iter6_reg;
        icmp_ln64_reg_1416_pp1_iter8_reg <= icmp_ln64_reg_1416_pp1_iter7_reg;
        icmp_ln64_reg_1416_pp1_iter9_reg <= icmp_ln64_reg_1416_pp1_iter8_reg;
        line_buffer_0_4_load_2_reg_1436_pp1_iter2_reg <= line_buffer_0_4_load_2_reg_1436;
        line_buffer_1_4_load_3_reg_1472_pp1_iter14_reg <= line_buffer_1_4_load_3_reg_1472;
        line_buffer_2_4_load_3_reg_1513_pp1_iter26_reg <= line_buffer_2_4_load_3_reg_1513;
        mul_0_1_reg_1447_pp1_iter6_reg <= mul_0_1_reg_1447;
        mul_0_1_reg_1447_pp1_iter7_reg <= mul_0_1_reg_1447_pp1_iter6_reg;
        mul_0_1_reg_1447_pp1_iter8_reg <= mul_0_1_reg_1447_pp1_iter7_reg;
        mul_0_2_reg_1452_pp1_iter10_reg <= mul_0_2_reg_1452_pp1_iter9_reg;
        mul_0_2_reg_1452_pp1_iter11_reg <= mul_0_2_reg_1452_pp1_iter10_reg;
        mul_0_2_reg_1452_pp1_iter12_reg <= mul_0_2_reg_1452_pp1_iter11_reg;
        mul_0_2_reg_1452_pp1_iter7_reg <= mul_0_2_reg_1452;
        mul_0_2_reg_1452_pp1_iter8_reg <= mul_0_2_reg_1452_pp1_iter7_reg;
        mul_0_2_reg_1452_pp1_iter9_reg <= mul_0_2_reg_1452_pp1_iter8_reg;
        mul_1_1_reg_1488_pp1_iter18_reg <= mul_1_1_reg_1488;
        mul_1_1_reg_1488_pp1_iter19_reg <= mul_1_1_reg_1488_pp1_iter18_reg;
        mul_1_1_reg_1488_pp1_iter20_reg <= mul_1_1_reg_1488_pp1_iter19_reg;
        mul_1_2_reg_1493_pp1_iter19_reg <= mul_1_2_reg_1493;
        mul_1_2_reg_1493_pp1_iter20_reg <= mul_1_2_reg_1493_pp1_iter19_reg;
        mul_1_2_reg_1493_pp1_iter21_reg <= mul_1_2_reg_1493_pp1_iter20_reg;
        mul_1_2_reg_1493_pp1_iter22_reg <= mul_1_2_reg_1493_pp1_iter21_reg;
        mul_1_2_reg_1493_pp1_iter23_reg <= mul_1_2_reg_1493_pp1_iter22_reg;
        mul_1_2_reg_1493_pp1_iter24_reg <= mul_1_2_reg_1493_pp1_iter23_reg;
        mul_2_1_reg_1529_pp1_iter30_reg <= mul_2_1_reg_1529;
        mul_2_1_reg_1529_pp1_iter31_reg <= mul_2_1_reg_1529_pp1_iter30_reg;
        mul_2_1_reg_1529_pp1_iter32_reg <= mul_2_1_reg_1529_pp1_iter31_reg;
        mul_2_2_reg_1534_pp1_iter31_reg <= mul_2_2_reg_1534;
        mul_2_2_reg_1534_pp1_iter32_reg <= mul_2_2_reg_1534_pp1_iter31_reg;
        mul_2_2_reg_1534_pp1_iter33_reg <= mul_2_2_reg_1534_pp1_iter32_reg;
        mul_2_2_reg_1534_pp1_iter34_reg <= mul_2_2_reg_1534_pp1_iter33_reg;
        mul_2_2_reg_1534_pp1_iter35_reg <= mul_2_2_reg_1534_pp1_iter34_reg;
        mul_2_2_reg_1534_pp1_iter36_reg <= mul_2_2_reg_1534_pp1_iter35_reg;
        p_cast_reg_1425_pp1_iter10_reg[3 : 0] <= p_cast_reg_1425_pp1_iter9_reg[3 : 0];
        p_cast_reg_1425_pp1_iter11_reg[3 : 0] <= p_cast_reg_1425_pp1_iter10_reg[3 : 0];
        p_cast_reg_1425_pp1_iter12_reg[3 : 0] <= p_cast_reg_1425_pp1_iter11_reg[3 : 0];
        p_cast_reg_1425_pp1_iter13_reg[3 : 0] <= p_cast_reg_1425_pp1_iter12_reg[3 : 0];
        p_cast_reg_1425_pp1_iter14_reg[3 : 0] <= p_cast_reg_1425_pp1_iter13_reg[3 : 0];
        p_cast_reg_1425_pp1_iter15_reg[3 : 0] <= p_cast_reg_1425_pp1_iter14_reg[3 : 0];
        p_cast_reg_1425_pp1_iter16_reg[3 : 0] <= p_cast_reg_1425_pp1_iter15_reg[3 : 0];
        p_cast_reg_1425_pp1_iter17_reg[3 : 0] <= p_cast_reg_1425_pp1_iter16_reg[3 : 0];
        p_cast_reg_1425_pp1_iter18_reg[3 : 0] <= p_cast_reg_1425_pp1_iter17_reg[3 : 0];
        p_cast_reg_1425_pp1_iter19_reg[3 : 0] <= p_cast_reg_1425_pp1_iter18_reg[3 : 0];
        p_cast_reg_1425_pp1_iter20_reg[3 : 0] <= p_cast_reg_1425_pp1_iter19_reg[3 : 0];
        p_cast_reg_1425_pp1_iter21_reg[3 : 0] <= p_cast_reg_1425_pp1_iter20_reg[3 : 0];
        p_cast_reg_1425_pp1_iter22_reg[3 : 0] <= p_cast_reg_1425_pp1_iter21_reg[3 : 0];
        p_cast_reg_1425_pp1_iter23_reg[3 : 0] <= p_cast_reg_1425_pp1_iter22_reg[3 : 0];
        p_cast_reg_1425_pp1_iter2_reg[3 : 0] <= p_cast_reg_1425_pp1_iter1_reg[3 : 0];
        p_cast_reg_1425_pp1_iter3_reg[3 : 0] <= p_cast_reg_1425_pp1_iter2_reg[3 : 0];
        p_cast_reg_1425_pp1_iter4_reg[3 : 0] <= p_cast_reg_1425_pp1_iter3_reg[3 : 0];
        p_cast_reg_1425_pp1_iter5_reg[3 : 0] <= p_cast_reg_1425_pp1_iter4_reg[3 : 0];
        p_cast_reg_1425_pp1_iter6_reg[3 : 0] <= p_cast_reg_1425_pp1_iter5_reg[3 : 0];
        p_cast_reg_1425_pp1_iter7_reg[3 : 0] <= p_cast_reg_1425_pp1_iter6_reg[3 : 0];
        p_cast_reg_1425_pp1_iter8_reg[3 : 0] <= p_cast_reg_1425_pp1_iter7_reg[3 : 0];
        p_cast_reg_1425_pp1_iter9_reg[3 : 0] <= p_cast_reg_1425_pp1_iter8_reg[3 : 0];
        sum_reg_1554_pp1_iter45_reg <= sum_reg_1554;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln42_7_fu_1011_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_cast5_reg_1366[3 : 0] <= j_cast5_fu_1022_p1[3 : 0];
        line_buffer_1_4_addr_reg_1371 <= j_cast5_fu_1022_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        kernel_conv2_load_1_reg_1312 <= kernel_conv2_q1;
        kernel_conv2_load_2_reg_1317 <= kernel_conv2_q2;
        kernel_conv2_load_3_reg_1322 <= kernel_conv2_q3;
        kernel_conv2_load_4_reg_1327 <= kernel_conv2_q4;
        kernel_conv2_load_5_reg_1332 <= kernel_conv2_q5;
        kernel_conv2_load_6_reg_1337 <= kernel_conv2_q6;
        kernel_conv2_load_7_reg_1342 <= kernel_conv2_q7;
        kernel_conv2_load_8_reg_1347 <= kernel_conv2_q8;
        kernel_conv2_load_reg_1307 <= kernel_conv2_q0;
        select_ln40_19_reg_1302 <= select_ln40_19_fu_978_p3;
        select_ln40_reg_1296 <= select_ln40_fu_970_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1416 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        line_buffer_0_4_load_2_reg_1436 <= line_buffer_0_4_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1416_pp1_iter12_reg == 1'd0) & (ap_enable_reg_pp1_iter13 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        line_buffer_1_4_load_3_reg_1472 <= line_buffer_1_4_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1416_pp1_iter24_reg == 1'd0) & (ap_enable_reg_pp1_iter25 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        line_buffer_2_4_load_3_reg_1513 <= line_buffer_2_4_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1416_pp1_iter4_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        mul_0_1_reg_1447 <= grp_fu_567_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1416_pp1_iter5_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        mul_0_2_reg_1452 <= grp_fu_572_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1416_pp1_iter16_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        mul_1_1_reg_1488 <= grp_fu_581_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1416_pp1_iter17_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        mul_1_2_reg_1493 <= grp_fu_586_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1416_pp1_iter15_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        mul_1_reg_1483 <= grp_fu_576_p2;
        sum_26_0_2_reg_1478 <= grp_fu_530_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1416_pp1_iter28_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        mul_2_1_reg_1529 <= grp_fu_595_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1416_pp1_iter29_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        mul_2_2_reg_1534 <= grp_fu_600_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1416_pp1_iter27_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        mul_2_reg_1524 <= grp_fu_590_p2;
        sum_26_1_2_reg_1519 <= grp_fu_542_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1416_pp1_iter3_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        mul_reg_1442 <= grp_fu_562_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_reg_1176 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        or_ln45_reg_1352 <= or_ln45_fu_1001_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_fu_1077_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        p_cast_reg_1425[3 : 0] <= p_cast_fu_1098_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1416_pp1_iter11_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        sum_26_0_1_reg_1467 <= grp_fu_526_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1416_pp1_iter23_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        sum_26_1_1_reg_1508 <= grp_fu_538_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1416_pp1_iter19_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        sum_26_1_reg_1498 <= grp_fu_534_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1416_pp1_iter35_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        sum_26_2_1_reg_1544 <= grp_fu_550_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1416_pp1_iter39_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        sum_26_2_2_reg_1549 <= grp_fu_554_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1416_pp1_iter31_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        sum_26_2_reg_1539 <= grp_fu_546_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1416_pp1_iter43_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        sum_reg_1554 <= grp_fu_558_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1416_pp1_iter7_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        sum_s_reg_1457 <= grp_fu_521_p2;
    end
end

always @ (*) begin
    if ((icmp_ln42_7_fu_1011_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter24 == 1'b0) & (ap_enable_reg_pp1_iter25 == 1'b1))) begin
        ap_condition_pp1_exit_iter25_state34 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter25_state34 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln64_fu_1077_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_condition_pp1_flush_enable = 1'b1;
    end else begin
        ap_condition_pp1_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln39_fu_708_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter46 == 1'b0) & (ap_enable_reg_pp1_iter45 == 1'b0) & (ap_enable_reg_pp1_iter44 == 1'b0) & (ap_enable_reg_pp1_iter43 == 1'b0) & (ap_enable_reg_pp1_iter42 == 1'b0) & (ap_enable_reg_pp1_iter41 == 1'b0) & (ap_enable_reg_pp1_iter40 == 1'b0) & (ap_enable_reg_pp1_iter39 == 1'b0) & (ap_enable_reg_pp1_iter38 == 1'b0) & (ap_enable_reg_pp1_iter37 == 1'b0) & (ap_enable_reg_pp1_iter36 == 1'b0) & (ap_enable_reg_pp1_iter35 == 1'b0) & (ap_enable_reg_pp1_iter34 == 1'b0) & (ap_enable_reg_pp1_iter33 == 1'b0) & (ap_enable_reg_pp1_iter32 == 1'b0) & (ap_enable_reg_pp1_iter31 == 1'b0) & (ap_enable_reg_pp1_iter30 == 1'b0) & (ap_enable_reg_pp1_iter29 == 1'b0) & (ap_enable_reg_pp1_iter28 == 1'b0) & (ap_enable_reg_pp1_iter27 == 1'b0) & (ap_enable_reg_pp1_iter26 == 1'b0) & (ap_enable_reg_pp1_iter24 == 1'b0) & (ap_enable_reg_pp1_iter23 == 1'b0) & (ap_enable_reg_pp1_iter22 == 1'b0) & (ap_enable_reg_pp1_iter21 == 1'b0) & (ap_enable_reg_pp1_iter20 == 1'b0) & (ap_enable_reg_pp1_iter19 == 1'b0) & (ap_enable_reg_pp1_iter18 == 1'b0) & (ap_enable_reg_pp1_iter17 == 1'b0) & (ap_enable_reg_pp1_iter16 == 1'b0) & (ap_enable_reg_pp1_iter15 == 1'b0) & (ap_enable_reg_pp1_iter14 == 1'b0) & (ap_enable_reg_pp1_iter12 == 1'b0) & (ap_enable_reg_pp1_iter11 == 1'b0) & (ap_enable_reg_pp1_iter10 == 1'b0) & (ap_enable_reg_pp1_iter9 == 1'b0) & (ap_enable_reg_pp1_iter8 == 1'b0) & (ap_enable_reg_pp1_iter7 == 1'b0) & (ap_enable_reg_pp1_iter6 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter25 == 1'b0) & (ap_enable_reg_pp1_iter13 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (icmp_ln64_reg_1416_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        ap_phi_mux_window_buffer_load_0_phi_fu_471_p4 = window_buffer_load_13_0_reg_458;
    end else begin
        ap_phi_mux_window_buffer_load_0_phi_fu_471_p4 = window_buffer_load_0_reg_468;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (icmp_ln64_reg_1416_pp1_iter13_reg == 1'd0) & (ap_enable_reg_pp1_iter14 == 1'b1))) begin
        ap_phi_mux_window_buffer_load_1_phi_fu_492_p4 = window_buffer_load_13_1_reg_479;
    end else begin
        ap_phi_mux_window_buffer_load_1_phi_fu_492_p4 = window_buffer_load_1_reg_489;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (icmp_ln64_reg_1416_pp1_iter25_reg == 1'd0) & (ap_enable_reg_pp1_iter26 == 1'b1))) begin
        ap_phi_mux_window_buffer_load_2_phi_fu_513_p4 = window_buffer_load_13_2_reg_500;
    end else begin
        ap_phi_mux_window_buffer_load_2_phi_fu_513_p4 = window_buffer_load_2_reg_510;
    end
end

always @ (*) begin
    if (((icmp_ln39_fu_708_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        bias_conv2_address0 = zext_ln40_48_fu_822_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        bias_conv2_address0 = zext_ln40_8_fu_651_p1;
    end else begin
        bias_conv2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        bias_conv2_ce0 = 1'b1;
    end else begin
        bias_conv2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        kernel_conv2_ce0 = 1'b1;
    end else begin
        kernel_conv2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        kernel_conv2_ce1 = 1'b1;
    end else begin
        kernel_conv2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        kernel_conv2_ce2 = 1'b1;
    end else begin
        kernel_conv2_ce2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        kernel_conv2_ce3 = 1'b1;
    end else begin
        kernel_conv2_ce3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        kernel_conv2_ce4 = 1'b1;
    end else begin
        kernel_conv2_ce4 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        kernel_conv2_ce5 = 1'b1;
    end else begin
        kernel_conv2_ce5 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        kernel_conv2_ce6 = 1'b1;
    end else begin
        kernel_conv2_ce6 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        kernel_conv2_ce7 = 1'b1;
    end else begin
        kernel_conv2_ce7 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        kernel_conv2_ce8 = 1'b1;
    end else begin
        kernel_conv2_ce8 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        line_buffer_0_4_address0 = 4'd0;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_0_4_address0 = j_cast5_reg_1366;
    end else begin
        line_buffer_0_4_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        line_buffer_0_4_address1 = p_cast_fu_1098_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        line_buffer_0_4_address1 = 4'd1;
    end else begin
        line_buffer_0_4_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        line_buffer_0_4_ce0 = 1'b1;
    end else begin
        line_buffer_0_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        line_buffer_0_4_ce1 = 1'b1;
    end else begin
        line_buffer_0_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln42_7_reg_1357 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_0_4_we0 = 1'b1;
    end else begin
        line_buffer_0_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter12 == 1'b1))) begin
        line_buffer_1_4_address0 = p_cast_reg_1425_pp1_iter11_reg;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        line_buffer_1_4_address0 = 4'd0;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_1_4_address0 = j_cast5_fu_1022_p1;
    end else begin
        line_buffer_1_4_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        line_buffer_1_4_address1 = 4'd1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_1_4_address1 = line_buffer_1_4_addr_reg_1371;
    end else begin
        line_buffer_1_4_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp1_iter12 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        line_buffer_1_4_ce0 = 1'b1;
    end else begin
        line_buffer_1_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        line_buffer_1_4_ce1 = 1'b1;
    end else begin
        line_buffer_1_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln42_7_reg_1357 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_1_4_we1 = 1'b1;
    end else begin
        line_buffer_1_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        line_buffer_2_4_address0 = 4'd0;
    end else if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln42_7_fu_1011_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_2_4_address0 = j_cast5_fu_1022_p1;
    end else begin
        line_buffer_2_4_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter24 == 1'b1))) begin
        line_buffer_2_4_address1 = p_cast_reg_1425_pp1_iter23_reg;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        line_buffer_2_4_address1 = 4'd1;
    end else begin
        line_buffer_2_4_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln42_7_fu_1011_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        line_buffer_2_4_ce0 = 1'b1;
    end else begin
        line_buffer_2_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((ap_enable_reg_pp1_iter24 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        line_buffer_2_4_ce1 = 1'b1;
    end else begin
        line_buffer_2_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln42_7_fu_1011_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_2_4_we0 = 1'b1;
    end else begin
        line_buffer_2_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_1416_pp1_iter45_reg == 1'd0) & (ap_enable_reg_pp1_iter46 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        output_conv2_ap_vld = 1'b1;
    end else begin
        output_conv2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln39_fu_708_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln42_reg_1176 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln42_7_fu_1011_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln42_7_fu_1011_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln52_fu_1067_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((cmp4827_reg_1190 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter26 == 1'b0) & (ap_enable_reg_pp1_iter24 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter25 == 1'b1)) & ~((ap_enable_reg_pp1_iter45 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter46 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter45 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter46 == 1'b1)) | ((ap_enable_reg_pp1_iter26 == 1'b0) & (ap_enable_reg_pp1_iter24 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter25 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln83_15_fu_680_p0 = num_channel_reg_401;

assign add_ln83_15_fu_680_p1 = p_shl_fu_668_p3;

assign add_ln83_16_fu_760_p0 = add_ln39_14_fu_734_p2;

assign add_ln83_16_fu_760_p1 = p_shl_mid1_fu_748_p3;

assign add_ln83_17_fu_845_p0 = select_ln39_19_fu_770_p3;

assign add_ln83_17_fu_845_p1 = tmp_mid1_fu_831_p4;

assign add_ln83_fu_702_p0 = add_ln83_15_fu_680_p2;

assign add_ln83_fu_702_p1 = tmp_fu_690_p4;

assign and_ln11_fu_1138_p2 = (or_ln11_fu_1132_p2 & grp_fu_604_p2);

assign and_ln39_fu_802_p2 = (xor_ln39_fu_790_p2 & icmp_ln41_fu_796_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp1_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp1_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp1_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp1_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp1_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp1_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp1_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp1_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp1_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp1_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp1_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp1_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp1_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp1_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp1_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp1_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp1_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp1_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp1_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp1_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp1_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp1_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp1_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp1_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp1_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp1_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp1_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp1_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp1_stage0_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp1_stage0_iter35 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp1_stage0_iter36 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp1_stage0_iter37 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp1_stage0_iter38 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp1_stage0_iter39 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp1_stage0_iter40 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp1_stage0_iter41 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp1_stage0_iter42 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp1_stage0_iter43 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp1_stage0_iter44 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp1_stage0_iter45 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp1_stage0_iter46 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign b_cast_fu_1073_p1 = b_reg_447;

assign bitcast_ln11_fu_1103_p1 = sum_reg_1554_pp1_iter45_reg;

assign bitcast_ln49_fu_647_p1 = p_read;

assign cmp4827_fu_641_p2 = (($signed(sub47_fu_635_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign empty_61_fu_656_p1 = num_ker_reg_378[2:0];

assign empty_62_fu_985_p1 = select_ln40_fu_970_p3[3:0];

assign empty_66_fu_1092_p1 = b_reg_447[3:0];

assign empty_68_fu_744_p1 = add_ln39_14_fu_734_p2[3:0];

assign empty_69_fu_827_p1 = add_ln40_fu_816_p2[2:0];

assign empty_fu_664_p1 = num_channel_reg_401[3:0];

assign icmp_ln11_7_fu_1126_p2 = ((trunc_ln11_fu_1116_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln11_fu_1120_p2 = ((tmp_1_fu_1106_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_708_p2 = ((indvar_flatten109_reg_390 == 12'd2048) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_720_p2 = ((indvar_flatten_reg_412 == 9'd128) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_796_p2 = ((i_reg_424 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln42_7_fu_1011_p2 = ((j_cast_fu_1007_p1 == add_ln31_reg_1171) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_623_p2 = (($signed(add_ln31_fu_617_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln45_14_fu_989_p2 = ((empty_62_fu_985_p1 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln45_15_fu_995_p2 = ((empty_62_fu_985_p1 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln45_7_fu_1034_p2 = ((j_cast_fu_1007_p1 == sub13_reg_1180) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_1028_p2 = ((j_reg_436 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_1067_p2 = ((tmp_6_fu_1058_p4 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln64_fu_1077_p2 = ((b_cast_fu_1073_p1 == sub47_reg_1185) ? 1'b1 : 1'b0);

assign j_cast5_fu_1022_p1 = j_reg_436;

assign j_cast_fu_1007_p1 = j_reg_436;

assign kernel_conv2_address0 = zext_ln83_18_fu_859_p1;

assign kernel_conv2_address1 = zext_ln40_49_fu_870_p1;

assign kernel_conv2_address2 = zext_ln40_50_fu_881_p1;

assign kernel_conv2_address3 = zext_ln40_51_fu_892_p1;

assign kernel_conv2_address4 = zext_ln40_52_fu_903_p1;

assign kernel_conv2_address5 = zext_ln40_53_fu_914_p1;

assign kernel_conv2_address6 = zext_ln40_54_fu_925_p1;

assign kernel_conv2_address7 = zext_ln40_55_fu_936_p1;

assign kernel_conv2_address8 = zext_ln40_56_fu_947_p1;

assign line_buffer_2_4_d0 = ((or_ln45_14_fu_1045_p2[0:0] === 1'b1) ? 64'd0 : bitcast_ln49_reg_1194);

assign or_ln11_fu_1132_p2 = (icmp_ln11_fu_1120_p2 | icmp_ln11_7_fu_1126_p2);

assign or_ln40_fu_966_p2 = (icmp_ln40_reg_1223 | and_ln39_reg_1230);

assign or_ln45_13_fu_1039_p2 = (icmp_ln45_fu_1028_p2 | icmp_ln45_7_fu_1034_p2);

assign or_ln45_14_fu_1045_p2 = (or_ln45_reg_1352 | or_ln45_13_fu_1039_p2);

assign or_ln45_fu_1001_p2 = (icmp_ln45_15_fu_995_p2 | icmp_ln45_14_fu_989_p2);

assign output_conv2 = ((and_ln11_fu_1138_p2[0:0] === 1'b1) ? bitcast_ln11_fu_1103_p1 : 64'd0);

assign p_cast_fu_1098_p1 = empty_66_fu_1092_p2;

assign p_shl_fu_668_p3 = {{empty_fu_664_p1}, {3'd0}};

assign p_shl_mid1_fu_748_p3 = {{empty_68_fu_744_p1}, {3'd0}};

assign select_ln39_19_fu_770_p3 = ((icmp_ln40_fu_720_p2[0:0] === 1'b1) ? add_ln83_16_fu_760_p2 : add_ln83_15_fu_680_p2);

assign select_ln39_20_fu_960_p3 = ((icmp_ln40_reg_1223[0:0] === 1'b1) ? 64'd13819289298544380495 : bias_conv2_load_reg_1210);

assign select_ln39_21_fu_782_p3 = ((icmp_ln40_fu_720_p2[0:0] === 1'b1) ? zext_ln83_16_fu_766_p1 : add_ln83_fu_702_p2);

assign select_ln39_22_fu_808_p3 = ((icmp_ln40_fu_720_p2[0:0] === 1'b1) ? add_ln39_14_fu_734_p2 : num_channel_reg_401);

assign select_ln39_fu_726_p3 = ((icmp_ln40_fu_720_p2[0:0] === 1'b1) ? 4'd0 : num_ker_reg_378);

assign select_ln40_19_fu_978_p3 = ((and_ln39_reg_1230[0:0] === 1'b1) ? bias_conv2_q0 : select_ln39_20_fu_960_p3);

assign select_ln40_20_fu_851_p3 = ((and_ln39_fu_802_p2[0:0] === 1'b1) ? add_ln83_17_fu_845_p2 : select_ln39_21_fu_782_p3);

assign select_ln40_21_fu_952_p3 = ((and_ln39_fu_802_p2[0:0] === 1'b1) ? add_ln40_fu_816_p2 : select_ln39_fu_726_p3);

assign select_ln40_22_fu_1164_p3 = ((icmp_ln40_reg_1223[0:0] === 1'b1) ? 9'd1 : add_ln40_54_fu_1158_p2);

assign select_ln40_fu_970_p3 = ((or_ln40_fu_966_p2[0:0] === 1'b1) ? 5'd0 : i_reg_424);

assign shl_ln_fu_609_p3 = {{padding}, {1'd0}};

assign tmp_1_fu_1106_p4 = {{bitcast_ln11_fu_1103_p1[62:52]}};

assign tmp_6_fu_1058_p4 = {{select_ln40_reg_1296[4:1]}};

assign tmp_fu_690_p4 = {{{empty_61_reg_1199}, {empty_61_reg_1199}}, {4'd0}};

assign tmp_mid1_fu_831_p4 = {{{empty_69_fu_827_p1}, {empty_69_fu_827_p1}}, {4'd0}};

assign trunc_ln11_fu_1116_p1 = bitcast_ln11_fu_1103_p1[51:0];

assign xor_ln39_fu_790_p2 = (icmp_ln40_fu_720_p2 ^ 1'd1);

assign zext_ln40_48_fu_822_p1 = add_ln40_fu_816_p2;

assign zext_ln40_49_fu_870_p1 = add_ln40_46_fu_864_p2;

assign zext_ln40_50_fu_881_p1 = add_ln40_47_fu_875_p2;

assign zext_ln40_51_fu_892_p1 = add_ln40_48_fu_886_p2;

assign zext_ln40_52_fu_903_p1 = add_ln40_49_fu_897_p2;

assign zext_ln40_53_fu_914_p1 = add_ln40_50_fu_908_p2;

assign zext_ln40_54_fu_925_p1 = add_ln40_51_fu_919_p2;

assign zext_ln40_55_fu_936_p1 = add_ln40_52_fu_930_p2;

assign zext_ln40_56_fu_947_p1 = add_ln40_53_fu_941_p2;

assign zext_ln40_8_fu_651_p1 = num_ker_reg_378;

assign zext_ln83_16_fu_766_p1 = add_ln83_16_fu_760_p2;

assign zext_ln83_18_fu_859_p1 = select_ln40_20_fu_851_p3;

always @ (posedge ap_clk) begin
    j_cast5_reg_1366[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    p_cast_reg_1425[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    p_cast_reg_1425_pp1_iter1_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    p_cast_reg_1425_pp1_iter2_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    p_cast_reg_1425_pp1_iter3_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    p_cast_reg_1425_pp1_iter4_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    p_cast_reg_1425_pp1_iter5_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    p_cast_reg_1425_pp1_iter6_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    p_cast_reg_1425_pp1_iter7_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    p_cast_reg_1425_pp1_iter8_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    p_cast_reg_1425_pp1_iter9_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    p_cast_reg_1425_pp1_iter10_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    p_cast_reg_1425_pp1_iter11_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    p_cast_reg_1425_pp1_iter12_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    p_cast_reg_1425_pp1_iter13_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    p_cast_reg_1425_pp1_iter14_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    p_cast_reg_1425_pp1_iter15_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    p_cast_reg_1425_pp1_iter16_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    p_cast_reg_1425_pp1_iter17_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    p_cast_reg_1425_pp1_iter18_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    p_cast_reg_1425_pp1_iter19_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    p_cast_reg_1425_pp1_iter20_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    p_cast_reg_1425_pp1_iter21_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    p_cast_reg_1425_pp1_iter22_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    p_cast_reg_1425_pp1_iter23_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //CNN_convolution_double_double_double_double_14_14_16_8_14_14_3_3_1_1_s
