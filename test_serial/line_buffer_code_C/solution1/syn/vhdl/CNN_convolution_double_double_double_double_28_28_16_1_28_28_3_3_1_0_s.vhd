-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CNN_convolution_double_double_double_double_28_28_16_1_28_28_3_3_1_0_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (63 downto 0);
    output_conv7 : OUT STD_LOGIC_VECTOR (63 downto 0);
    output_conv7_ap_vld : OUT STD_LOGIC;
    padding : IN STD_LOGIC_VECTOR (30 downto 0) );
end;


architecture behav of CNN_convolution_double_double_double_double_28_28_16_1_28_28_3_3_1_0_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_BFD40F03DEB1D19F : STD_LOGIC_VECTOR (63 downto 0) := "1011111111010100000011110000001111011110101100011101000110011111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv9_1C0 : STD_LOGIC_VECTOR (8 downto 0) := "111000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv5_1B : STD_LOGIC_VECTOR (4 downto 0) := "11011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal line_buffer_1_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_1_1_ce0 : STD_LOGIC;
    signal line_buffer_1_1_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_1_1_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_1_1_ce1 : STD_LOGIC;
    signal line_buffer_1_1_we1 : STD_LOGIC;
    signal line_buffer_1_1_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_0_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_0_1_ce0 : STD_LOGIC;
    signal line_buffer_0_1_we0 : STD_LOGIC;
    signal line_buffer_0_1_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_0_1_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_0_1_ce1 : STD_LOGIC;
    signal line_buffer_0_1_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_2_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_2_1_ce0 : STD_LOGIC;
    signal line_buffer_2_1_we0 : STD_LOGIC;
    signal line_buffer_2_1_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_2_1_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_2_1_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_2_1_ce1 : STD_LOGIC;
    signal line_buffer_2_1_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv7_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_conv7_ce0 : STD_LOGIC;
    signal kernel_conv7_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv7_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_conv7_ce1 : STD_LOGIC;
    signal kernel_conv7_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv7_address2 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_conv7_ce2 : STD_LOGIC;
    signal kernel_conv7_q2 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv7_address3 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_conv7_ce3 : STD_LOGIC;
    signal kernel_conv7_q3 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv7_address4 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_conv7_ce4 : STD_LOGIC;
    signal kernel_conv7_q4 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv7_address5 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_conv7_ce5 : STD_LOGIC;
    signal kernel_conv7_q5 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv7_address6 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_conv7_ce6 : STD_LOGIC;
    signal kernel_conv7_q6 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv7_address7 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_conv7_ce7 : STD_LOGIC;
    signal kernel_conv7_q7 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv7_address8 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_conv7_ce8 : STD_LOGIC;
    signal kernel_conv7_q8 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_reg_374 : STD_LOGIC_VECTOR (4 downto 0);
    signal b_reg_385 : STD_LOGIC_VECTOR (30 downto 0);
    signal window_buffer_load_7_0_reg_396 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state8_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state10_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state11_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state12_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_state13_pp1_stage0_iter5 : BOOLEAN;
    signal ap_block_state14_pp1_stage0_iter6 : BOOLEAN;
    signal ap_block_state15_pp1_stage0_iter7 : BOOLEAN;
    signal ap_block_state16_pp1_stage0_iter8 : BOOLEAN;
    signal ap_block_state17_pp1_stage0_iter9 : BOOLEAN;
    signal ap_block_state18_pp1_stage0_iter10 : BOOLEAN;
    signal ap_block_state19_pp1_stage0_iter11 : BOOLEAN;
    signal ap_block_state20_pp1_stage0_iter12 : BOOLEAN;
    signal ap_block_state21_pp1_stage0_iter13 : BOOLEAN;
    signal ap_block_state22_pp1_stage0_iter14 : BOOLEAN;
    signal ap_block_state23_pp1_stage0_iter15 : BOOLEAN;
    signal ap_block_state24_pp1_stage0_iter16 : BOOLEAN;
    signal ap_block_state25_pp1_stage0_iter17 : BOOLEAN;
    signal ap_block_state26_pp1_stage0_iter18 : BOOLEAN;
    signal ap_block_state27_pp1_stage0_iter19 : BOOLEAN;
    signal ap_block_state28_pp1_stage0_iter20 : BOOLEAN;
    signal ap_block_state29_pp1_stage0_iter21 : BOOLEAN;
    signal ap_block_state30_pp1_stage0_iter22 : BOOLEAN;
    signal ap_block_state31_pp1_stage0_iter23 : BOOLEAN;
    signal ap_block_state32_pp1_stage0_iter24 : BOOLEAN;
    signal ap_block_state33_pp1_stage0_iter25 : BOOLEAN;
    signal ap_block_state34_pp1_stage0_iter26 : BOOLEAN;
    signal ap_block_state35_pp1_stage0_iter27 : BOOLEAN;
    signal ap_block_state36_pp1_stage0_iter28 : BOOLEAN;
    signal ap_block_state37_pp1_stage0_iter29 : BOOLEAN;
    signal ap_block_state38_pp1_stage0_iter30 : BOOLEAN;
    signal ap_block_state39_pp1_stage0_iter31 : BOOLEAN;
    signal ap_block_state40_pp1_stage0_iter32 : BOOLEAN;
    signal ap_block_state41_pp1_stage0_iter33 : BOOLEAN;
    signal ap_block_state42_pp1_stage0_iter34 : BOOLEAN;
    signal ap_block_state43_pp1_stage0_iter35 : BOOLEAN;
    signal ap_block_state44_pp1_stage0_iter36 : BOOLEAN;
    signal ap_block_state45_pp1_stage0_iter37 : BOOLEAN;
    signal ap_block_state46_pp1_stage0_iter38 : BOOLEAN;
    signal ap_block_state47_pp1_stage0_iter39 : BOOLEAN;
    signal ap_block_state48_pp1_stage0_iter40 : BOOLEAN;
    signal ap_block_state49_pp1_stage0_iter41 : BOOLEAN;
    signal ap_block_state50_pp1_stage0_iter42 : BOOLEAN;
    signal ap_block_state51_pp1_stage0_iter43 : BOOLEAN;
    signal ap_block_state52_pp1_stage0_iter44 : BOOLEAN;
    signal ap_block_state53_pp1_stage0_iter45 : BOOLEAN;
    signal ap_block_state54_pp1_stage0_iter46 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal window_buffer_load_0_reg_406 : STD_LOGIC_VECTOR (63 downto 0);
    signal window_buffer_load_7_1_reg_417 : STD_LOGIC_VECTOR (63 downto 0);
    signal window_buffer_load_1_reg_427 : STD_LOGIC_VECTOR (63 downto 0);
    signal window_buffer_load_7_2_reg_438 : STD_LOGIC_VECTOR (63 downto 0);
    signal window_buffer_load_2_reg_448 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln31_fu_556_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln31_reg_950 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln42_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_reg_955 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub13_fu_568_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub13_reg_959 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub47_fu_574_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub47_reg_964 : STD_LOGIC_VECTOR (31 downto 0);
    signal cmp4827_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp4827_reg_969 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln49_fu_586_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln49_reg_973 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln39_fu_622_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln39_reg_981 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal select_ln39_fu_634_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln39_reg_986 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln39_fu_616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln39_14_fu_775_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln39_14_reg_1039 : STD_LOGIC_VECTOR (4 downto 0);
    signal kernel_conv7_load_reg_1044 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal kernel_conv7_load_1_reg_1049 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv7_load_2_reg_1054 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv7_load_3_reg_1059 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv7_load_4_reg_1064 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv7_load_5_reg_1069 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv7_load_6_reg_1074 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv7_load_7_reg_1079 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv7_load_8_reg_1084 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln45_fu_793_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln45_reg_1089 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_4_fu_803_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_4_reg_1094 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln42_fu_808_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal j_cast3_fu_814_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_cast3_reg_1103 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_1_1_addr_reg_1108 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln52_fu_859_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln64_fu_869_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1153 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal icmp_ln64_reg_1153_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1153_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1153_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1153_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1153_pp1_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1153_pp1_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1153_pp1_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1153_pp1_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1153_pp1_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1153_pp1_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1153_pp1_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1153_pp1_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1153_pp1_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1153_pp1_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1153_pp1_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1153_pp1_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1153_pp1_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1153_pp1_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1153_pp1_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1153_pp1_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1153_pp1_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1153_pp1_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1153_pp1_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1153_pp1_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1153_pp1_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1153_pp1_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1153_pp1_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1153_pp1_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1153_pp1_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1153_pp1_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1153_pp1_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1153_pp1_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1153_pp1_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1153_pp1_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1153_pp1_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1153_pp1_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1153_pp1_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1153_pp1_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1153_pp1_iter39_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1153_pp1_iter40_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1153_pp1_iter41_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1153_pp1_iter42_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1153_pp1_iter43_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1153_pp1_iter44_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1153_pp1_iter45_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln64_fu_874_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal p_cast4_fu_890_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_reg_1162 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_reg_1162_pp1_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_reg_1162_pp1_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_reg_1162_pp1_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_reg_1162_pp1_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_reg_1162_pp1_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_reg_1162_pp1_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_reg_1162_pp1_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_reg_1162_pp1_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_reg_1162_pp1_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_reg_1162_pp1_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_reg_1162_pp1_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_reg_1162_pp1_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_reg_1162_pp1_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_reg_1162_pp1_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_reg_1162_pp1_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_reg_1162_pp1_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_reg_1162_pp1_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_reg_1162_pp1_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_reg_1162_pp1_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_reg_1162_pp1_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_reg_1162_pp1_iter21_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_reg_1162_pp1_iter22_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_reg_1162_pp1_iter23_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_0_1_load_2_reg_1173 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal line_buffer_0_1_load_2_reg_1173_pp1_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_501_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_reg_1179 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_506_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_1_reg_1184 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_1_reg_1184_pp1_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_1_reg_1184_pp1_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_1_reg_1184_pp1_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_511_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_2_reg_1189 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_2_reg_1189_pp1_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_2_reg_1189_pp1_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_2_reg_1189_pp1_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_2_reg_1189_pp1_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_2_reg_1189_pp1_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_2_reg_1189_pp1_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_459_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_s_reg_1194 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_464_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_14_0_1_reg_1204 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_1_1_load_3_reg_1209 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp1_iter13 : STD_LOGIC := '0';
    signal line_buffer_1_1_load_3_reg_1209_pp1_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_468_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_14_0_2_reg_1215 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_515_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_reg_1220 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_520_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_1_reg_1225 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_1_reg_1225_pp1_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_1_reg_1225_pp1_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_1_reg_1225_pp1_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_525_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_1230 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_1230_pp1_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_1230_pp1_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_1230_pp1_iter21_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_1230_pp1_iter22_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_1230_pp1_iter23_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_1230_pp1_iter24_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_472_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_14_1_reg_1235 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_476_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_14_1_1_reg_1245 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_2_1_load_3_reg_1250 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp1_iter25 : STD_LOGIC := '0';
    signal line_buffer_2_1_load_3_reg_1250_pp1_iter26_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_480_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_14_1_2_reg_1256 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_529_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_reg_1261 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_534_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_1_reg_1266 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_1_reg_1266_pp1_iter30_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_1_reg_1266_pp1_iter31_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_1_reg_1266_pp1_iter32_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_539_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1271 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1271_pp1_iter31_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1271_pp1_iter32_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1271_pp1_iter33_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1271_pp1_iter34_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1271_pp1_iter35_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1271_pp1_iter36_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_484_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_14_2_reg_1276 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_488_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_14_2_1_reg_1281 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_492_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_14_2_2_reg_1286 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_496_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_reg_1291 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_reg_1291_pp1_iter45_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln41_fu_945_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter26 : STD_LOGIC := '0';
    signal ap_condition_pp1_exit_iter25_state33 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter41 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter42 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter43 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter44 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter45 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter46 : STD_LOGIC := '0';
    signal indvar_flatten_reg_341 : STD_LOGIC_VECTOR (8 downto 0);
    signal num_channel_reg_352 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_363 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_window_buffer_load_0_phi_fu_409_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_window_buffer_load_1_phi_fu_430_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_window_buffer_load_2_phi_fu_451_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln39_5_fu_682_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln39_6_fu_693_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln39_7_fu_704_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln39_8_fu_715_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln39_9_fu_726_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln39_10_fu_737_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln39_11_fu_748_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln39_12_fu_759_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln39_13_fu_770_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal shl_ln_fu_548_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_594_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_fu_598_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_38_fu_610_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_38_fu_610_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln41_fu_628_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln39_12_fu_642_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_44_fu_652_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_mid1_fu_656_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_mid1_fu_668_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_mid1_fu_668_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_mid1_fu_668_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_38_fu_610_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln39_13_fu_674_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln39_4_fu_687_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln39_5_fu_698_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln39_6_fu_709_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln39_7_fu_720_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln39_8_fu_731_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln39_9_fu_742_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln39_10_fu_753_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln39_11_fu_764_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln45_8_fu_783_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_9_fu_788_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_cast_fu_799_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln45_4_fu_826_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_fu_820_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln45_7_fu_831_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln45_8_fu_837_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_850_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_cast_fu_865_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_42_fu_884_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_42_fu_884_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal bitcast_ln11_fu_895_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_898_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln11_fu_908_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln11_4_fu_918_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_fu_912_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_fu_924_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_fu_930_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp1_stage0_00001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component CNN_CNN_dcmp_64ns_64ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component CNN_CNN_add_32ns_32ns_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CNN_CNN_add_8ns_8ns_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component CNN_CNN_add_9ns_9ns_9_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component CNN_CNN_add_5ns_5ns_5_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component CNN_CNN_add_31ns_31ns_31_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component CNN_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_line_buffebkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component CNN_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_line_buffecud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component CNN_convolution_double_double_double_double_28_28_16_1_28_28_3_3_1_0_s_kernel_conv7 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address3 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address4 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address5 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce5 : IN STD_LOGIC;
        q5 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address6 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce6 : IN STD_LOGIC;
        q6 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address7 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce7 : IN STD_LOGIC;
        q7 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address8 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce8 : IN STD_LOGIC;
        q8 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    line_buffer_1_1_U : component CNN_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_line_buffebkb
    generic map (
        DataWidth => 64,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_1_1_address0,
        ce0 => line_buffer_1_1_ce0,
        q0 => line_buffer_1_1_q0,
        address1 => line_buffer_1_1_address1,
        ce1 => line_buffer_1_1_ce1,
        we1 => line_buffer_1_1_we1,
        d1 => line_buffer_2_1_q0,
        q1 => line_buffer_1_1_q1);

    line_buffer_0_1_U : component CNN_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_line_buffecud
    generic map (
        DataWidth => 64,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_0_1_address0,
        ce0 => line_buffer_0_1_ce0,
        we0 => line_buffer_0_1_we0,
        d0 => line_buffer_1_1_q0,
        q0 => line_buffer_0_1_q0,
        address1 => line_buffer_0_1_address1,
        ce1 => line_buffer_0_1_ce1,
        q1 => line_buffer_0_1_q1);

    line_buffer_2_1_U : component CNN_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_line_buffecud
    generic map (
        DataWidth => 64,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_2_1_address0,
        ce0 => line_buffer_2_1_ce0,
        we0 => line_buffer_2_1_we0,
        d0 => line_buffer_2_1_d0,
        q0 => line_buffer_2_1_q0,
        address1 => line_buffer_2_1_address1,
        ce1 => line_buffer_2_1_ce1,
        q1 => line_buffer_2_1_q1);

    kernel_conv7_U : component CNN_convolution_double_double_double_double_28_28_16_1_28_28_3_3_1_0_s_kernel_conv7
    generic map (
        DataWidth => 64,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => kernel_conv7_address0,
        ce0 => kernel_conv7_ce0,
        q0 => kernel_conv7_q0,
        address1 => kernel_conv7_address1,
        ce1 => kernel_conv7_ce1,
        q1 => kernel_conv7_q1,
        address2 => kernel_conv7_address2,
        ce2 => kernel_conv7_ce2,
        q2 => kernel_conv7_q2,
        address3 => kernel_conv7_address3,
        ce3 => kernel_conv7_ce3,
        q3 => kernel_conv7_q3,
        address4 => kernel_conv7_address4,
        ce4 => kernel_conv7_ce4,
        q4 => kernel_conv7_q4,
        address5 => kernel_conv7_address5,
        ce5 => kernel_conv7_ce5,
        q5 => kernel_conv7_q5,
        address6 => kernel_conv7_address6,
        ce6 => kernel_conv7_ce6,
        q6 => kernel_conv7_q6,
        address7 => kernel_conv7_address7,
        ce7 => kernel_conv7_ce7,
        q7 => kernel_conv7_q7,
        address8 => kernel_conv7_address8,
        ce8 => kernel_conv7_ce8,
        q8 => kernel_conv7_q8);

    CNN_dadd_64ns_64ns_64_4_full_dsp_1_U310 : component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_reg_1179,
        din1 => ap_const_lv64_0,
        ce => ap_const_logic_1,
        dout => grp_fu_459_p2);

    CNN_dadd_64ns_64ns_64_4_full_dsp_1_U311 : component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_s_reg_1194,
        din1 => mul_0_1_reg_1184_pp1_iter8_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_464_p2);

    CNN_dadd_64ns_64ns_64_4_full_dsp_1_U312 : component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_14_0_1_reg_1204,
        din1 => mul_0_2_reg_1189_pp1_iter12_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_468_p2);

    CNN_dadd_64ns_64ns_64_4_full_dsp_1_U313 : component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_14_0_2_reg_1215,
        din1 => mul_1_reg_1220,
        ce => ap_const_logic_1,
        dout => grp_fu_472_p2);

    CNN_dadd_64ns_64ns_64_4_full_dsp_1_U314 : component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_14_1_reg_1235,
        din1 => mul_1_1_reg_1225_pp1_iter20_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_476_p2);

    CNN_dadd_64ns_64ns_64_4_full_dsp_1_U315 : component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_14_1_1_reg_1245,
        din1 => mul_1_2_reg_1230_pp1_iter24_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_480_p2);

    CNN_dadd_64ns_64ns_64_4_full_dsp_1_U316 : component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_14_1_2_reg_1256,
        din1 => mul_2_reg_1261,
        ce => ap_const_logic_1,
        dout => grp_fu_484_p2);

    CNN_dadd_64ns_64ns_64_4_full_dsp_1_U317 : component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_14_2_reg_1276,
        din1 => mul_2_1_reg_1266_pp1_iter32_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_488_p2);

    CNN_dadd_64ns_64ns_64_4_full_dsp_1_U318 : component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_14_2_1_reg_1281,
        din1 => mul_2_2_reg_1271_pp1_iter36_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_492_p2);

    CNN_dadd_64ns_64ns_64_4_full_dsp_1_U319 : component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_14_2_2_reg_1286,
        din1 => ap_const_lv64_BFD40F03DEB1D19F,
        ce => ap_const_logic_1,
        dout => grp_fu_496_p2);

    CNN_dmul_64ns_64ns_64_4_max_dsp_1_U320 : component CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_phi_mux_window_buffer_load_0_phi_fu_409_p4,
        din1 => kernel_conv7_load_reg_1044,
        ce => ap_const_logic_1,
        dout => grp_fu_501_p2);

    CNN_dmul_64ns_64ns_64_4_max_dsp_1_U321 : component CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => window_buffer_load_7_0_reg_396,
        din1 => kernel_conv7_load_1_reg_1049,
        ce => ap_const_logic_1,
        dout => grp_fu_506_p2);

    CNN_dmul_64ns_64ns_64_4_max_dsp_1_U322 : component CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => line_buffer_0_1_load_2_reg_1173_pp1_iter2_reg,
        din1 => kernel_conv7_load_2_reg_1054,
        ce => ap_const_logic_1,
        dout => grp_fu_511_p2);

    CNN_dmul_64ns_64ns_64_4_max_dsp_1_U323 : component CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_phi_mux_window_buffer_load_1_phi_fu_430_p4,
        din1 => kernel_conv7_load_3_reg_1059,
        ce => ap_const_logic_1,
        dout => grp_fu_515_p2);

    CNN_dmul_64ns_64ns_64_4_max_dsp_1_U324 : component CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => window_buffer_load_7_1_reg_417,
        din1 => kernel_conv7_load_4_reg_1064,
        ce => ap_const_logic_1,
        dout => grp_fu_520_p2);

    CNN_dmul_64ns_64ns_64_4_max_dsp_1_U325 : component CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => line_buffer_1_1_load_3_reg_1209_pp1_iter14_reg,
        din1 => kernel_conv7_load_5_reg_1069,
        ce => ap_const_logic_1,
        dout => grp_fu_525_p2);

    CNN_dmul_64ns_64ns_64_4_max_dsp_1_U326 : component CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_phi_mux_window_buffer_load_2_phi_fu_451_p4,
        din1 => kernel_conv7_load_6_reg_1074,
        ce => ap_const_logic_1,
        dout => grp_fu_529_p2);

    CNN_dmul_64ns_64ns_64_4_max_dsp_1_U327 : component CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => window_buffer_load_7_2_reg_438,
        din1 => kernel_conv7_load_7_reg_1079,
        ce => ap_const_logic_1,
        dout => grp_fu_534_p2);

    CNN_dmul_64ns_64ns_64_4_max_dsp_1_U328 : component CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => line_buffer_2_1_load_3_reg_1250_pp1_iter26_reg,
        din1 => kernel_conv7_load_8_reg_1084,
        ce => ap_const_logic_1,
        dout => grp_fu_539_p2);

    CNN_dcmp_64ns_64ns_1_2_no_dsp_1_U329 : component CNN_CNN_dcmp_64ns_64ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_reg_1291,
        din1 => ap_const_lv64_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_543_p2);

    CNN_add_32ns_32ns_32_1_1_U330 : component CNN_CNN_add_32ns_32ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => shl_ln_fu_548_p3,
        din1 => ap_const_lv32_1C,
        dout => add_ln31_fu_556_p2);

    CNN_add_32ns_32ns_32_1_1_U331 : component CNN_CNN_add_32ns_32ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => shl_ln_fu_548_p3,
        din1 => ap_const_lv32_1B,
        dout => sub13_fu_568_p2);

    CNN_add_32ns_32ns_32_1_1_U332 : component CNN_CNN_add_32ns_32ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => shl_ln_fu_548_p3,
        din1 => ap_const_lv32_1A,
        dout => sub47_fu_574_p2);

    CNN_add_8ns_8ns_8_1_1_U333 : component CNN_CNN_add_8ns_8ns_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => empty_38_fu_610_p0,
        din1 => empty_38_fu_610_p1,
        dout => empty_38_fu_610_p2);

    CNN_add_9ns_9ns_9_1_1_U334 : component CNN_CNN_add_9ns_9ns_9_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        din0 => ap_const_lv9_1,
        din1 => indvar_flatten_reg_341,
        dout => add_ln39_fu_622_p2);

    CNN_add_5ns_5ns_5_1_1_U335 : component CNN_CNN_add_5ns_5ns_5_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        din0 => ap_const_lv5_1,
        din1 => num_channel_reg_352,
        dout => add_ln39_12_fu_642_p2);

    CNN_add_8ns_8ns_8_1_1_U336 : component CNN_CNN_add_8ns_8ns_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => p_mid1_fu_668_p0,
        din1 => p_mid1_fu_668_p1,
        dout => p_mid1_fu_668_p2);

    CNN_add_8ns_8ns_8_1_1_U337 : component CNN_CNN_add_8ns_8ns_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_1,
        din1 => select_ln39_13_fu_674_p3,
        dout => add_ln39_4_fu_687_p2);

    CNN_add_8ns_8ns_8_1_1_U338 : component CNN_CNN_add_8ns_8ns_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_2,
        din1 => select_ln39_13_fu_674_p3,
        dout => add_ln39_5_fu_698_p2);

    CNN_add_8ns_8ns_8_1_1_U339 : component CNN_CNN_add_8ns_8ns_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_3,
        din1 => select_ln39_13_fu_674_p3,
        dout => add_ln39_6_fu_709_p2);

    CNN_add_8ns_8ns_8_1_1_U340 : component CNN_CNN_add_8ns_8ns_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_4,
        din1 => select_ln39_13_fu_674_p3,
        dout => add_ln39_7_fu_720_p2);

    CNN_add_8ns_8ns_8_1_1_U341 : component CNN_CNN_add_8ns_8ns_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_5,
        din1 => select_ln39_13_fu_674_p3,
        dout => add_ln39_8_fu_731_p2);

    CNN_add_8ns_8ns_8_1_1_U342 : component CNN_CNN_add_8ns_8ns_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_6,
        din1 => select_ln39_13_fu_674_p3,
        dout => add_ln39_9_fu_742_p2);

    CNN_add_8ns_8ns_8_1_1_U343 : component CNN_CNN_add_8ns_8ns_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_7,
        din1 => select_ln39_13_fu_674_p3,
        dout => add_ln39_10_fu_753_p2);

    CNN_add_8ns_8ns_8_1_1_U344 : component CNN_CNN_add_8ns_8ns_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_8,
        din1 => select_ln39_13_fu_674_p3,
        dout => add_ln39_11_fu_764_p2);

    CNN_add_5ns_5ns_5_1_1_U345 : component CNN_CNN_add_5ns_5ns_5_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        din0 => j_reg_374,
        din1 => ap_const_lv5_1,
        dout => add_ln42_fu_808_p2);

    CNN_add_31ns_31ns_31_1_1_U346 : component CNN_CNN_add_31ns_31ns_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        din0 => b_reg_385,
        din1 => ap_const_lv31_1,
        dout => add_ln64_fu_874_p2);

    CNN_add_5ns_5ns_5_1_1_U347 : component CNN_CNN_add_5ns_5ns_5_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        din0 => ap_const_lv5_2,
        din1 => empty_42_fu_884_p1,
        dout => empty_42_fu_884_p2);

    CNN_add_5ns_5ns_5_1_1_U348 : component CNN_CNN_add_5ns_5ns_5_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        din0 => select_ln39_reg_986,
        din1 => ap_const_lv5_1,
        dout => add_ln41_fu_945_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln42_reg_955 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state4);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln42_reg_955 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp1_flush_enable)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((cmp4827_reg_969 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter11 <= ap_enable_reg_pp1_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter12 <= ap_enable_reg_pp1_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter13 <= ap_enable_reg_pp1_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter14 <= ap_enable_reg_pp1_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter15 <= ap_enable_reg_pp1_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter16 <= ap_enable_reg_pp1_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter17 <= ap_enable_reg_pp1_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter18 <= ap_enable_reg_pp1_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter19 <= ap_enable_reg_pp1_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter20 <= ap_enable_reg_pp1_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter21 <= ap_enable_reg_pp1_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter22 <= ap_enable_reg_pp1_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter23 <= ap_enable_reg_pp1_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter24 <= ap_enable_reg_pp1_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter25 <= ap_enable_reg_pp1_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter25_state33)) then 
                        ap_enable_reg_pp1_iter26 <= ap_enable_reg_pp1_iter24;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter26 <= ap_enable_reg_pp1_iter25;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter27 <= ap_enable_reg_pp1_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter28 <= ap_enable_reg_pp1_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter29 <= ap_enable_reg_pp1_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter30 <= ap_enable_reg_pp1_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter31 <= ap_enable_reg_pp1_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter32 <= ap_enable_reg_pp1_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter33 <= ap_enable_reg_pp1_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter34 <= ap_enable_reg_pp1_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter35 <= ap_enable_reg_pp1_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter36 <= ap_enable_reg_pp1_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter37 <= ap_enable_reg_pp1_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter38 <= ap_enable_reg_pp1_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter39 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter39 <= ap_enable_reg_pp1_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter40 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter40 <= ap_enable_reg_pp1_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter41 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter41 <= ap_enable_reg_pp1_iter40;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter42 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter42 <= ap_enable_reg_pp1_iter41;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter43 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter43 <= ap_enable_reg_pp1_iter42;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter44_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter44 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter44 <= ap_enable_reg_pp1_iter43;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter45_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter45 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter45 <= ap_enable_reg_pp1_iter44;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter46_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter46 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter46 <= ap_enable_reg_pp1_iter45;
                elsif (((cmp4827_reg_969 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_enable_reg_pp1_iter46 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
                end if; 
            end if;
        end if;
    end process;


    b_reg_385_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp4827_reg_969 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                b_reg_385 <= ap_const_lv31_0;
            elsif (((icmp_ln64_fu_869_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                b_reg_385 <= add_ln64_fu_874_p2;
            end if; 
        end if;
    end process;

    i_reg_363_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                i_reg_363 <= add_ln41_fu_945_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_363 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_341_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                indvar_flatten_reg_341 <= add_ln39_reg_981;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_341 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j_reg_374_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln42_reg_955 = ap_const_lv1_1))) then 
                j_reg_374 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln42_4_fu_803_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_reg_374 <= add_ln42_fu_808_p2;
            end if; 
        end if;
    end process;

    num_channel_reg_352_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                num_channel_reg_352 <= select_ln39_14_reg_1039;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                num_channel_reg_352 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    window_buffer_load_0_reg_406_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp4827_reg_969 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                window_buffer_load_0_reg_406 <= line_buffer_0_1_q0;
            elsif (((icmp_ln64_reg_1153_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                window_buffer_load_0_reg_406 <= window_buffer_load_7_0_reg_396;
            end if; 
        end if;
    end process;

    window_buffer_load_1_reg_427_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp4827_reg_969 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                window_buffer_load_1_reg_427 <= line_buffer_1_1_q0;
            elsif (((icmp_ln64_reg_1153_pp1_iter13_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                window_buffer_load_1_reg_427 <= window_buffer_load_7_1_reg_417;
            end if; 
        end if;
    end process;

    window_buffer_load_2_reg_448_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp4827_reg_969 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                window_buffer_load_2_reg_448 <= line_buffer_2_1_q0;
            elsif (((icmp_ln64_reg_1153_pp1_iter25_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                window_buffer_load_2_reg_448 <= window_buffer_load_7_2_reg_438;
            end if; 
        end if;
    end process;

    window_buffer_load_7_0_reg_396_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp4827_reg_969 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                window_buffer_load_7_0_reg_396 <= line_buffer_0_1_q1;
            elsif (((icmp_ln64_reg_1153_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                window_buffer_load_7_0_reg_396 <= line_buffer_0_1_load_2_reg_1173;
            end if; 
        end if;
    end process;

    window_buffer_load_7_1_reg_417_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp4827_reg_969 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                window_buffer_load_7_1_reg_417 <= line_buffer_1_1_q1;
            elsif (((icmp_ln64_reg_1153_pp1_iter13_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                window_buffer_load_7_1_reg_417 <= line_buffer_1_1_load_3_reg_1209;
            end if; 
        end if;
    end process;

    window_buffer_load_7_2_reg_438_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp4827_reg_969 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                window_buffer_load_7_2_reg_438 <= line_buffer_2_1_q1;
            elsif (((icmp_ln64_reg_1153_pp1_iter25_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                window_buffer_load_7_2_reg_438 <= line_buffer_2_1_load_3_reg_1250;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                add_ln31_reg_950 <= add_ln31_fu_556_p2;
                bitcast_ln49_reg_973 <= bitcast_ln49_fu_586_p1;
                cmp4827_reg_969 <= cmp4827_fu_580_p2;
                icmp_ln42_reg_955 <= icmp_ln42_fu_562_p2;
                sub13_reg_959 <= sub13_fu_568_p2;
                sub47_reg_964 <= sub47_fu_574_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln39_reg_981 <= add_ln39_fu_622_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln42_4_reg_1094 <= icmp_ln42_4_fu_803_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln64_reg_1153 <= icmp_ln64_fu_869_p2;
                icmp_ln64_reg_1153_pp1_iter1_reg <= icmp_ln64_reg_1153;
                    p_cast4_reg_1162_pp1_iter1_reg(4 downto 0) <= p_cast4_reg_1162(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                icmp_ln64_reg_1153_pp1_iter10_reg <= icmp_ln64_reg_1153_pp1_iter9_reg;
                icmp_ln64_reg_1153_pp1_iter11_reg <= icmp_ln64_reg_1153_pp1_iter10_reg;
                icmp_ln64_reg_1153_pp1_iter12_reg <= icmp_ln64_reg_1153_pp1_iter11_reg;
                icmp_ln64_reg_1153_pp1_iter13_reg <= icmp_ln64_reg_1153_pp1_iter12_reg;
                icmp_ln64_reg_1153_pp1_iter14_reg <= icmp_ln64_reg_1153_pp1_iter13_reg;
                icmp_ln64_reg_1153_pp1_iter15_reg <= icmp_ln64_reg_1153_pp1_iter14_reg;
                icmp_ln64_reg_1153_pp1_iter16_reg <= icmp_ln64_reg_1153_pp1_iter15_reg;
                icmp_ln64_reg_1153_pp1_iter17_reg <= icmp_ln64_reg_1153_pp1_iter16_reg;
                icmp_ln64_reg_1153_pp1_iter18_reg <= icmp_ln64_reg_1153_pp1_iter17_reg;
                icmp_ln64_reg_1153_pp1_iter19_reg <= icmp_ln64_reg_1153_pp1_iter18_reg;
                icmp_ln64_reg_1153_pp1_iter20_reg <= icmp_ln64_reg_1153_pp1_iter19_reg;
                icmp_ln64_reg_1153_pp1_iter21_reg <= icmp_ln64_reg_1153_pp1_iter20_reg;
                icmp_ln64_reg_1153_pp1_iter22_reg <= icmp_ln64_reg_1153_pp1_iter21_reg;
                icmp_ln64_reg_1153_pp1_iter23_reg <= icmp_ln64_reg_1153_pp1_iter22_reg;
                icmp_ln64_reg_1153_pp1_iter24_reg <= icmp_ln64_reg_1153_pp1_iter23_reg;
                icmp_ln64_reg_1153_pp1_iter25_reg <= icmp_ln64_reg_1153_pp1_iter24_reg;
                icmp_ln64_reg_1153_pp1_iter26_reg <= icmp_ln64_reg_1153_pp1_iter25_reg;
                icmp_ln64_reg_1153_pp1_iter27_reg <= icmp_ln64_reg_1153_pp1_iter26_reg;
                icmp_ln64_reg_1153_pp1_iter28_reg <= icmp_ln64_reg_1153_pp1_iter27_reg;
                icmp_ln64_reg_1153_pp1_iter29_reg <= icmp_ln64_reg_1153_pp1_iter28_reg;
                icmp_ln64_reg_1153_pp1_iter2_reg <= icmp_ln64_reg_1153_pp1_iter1_reg;
                icmp_ln64_reg_1153_pp1_iter30_reg <= icmp_ln64_reg_1153_pp1_iter29_reg;
                icmp_ln64_reg_1153_pp1_iter31_reg <= icmp_ln64_reg_1153_pp1_iter30_reg;
                icmp_ln64_reg_1153_pp1_iter32_reg <= icmp_ln64_reg_1153_pp1_iter31_reg;
                icmp_ln64_reg_1153_pp1_iter33_reg <= icmp_ln64_reg_1153_pp1_iter32_reg;
                icmp_ln64_reg_1153_pp1_iter34_reg <= icmp_ln64_reg_1153_pp1_iter33_reg;
                icmp_ln64_reg_1153_pp1_iter35_reg <= icmp_ln64_reg_1153_pp1_iter34_reg;
                icmp_ln64_reg_1153_pp1_iter36_reg <= icmp_ln64_reg_1153_pp1_iter35_reg;
                icmp_ln64_reg_1153_pp1_iter37_reg <= icmp_ln64_reg_1153_pp1_iter36_reg;
                icmp_ln64_reg_1153_pp1_iter38_reg <= icmp_ln64_reg_1153_pp1_iter37_reg;
                icmp_ln64_reg_1153_pp1_iter39_reg <= icmp_ln64_reg_1153_pp1_iter38_reg;
                icmp_ln64_reg_1153_pp1_iter3_reg <= icmp_ln64_reg_1153_pp1_iter2_reg;
                icmp_ln64_reg_1153_pp1_iter40_reg <= icmp_ln64_reg_1153_pp1_iter39_reg;
                icmp_ln64_reg_1153_pp1_iter41_reg <= icmp_ln64_reg_1153_pp1_iter40_reg;
                icmp_ln64_reg_1153_pp1_iter42_reg <= icmp_ln64_reg_1153_pp1_iter41_reg;
                icmp_ln64_reg_1153_pp1_iter43_reg <= icmp_ln64_reg_1153_pp1_iter42_reg;
                icmp_ln64_reg_1153_pp1_iter44_reg <= icmp_ln64_reg_1153_pp1_iter43_reg;
                icmp_ln64_reg_1153_pp1_iter45_reg <= icmp_ln64_reg_1153_pp1_iter44_reg;
                icmp_ln64_reg_1153_pp1_iter4_reg <= icmp_ln64_reg_1153_pp1_iter3_reg;
                icmp_ln64_reg_1153_pp1_iter5_reg <= icmp_ln64_reg_1153_pp1_iter4_reg;
                icmp_ln64_reg_1153_pp1_iter6_reg <= icmp_ln64_reg_1153_pp1_iter5_reg;
                icmp_ln64_reg_1153_pp1_iter7_reg <= icmp_ln64_reg_1153_pp1_iter6_reg;
                icmp_ln64_reg_1153_pp1_iter8_reg <= icmp_ln64_reg_1153_pp1_iter7_reg;
                icmp_ln64_reg_1153_pp1_iter9_reg <= icmp_ln64_reg_1153_pp1_iter8_reg;
                line_buffer_0_1_load_2_reg_1173_pp1_iter2_reg <= line_buffer_0_1_load_2_reg_1173;
                line_buffer_1_1_load_3_reg_1209_pp1_iter14_reg <= line_buffer_1_1_load_3_reg_1209;
                line_buffer_2_1_load_3_reg_1250_pp1_iter26_reg <= line_buffer_2_1_load_3_reg_1250;
                mul_0_1_reg_1184_pp1_iter6_reg <= mul_0_1_reg_1184;
                mul_0_1_reg_1184_pp1_iter7_reg <= mul_0_1_reg_1184_pp1_iter6_reg;
                mul_0_1_reg_1184_pp1_iter8_reg <= mul_0_1_reg_1184_pp1_iter7_reg;
                mul_0_2_reg_1189_pp1_iter10_reg <= mul_0_2_reg_1189_pp1_iter9_reg;
                mul_0_2_reg_1189_pp1_iter11_reg <= mul_0_2_reg_1189_pp1_iter10_reg;
                mul_0_2_reg_1189_pp1_iter12_reg <= mul_0_2_reg_1189_pp1_iter11_reg;
                mul_0_2_reg_1189_pp1_iter7_reg <= mul_0_2_reg_1189;
                mul_0_2_reg_1189_pp1_iter8_reg <= mul_0_2_reg_1189_pp1_iter7_reg;
                mul_0_2_reg_1189_pp1_iter9_reg <= mul_0_2_reg_1189_pp1_iter8_reg;
                mul_1_1_reg_1225_pp1_iter18_reg <= mul_1_1_reg_1225;
                mul_1_1_reg_1225_pp1_iter19_reg <= mul_1_1_reg_1225_pp1_iter18_reg;
                mul_1_1_reg_1225_pp1_iter20_reg <= mul_1_1_reg_1225_pp1_iter19_reg;
                mul_1_2_reg_1230_pp1_iter19_reg <= mul_1_2_reg_1230;
                mul_1_2_reg_1230_pp1_iter20_reg <= mul_1_2_reg_1230_pp1_iter19_reg;
                mul_1_2_reg_1230_pp1_iter21_reg <= mul_1_2_reg_1230_pp1_iter20_reg;
                mul_1_2_reg_1230_pp1_iter22_reg <= mul_1_2_reg_1230_pp1_iter21_reg;
                mul_1_2_reg_1230_pp1_iter23_reg <= mul_1_2_reg_1230_pp1_iter22_reg;
                mul_1_2_reg_1230_pp1_iter24_reg <= mul_1_2_reg_1230_pp1_iter23_reg;
                mul_2_1_reg_1266_pp1_iter30_reg <= mul_2_1_reg_1266;
                mul_2_1_reg_1266_pp1_iter31_reg <= mul_2_1_reg_1266_pp1_iter30_reg;
                mul_2_1_reg_1266_pp1_iter32_reg <= mul_2_1_reg_1266_pp1_iter31_reg;
                mul_2_2_reg_1271_pp1_iter31_reg <= mul_2_2_reg_1271;
                mul_2_2_reg_1271_pp1_iter32_reg <= mul_2_2_reg_1271_pp1_iter31_reg;
                mul_2_2_reg_1271_pp1_iter33_reg <= mul_2_2_reg_1271_pp1_iter32_reg;
                mul_2_2_reg_1271_pp1_iter34_reg <= mul_2_2_reg_1271_pp1_iter33_reg;
                mul_2_2_reg_1271_pp1_iter35_reg <= mul_2_2_reg_1271_pp1_iter34_reg;
                mul_2_2_reg_1271_pp1_iter36_reg <= mul_2_2_reg_1271_pp1_iter35_reg;
                    p_cast4_reg_1162_pp1_iter10_reg(4 downto 0) <= p_cast4_reg_1162_pp1_iter9_reg(4 downto 0);
                    p_cast4_reg_1162_pp1_iter11_reg(4 downto 0) <= p_cast4_reg_1162_pp1_iter10_reg(4 downto 0);
                    p_cast4_reg_1162_pp1_iter12_reg(4 downto 0) <= p_cast4_reg_1162_pp1_iter11_reg(4 downto 0);
                    p_cast4_reg_1162_pp1_iter13_reg(4 downto 0) <= p_cast4_reg_1162_pp1_iter12_reg(4 downto 0);
                    p_cast4_reg_1162_pp1_iter14_reg(4 downto 0) <= p_cast4_reg_1162_pp1_iter13_reg(4 downto 0);
                    p_cast4_reg_1162_pp1_iter15_reg(4 downto 0) <= p_cast4_reg_1162_pp1_iter14_reg(4 downto 0);
                    p_cast4_reg_1162_pp1_iter16_reg(4 downto 0) <= p_cast4_reg_1162_pp1_iter15_reg(4 downto 0);
                    p_cast4_reg_1162_pp1_iter17_reg(4 downto 0) <= p_cast4_reg_1162_pp1_iter16_reg(4 downto 0);
                    p_cast4_reg_1162_pp1_iter18_reg(4 downto 0) <= p_cast4_reg_1162_pp1_iter17_reg(4 downto 0);
                    p_cast4_reg_1162_pp1_iter19_reg(4 downto 0) <= p_cast4_reg_1162_pp1_iter18_reg(4 downto 0);
                    p_cast4_reg_1162_pp1_iter20_reg(4 downto 0) <= p_cast4_reg_1162_pp1_iter19_reg(4 downto 0);
                    p_cast4_reg_1162_pp1_iter21_reg(4 downto 0) <= p_cast4_reg_1162_pp1_iter20_reg(4 downto 0);
                    p_cast4_reg_1162_pp1_iter22_reg(4 downto 0) <= p_cast4_reg_1162_pp1_iter21_reg(4 downto 0);
                    p_cast4_reg_1162_pp1_iter23_reg(4 downto 0) <= p_cast4_reg_1162_pp1_iter22_reg(4 downto 0);
                    p_cast4_reg_1162_pp1_iter2_reg(4 downto 0) <= p_cast4_reg_1162_pp1_iter1_reg(4 downto 0);
                    p_cast4_reg_1162_pp1_iter3_reg(4 downto 0) <= p_cast4_reg_1162_pp1_iter2_reg(4 downto 0);
                    p_cast4_reg_1162_pp1_iter4_reg(4 downto 0) <= p_cast4_reg_1162_pp1_iter3_reg(4 downto 0);
                    p_cast4_reg_1162_pp1_iter5_reg(4 downto 0) <= p_cast4_reg_1162_pp1_iter4_reg(4 downto 0);
                    p_cast4_reg_1162_pp1_iter6_reg(4 downto 0) <= p_cast4_reg_1162_pp1_iter5_reg(4 downto 0);
                    p_cast4_reg_1162_pp1_iter7_reg(4 downto 0) <= p_cast4_reg_1162_pp1_iter6_reg(4 downto 0);
                    p_cast4_reg_1162_pp1_iter8_reg(4 downto 0) <= p_cast4_reg_1162_pp1_iter7_reg(4 downto 0);
                    p_cast4_reg_1162_pp1_iter9_reg(4 downto 0) <= p_cast4_reg_1162_pp1_iter8_reg(4 downto 0);
                sum_reg_1291_pp1_iter45_reg <= sum_reg_1291;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln42_4_fu_803_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    j_cast3_reg_1103(4 downto 0) <= j_cast3_fu_814_p1(4 downto 0);
                line_buffer_1_1_addr_reg_1108 <= j_cast3_fu_814_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                kernel_conv7_load_1_reg_1049 <= kernel_conv7_q1;
                kernel_conv7_load_2_reg_1054 <= kernel_conv7_q2;
                kernel_conv7_load_3_reg_1059 <= kernel_conv7_q3;
                kernel_conv7_load_4_reg_1064 <= kernel_conv7_q4;
                kernel_conv7_load_5_reg_1069 <= kernel_conv7_q5;
                kernel_conv7_load_6_reg_1074 <= kernel_conv7_q6;
                kernel_conv7_load_7_reg_1079 <= kernel_conv7_q7;
                kernel_conv7_load_8_reg_1084 <= kernel_conv7_q8;
                kernel_conv7_load_reg_1044 <= kernel_conv7_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1153 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                line_buffer_0_1_load_2_reg_1173 <= line_buffer_0_1_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1153_pp1_iter12_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                line_buffer_1_1_load_3_reg_1209 <= line_buffer_1_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1153_pp1_iter24_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter25 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                line_buffer_2_1_load_3_reg_1250 <= line_buffer_2_1_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1153_pp1_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                mul_0_1_reg_1184 <= grp_fu_506_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1153_pp1_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                mul_0_2_reg_1189 <= grp_fu_511_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1153_pp1_iter16_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                mul_1_1_reg_1225 <= grp_fu_520_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1153_pp1_iter17_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                mul_1_2_reg_1230 <= grp_fu_525_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1153_pp1_iter15_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                mul_1_reg_1220 <= grp_fu_515_p2;
                sum_14_0_2_reg_1215 <= grp_fu_468_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1153_pp1_iter28_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                mul_2_1_reg_1266 <= grp_fu_534_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1153_pp1_iter29_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                mul_2_2_reg_1271 <= grp_fu_539_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1153_pp1_iter27_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                mul_2_reg_1261 <= grp_fu_529_p2;
                sum_14_1_2_reg_1256 <= grp_fu_480_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1153_pp1_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                mul_reg_1179 <= grp_fu_501_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln42_reg_955 = ap_const_lv1_1))) then
                or_ln45_reg_1089 <= or_ln45_fu_793_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_fu_869_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                    p_cast4_reg_1162(4 downto 0) <= p_cast4_fu_890_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln39_fu_616_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                select_ln39_14_reg_1039 <= select_ln39_14_fu_775_p3;
                select_ln39_reg_986 <= select_ln39_fu_634_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1153_pp1_iter11_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                sum_14_0_1_reg_1204 <= grp_fu_464_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1153_pp1_iter23_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                sum_14_1_1_reg_1245 <= grp_fu_476_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1153_pp1_iter19_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                sum_14_1_reg_1235 <= grp_fu_472_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1153_pp1_iter35_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                sum_14_2_1_reg_1281 <= grp_fu_488_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1153_pp1_iter39_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                sum_14_2_2_reg_1286 <= grp_fu_492_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1153_pp1_iter31_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                sum_14_2_reg_1276 <= grp_fu_484_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1153_pp1_iter43_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                sum_reg_1291 <= grp_fu_496_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1153_pp1_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                sum_s_reg_1194 <= grp_fu_459_p2;
            end if;
        end if;
    end process;
    j_cast3_reg_1103(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast4_reg_1162(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast4_reg_1162_pp1_iter1_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast4_reg_1162_pp1_iter2_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast4_reg_1162_pp1_iter3_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast4_reg_1162_pp1_iter4_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast4_reg_1162_pp1_iter5_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast4_reg_1162_pp1_iter6_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast4_reg_1162_pp1_iter7_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast4_reg_1162_pp1_iter8_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast4_reg_1162_pp1_iter9_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast4_reg_1162_pp1_iter10_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast4_reg_1162_pp1_iter11_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast4_reg_1162_pp1_iter12_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast4_reg_1162_pp1_iter13_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast4_reg_1162_pp1_iter14_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast4_reg_1162_pp1_iter15_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast4_reg_1162_pp1_iter16_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast4_reg_1162_pp1_iter17_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast4_reg_1162_pp1_iter18_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast4_reg_1162_pp1_iter19_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast4_reg_1162_pp1_iter20_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast4_reg_1162_pp1_iter21_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast4_reg_1162_pp1_iter22_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast4_reg_1162_pp1_iter23_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln42_reg_955, cmp4827_reg_969, ap_CS_fsm_state2, icmp_ln39_fu_616_p2, ap_CS_fsm_state3, icmp_ln42_4_fu_803_p2, ap_enable_reg_pp0_iter0, icmp_ln52_fu_859_p2, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_enable_reg_pp1_iter25, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter24, ap_enable_reg_pp1_iter26, ap_enable_reg_pp1_iter45, ap_enable_reg_pp1_iter46)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln39_fu_616_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln42_reg_955 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln42_4_fu_803_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln42_4_fu_803_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln52_fu_859_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((cmp4827_reg_969 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state55;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter26 = ap_const_logic_0) and (ap_enable_reg_pp1_iter24 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter25 = ap_const_logic_1))) and not(((ap_enable_reg_pp1_iter45 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter46 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter45 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter46 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter26 = ap_const_logic_0) and (ap_enable_reg_pp1_iter24 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter25 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    and_ln11_fu_930_p2 <= (or_ln11_fu_924_p2 and grp_fu_543_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state55 <= ap_CS_fsm(7);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp1_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp1_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp1_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp1_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp1_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp1_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp1_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp1_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp1_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp1_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp1_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp1_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp1_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp1_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp1_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp1_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp1_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp1_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp1_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp1_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp1_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp1_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp1_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp1_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp1_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp1_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp1_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp1_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp1_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp1_stage0_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp1_stage0_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp1_stage0_iter36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp1_stage0_iter37 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp1_stage0_iter38 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp1_stage0_iter39 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp1_stage0_iter40 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp1_stage0_iter41 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp1_stage0_iter42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp1_stage0_iter43 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp1_stage0_iter44 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp1_stage0_iter45 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp1_stage0_iter46 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(icmp_ln42_4_fu_803_p2)
    begin
        if ((icmp_ln42_4_fu_803_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter25_state33_assign_proc : process(ap_enable_reg_pp1_iter25, ap_enable_reg_pp1_iter24)
    begin
        if (((ap_enable_reg_pp1_iter24 = ap_const_logic_0) and (ap_enable_reg_pp1_iter25 = ap_const_logic_1))) then 
            ap_condition_pp1_exit_iter25_state33 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter25_state33 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_flush_enable_assign_proc : process(icmp_ln64_fu_869_p2, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln64_fu_869_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_condition_pp1_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp1_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln39_fu_616_p2)
    begin
        if ((((icmp_ln39_fu_616_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter13, ap_enable_reg_pp1_iter25, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter5, ap_enable_reg_pp1_iter6, ap_enable_reg_pp1_iter7, ap_enable_reg_pp1_iter8, ap_enable_reg_pp1_iter9, ap_enable_reg_pp1_iter10, ap_enable_reg_pp1_iter11, ap_enable_reg_pp1_iter12, ap_enable_reg_pp1_iter14, ap_enable_reg_pp1_iter15, ap_enable_reg_pp1_iter16, ap_enable_reg_pp1_iter17, ap_enable_reg_pp1_iter18, ap_enable_reg_pp1_iter19, ap_enable_reg_pp1_iter20, ap_enable_reg_pp1_iter21, ap_enable_reg_pp1_iter22, ap_enable_reg_pp1_iter23, ap_enable_reg_pp1_iter24, ap_enable_reg_pp1_iter26, ap_enable_reg_pp1_iter27, ap_enable_reg_pp1_iter28, ap_enable_reg_pp1_iter29, ap_enable_reg_pp1_iter30, ap_enable_reg_pp1_iter31, ap_enable_reg_pp1_iter32, ap_enable_reg_pp1_iter33, ap_enable_reg_pp1_iter34, ap_enable_reg_pp1_iter35, ap_enable_reg_pp1_iter36, ap_enable_reg_pp1_iter37, ap_enable_reg_pp1_iter38, ap_enable_reg_pp1_iter39, ap_enable_reg_pp1_iter40, ap_enable_reg_pp1_iter41, ap_enable_reg_pp1_iter42, ap_enable_reg_pp1_iter43, ap_enable_reg_pp1_iter44, ap_enable_reg_pp1_iter45, ap_enable_reg_pp1_iter46)
    begin
        if (((ap_enable_reg_pp1_iter46 = ap_const_logic_0) and (ap_enable_reg_pp1_iter45 = ap_const_logic_0) and (ap_enable_reg_pp1_iter44 = ap_const_logic_0) and (ap_enable_reg_pp1_iter43 = ap_const_logic_0) and (ap_enable_reg_pp1_iter42 = ap_const_logic_0) and (ap_enable_reg_pp1_iter41 = ap_const_logic_0) and (ap_enable_reg_pp1_iter40 = ap_const_logic_0) and (ap_enable_reg_pp1_iter39 = ap_const_logic_0) and (ap_enable_reg_pp1_iter38 = ap_const_logic_0) and (ap_enable_reg_pp1_iter37 = ap_const_logic_0) and (ap_enable_reg_pp1_iter36 = ap_const_logic_0) and (ap_enable_reg_pp1_iter35 = ap_const_logic_0) and (ap_enable_reg_pp1_iter34 = ap_const_logic_0) and (ap_enable_reg_pp1_iter33 = ap_const_logic_0) and (ap_enable_reg_pp1_iter32 = ap_const_logic_0) and (ap_enable_reg_pp1_iter31 = ap_const_logic_0) and (ap_enable_reg_pp1_iter30 = ap_const_logic_0) and (ap_enable_reg_pp1_iter29 = ap_const_logic_0) and (ap_enable_reg_pp1_iter28 = ap_const_logic_0) and (ap_enable_reg_pp1_iter27 = ap_const_logic_0) and (ap_enable_reg_pp1_iter26 = ap_const_logic_0) and (ap_enable_reg_pp1_iter24 = ap_const_logic_0) and (ap_enable_reg_pp1_iter23 = ap_const_logic_0) and (ap_enable_reg_pp1_iter22 = ap_const_logic_0) and (ap_enable_reg_pp1_iter21 = ap_const_logic_0) and (ap_enable_reg_pp1_iter20 = ap_const_logic_0) and (ap_enable_reg_pp1_iter19 = ap_const_logic_0) and (ap_enable_reg_pp1_iter18 = ap_const_logic_0) and (ap_enable_reg_pp1_iter17 = ap_const_logic_0) and (ap_enable_reg_pp1_iter16 = ap_const_logic_0) and (ap_enable_reg_pp1_iter15 = ap_const_logic_0) and (ap_enable_reg_pp1_iter14 = ap_const_logic_0) and (ap_enable_reg_pp1_iter12 = ap_const_logic_0) and (ap_enable_reg_pp1_iter11 = ap_const_logic_0) and (ap_enable_reg_pp1_iter10 = ap_const_logic_0) and (ap_enable_reg_pp1_iter9 = ap_const_logic_0) and (ap_enable_reg_pp1_iter8 = ap_const_logic_0) and (ap_enable_reg_pp1_iter7 = ap_const_logic_0) and (ap_enable_reg_pp1_iter6 = ap_const_logic_0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter25 = ap_const_logic_0) and (ap_enable_reg_pp1_iter13 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_window_buffer_load_0_phi_fu_409_p4_assign_proc : process(window_buffer_load_7_0_reg_396, window_buffer_load_0_reg_406, icmp_ln64_reg_1153_pp1_iter1_reg, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln64_reg_1153_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            ap_phi_mux_window_buffer_load_0_phi_fu_409_p4 <= window_buffer_load_7_0_reg_396;
        else 
            ap_phi_mux_window_buffer_load_0_phi_fu_409_p4 <= window_buffer_load_0_reg_406;
        end if; 
    end process;


    ap_phi_mux_window_buffer_load_1_phi_fu_430_p4_assign_proc : process(window_buffer_load_7_1_reg_417, window_buffer_load_1_reg_427, icmp_ln64_reg_1153_pp1_iter13_reg, ap_enable_reg_pp1_iter14, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln64_reg_1153_pp1_iter13_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter14 = ap_const_logic_1))) then 
            ap_phi_mux_window_buffer_load_1_phi_fu_430_p4 <= window_buffer_load_7_1_reg_417;
        else 
            ap_phi_mux_window_buffer_load_1_phi_fu_430_p4 <= window_buffer_load_1_reg_427;
        end if; 
    end process;


    ap_phi_mux_window_buffer_load_2_phi_fu_451_p4_assign_proc : process(window_buffer_load_7_2_reg_438, window_buffer_load_2_reg_448, icmp_ln64_reg_1153_pp1_iter25_reg, ap_enable_reg_pp1_iter26, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln64_reg_1153_pp1_iter25_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter26 = ap_const_logic_1))) then 
            ap_phi_mux_window_buffer_load_2_phi_fu_451_p4 <= window_buffer_load_7_2_reg_438;
        else 
            ap_phi_mux_window_buffer_load_2_phi_fu_451_p4 <= window_buffer_load_2_reg_448;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln39_fu_616_p2)
    begin
        if (((icmp_ln39_fu_616_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_cast_fu_865_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_reg_385),32));
    bitcast_ln11_fu_895_p1 <= sum_reg_1291_pp1_iter45_reg;
    bitcast_ln49_fu_586_p1 <= p_read;
    cmp4827_fu_580_p2 <= "1" when (signed(sub47_fu_574_p2) > signed(ap_const_lv32_0)) else "0";
    empty_38_fu_610_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(num_channel_reg_352),8));
    empty_38_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_598_p3),8));
    empty_42_fu_884_p1 <= b_reg_385(5 - 1 downto 0);
    empty_44_fu_652_p1 <= add_ln39_12_fu_642_p2(4 - 1 downto 0);
    empty_fu_594_p1 <= num_channel_reg_352(4 - 1 downto 0);
    icmp_ln11_4_fu_918_p2 <= "1" when (trunc_ln11_fu_908_p1 = ap_const_lv52_0) else "0";
    icmp_ln11_fu_912_p2 <= "0" when (tmp_fu_898_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln39_fu_616_p2 <= "1" when (indvar_flatten_reg_341 = ap_const_lv9_1C0) else "0";
    icmp_ln41_fu_628_p2 <= "1" when (i_reg_363 = ap_const_lv5_1C) else "0";
    icmp_ln42_4_fu_803_p2 <= "1" when (j_cast_fu_799_p1 = add_ln31_reg_950) else "0";
    icmp_ln42_fu_562_p2 <= "1" when (signed(add_ln31_fu_556_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln45_4_fu_826_p2 <= "1" when (j_cast_fu_799_p1 = sub13_reg_959) else "0";
    icmp_ln45_8_fu_783_p2 <= "1" when (select_ln39_reg_986 = ap_const_lv5_0) else "0";
    icmp_ln45_9_fu_788_p2 <= "1" when (select_ln39_reg_986 = ap_const_lv5_1B) else "0";
    icmp_ln45_fu_820_p2 <= "1" when (j_reg_374 = ap_const_lv5_0) else "0";
    icmp_ln52_fu_859_p2 <= "1" when (tmp_3_fu_850_p4 = ap_const_lv4_0) else "0";
    icmp_ln64_fu_869_p2 <= "1" when (b_cast_fu_865_p1 = sub47_reg_964) else "0";
    j_cast3_fu_814_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_374),64));
    j_cast_fu_799_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_374),32));
    kernel_conv7_address0 <= zext_ln39_5_fu_682_p1(8 - 1 downto 0);
    kernel_conv7_address1 <= zext_ln39_6_fu_693_p1(8 - 1 downto 0);
    kernel_conv7_address2 <= zext_ln39_7_fu_704_p1(8 - 1 downto 0);
    kernel_conv7_address3 <= zext_ln39_8_fu_715_p1(8 - 1 downto 0);
    kernel_conv7_address4 <= zext_ln39_9_fu_726_p1(8 - 1 downto 0);
    kernel_conv7_address5 <= zext_ln39_10_fu_737_p1(8 - 1 downto 0);
    kernel_conv7_address6 <= zext_ln39_11_fu_748_p1(8 - 1 downto 0);
    kernel_conv7_address7 <= zext_ln39_12_fu_759_p1(8 - 1 downto 0);
    kernel_conv7_address8 <= zext_ln39_13_fu_770_p1(8 - 1 downto 0);

    kernel_conv7_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            kernel_conv7_ce0 <= ap_const_logic_1;
        else 
            kernel_conv7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_conv7_ce1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            kernel_conv7_ce1 <= ap_const_logic_1;
        else 
            kernel_conv7_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_conv7_ce2_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            kernel_conv7_ce2 <= ap_const_logic_1;
        else 
            kernel_conv7_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_conv7_ce3_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            kernel_conv7_ce3 <= ap_const_logic_1;
        else 
            kernel_conv7_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_conv7_ce4_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            kernel_conv7_ce4 <= ap_const_logic_1;
        else 
            kernel_conv7_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_conv7_ce5_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            kernel_conv7_ce5 <= ap_const_logic_1;
        else 
            kernel_conv7_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_conv7_ce6_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            kernel_conv7_ce6 <= ap_const_logic_1;
        else 
            kernel_conv7_ce6 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_conv7_ce7_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            kernel_conv7_ce7 <= ap_const_logic_1;
        else 
            kernel_conv7_ce7 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_conv7_ce8_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            kernel_conv7_ce8 <= ap_const_logic_1;
        else 
            kernel_conv7_ce8 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_0_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, j_cast3_reg_1103, ap_CS_fsm_state6, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            line_buffer_0_1_address0 <= ap_const_lv5_0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_0_1_address0 <= j_cast3_reg_1103(5 - 1 downto 0);
        else 
            line_buffer_0_1_address0 <= "XXXXX";
        end if; 
    end process;


    line_buffer_0_1_address1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, p_cast4_fu_890_p1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            line_buffer_0_1_address1 <= p_cast4_fu_890_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            line_buffer_0_1_address1 <= ap_const_lv5_1;
        else 
            line_buffer_0_1_address1 <= "XXXXX";
        end if; 
    end process;


    line_buffer_0_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state6, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            line_buffer_0_1_ce0 <= ap_const_logic_1;
        else 
            line_buffer_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_0_1_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_state6, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            line_buffer_0_1_ce1 <= ap_const_logic_1;
        else 
            line_buffer_0_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_0_1_we0_assign_proc : process(icmp_ln42_4_reg_1094, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln42_4_reg_1094 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_0_1_we0 <= ap_const_logic_1;
        else 
            line_buffer_0_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_1_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, j_cast3_fu_814_p1, ap_CS_fsm_state6, p_cast4_reg_1162_pp1_iter11_reg, ap_enable_reg_pp1_iter12, ap_block_pp1_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter12 = ap_const_logic_1))) then 
            line_buffer_1_1_address0 <= p_cast4_reg_1162_pp1_iter11_reg(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            line_buffer_1_1_address0 <= ap_const_lv5_0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_1_1_address0 <= j_cast3_fu_814_p1(5 - 1 downto 0);
        else 
            line_buffer_1_1_address0 <= "XXXXX";
        end if; 
    end process;


    line_buffer_1_1_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, line_buffer_1_1_addr_reg_1108, ap_CS_fsm_state6, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            line_buffer_1_1_address1 <= ap_const_lv5_1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_1_1_address1 <= line_buffer_1_1_addr_reg_1108;
        else 
            line_buffer_1_1_address1 <= "XXXXX";
        end if; 
    end process;


    line_buffer_1_1_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state6, ap_enable_reg_pp1_iter12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp1_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            line_buffer_1_1_ce0 <= ap_const_logic_1;
        else 
            line_buffer_1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_1_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state6, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            line_buffer_1_1_ce1 <= ap_const_logic_1;
        else 
            line_buffer_1_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_1_1_we1_assign_proc : process(icmp_ln42_4_reg_1094, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln42_4_reg_1094 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_1_1_we1 <= ap_const_logic_1;
        else 
            line_buffer_1_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_2_1_address0_assign_proc : process(icmp_ln42_4_fu_803_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, j_cast3_fu_814_p1, ap_CS_fsm_state6, ap_block_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            line_buffer_2_1_address0 <= ap_const_lv5_0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln42_4_fu_803_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_2_1_address0 <= j_cast3_fu_814_p1(5 - 1 downto 0);
        else 
            line_buffer_2_1_address0 <= "XXXXX";
        end if; 
    end process;


    line_buffer_2_1_address1_assign_proc : process(ap_CS_fsm_state6, p_cast4_reg_1162_pp1_iter23_reg, ap_enable_reg_pp1_iter24, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter24 = ap_const_logic_1))) then 
            line_buffer_2_1_address1 <= p_cast4_reg_1162_pp1_iter23_reg(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            line_buffer_2_1_address1 <= ap_const_lv5_1;
        else 
            line_buffer_2_1_address1 <= "XXXXX";
        end if; 
    end process;


    line_buffer_2_1_ce0_assign_proc : process(icmp_ln42_4_fu_803_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln42_4_fu_803_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            line_buffer_2_1_ce0 <= ap_const_logic_1;
        else 
            line_buffer_2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_2_1_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_state6, ap_enable_reg_pp1_iter24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_enable_reg_pp1_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            line_buffer_2_1_ce1 <= ap_const_logic_1;
        else 
            line_buffer_2_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_2_1_d0 <= 
        ap_const_lv64_0 when (or_ln45_8_fu_837_p2(0) = '1') else 
        bitcast_ln49_reg_973;

    line_buffer_2_1_we0_assign_proc : process(icmp_ln42_4_fu_803_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln42_4_fu_803_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_2_1_we0 <= ap_const_logic_1;
        else 
            line_buffer_2_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln11_fu_924_p2 <= (icmp_ln11_fu_912_p2 or icmp_ln11_4_fu_918_p2);
    or_ln45_7_fu_831_p2 <= (icmp_ln45_fu_820_p2 or icmp_ln45_4_fu_826_p2);
    or_ln45_8_fu_837_p2 <= (or_ln45_reg_1089 or or_ln45_7_fu_831_p2);
    or_ln45_fu_793_p2 <= (icmp_ln45_9_fu_788_p2 or icmp_ln45_8_fu_783_p2);
    output_conv7 <= 
        bitcast_ln11_fu_895_p1 when (and_ln11_fu_930_p2(0) = '1') else 
        ap_const_lv64_0;

    output_conv7_ap_vld_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln64_reg_1153_pp1_iter45_reg, ap_enable_reg_pp1_iter46)
    begin
        if (((icmp_ln64_reg_1153_pp1_iter45_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter46 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            output_conv7_ap_vld <= ap_const_logic_1;
        else 
            output_conv7_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_cast4_fu_890_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_42_fu_884_p2),64));
    p_mid1_fu_668_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln39_12_fu_642_p2),8));
    p_mid1_fu_668_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_mid1_fu_656_p3),8));
    p_shl_fu_598_p3 <= (empty_fu_594_p1 & ap_const_lv3_0);
    p_shl_mid1_fu_656_p3 <= (empty_44_fu_652_p1 & ap_const_lv3_0);
    select_ln39_13_fu_674_p3 <= 
        p_mid1_fu_668_p2 when (icmp_ln41_fu_628_p2(0) = '1') else 
        empty_38_fu_610_p2;
    select_ln39_14_fu_775_p3 <= 
        add_ln39_12_fu_642_p2 when (icmp_ln41_fu_628_p2(0) = '1') else 
        num_channel_reg_352;
    select_ln39_fu_634_p3 <= 
        ap_const_lv5_0 when (icmp_ln41_fu_628_p2(0) = '1') else 
        i_reg_363;
    shl_ln_fu_548_p3 <= (padding & ap_const_lv1_0);
    tmp_3_fu_850_p4 <= select_ln39_reg_986(4 downto 1);
    tmp_fu_898_p4 <= bitcast_ln11_fu_895_p1(62 downto 52);
    trunc_ln11_fu_908_p1 <= bitcast_ln11_fu_895_p1(52 - 1 downto 0);
    zext_ln39_10_fu_737_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln39_8_fu_731_p2),64));
    zext_ln39_11_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln39_9_fu_742_p2),64));
    zext_ln39_12_fu_759_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln39_10_fu_753_p2),64));
    zext_ln39_13_fu_770_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln39_11_fu_764_p2),64));
    zext_ln39_5_fu_682_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln39_13_fu_674_p3),64));
    zext_ln39_6_fu_693_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln39_4_fu_687_p2),64));
    zext_ln39_7_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln39_5_fu_698_p2),64));
    zext_ln39_8_fu_715_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln39_6_fu_709_p2),64));
    zext_ln39_9_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln39_7_fu_720_p2),64));
end behav;
