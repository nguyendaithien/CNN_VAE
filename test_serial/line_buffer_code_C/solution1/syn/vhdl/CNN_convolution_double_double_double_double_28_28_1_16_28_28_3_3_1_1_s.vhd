-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CNN_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (63 downto 0);
    output_conv1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    output_conv1_ap_vld : OUT STD_LOGIC;
    padding : IN STD_LOGIC_VECTOR (30 downto 0) );
end;


architecture behav of CNN_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv9_1E0 : STD_LOGIC_VECTOR (8 downto 0) := "111100000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv5_1D : STD_LOGIC_VECTOR (4 downto 0) := "11101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal line_buffer_1_2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_1_2_ce0 : STD_LOGIC;
    signal line_buffer_1_2_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_1_2_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_1_2_ce1 : STD_LOGIC;
    signal line_buffer_1_2_we1 : STD_LOGIC;
    signal line_buffer_1_2_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_0_2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_0_2_ce0 : STD_LOGIC;
    signal line_buffer_0_2_we0 : STD_LOGIC;
    signal line_buffer_0_2_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_0_2_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_0_2_ce1 : STD_LOGIC;
    signal line_buffer_0_2_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_2_2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_2_2_ce0 : STD_LOGIC;
    signal line_buffer_2_2_we0 : STD_LOGIC;
    signal line_buffer_2_2_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_2_2_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_2_2_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal line_buffer_2_2_ce1 : STD_LOGIC;
    signal line_buffer_2_2_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bias_conv1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal bias_conv1_ce0 : STD_LOGIC;
    signal bias_conv1_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_conv1_ce0 : STD_LOGIC;
    signal kernel_conv1_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv1_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_conv1_ce1 : STD_LOGIC;
    signal kernel_conv1_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv1_address2 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_conv1_ce2 : STD_LOGIC;
    signal kernel_conv1_q2 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv1_address3 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_conv1_ce3 : STD_LOGIC;
    signal kernel_conv1_q3 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv1_address4 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_conv1_ce4 : STD_LOGIC;
    signal kernel_conv1_q4 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv1_address5 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_conv1_ce5 : STD_LOGIC;
    signal kernel_conv1_q5 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv1_address6 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_conv1_ce6 : STD_LOGIC;
    signal kernel_conv1_q6 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv1_address7 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_conv1_ce7 : STD_LOGIC;
    signal kernel_conv1_q7 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv1_address8 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_conv1_ce8 : STD_LOGIC;
    signal kernel_conv1_q8 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_reg_387 : STD_LOGIC_VECTOR (4 downto 0);
    signal b_reg_398 : STD_LOGIC_VECTOR (30 downto 0);
    signal window_buffer_load_9_0_reg_409 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state8_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state10_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state11_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state12_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_state13_pp1_stage0_iter5 : BOOLEAN;
    signal ap_block_state14_pp1_stage0_iter6 : BOOLEAN;
    signal ap_block_state15_pp1_stage0_iter7 : BOOLEAN;
    signal ap_block_state16_pp1_stage0_iter8 : BOOLEAN;
    signal ap_block_state17_pp1_stage0_iter9 : BOOLEAN;
    signal ap_block_state18_pp1_stage0_iter10 : BOOLEAN;
    signal ap_block_state19_pp1_stage0_iter11 : BOOLEAN;
    signal ap_block_state20_pp1_stage0_iter12 : BOOLEAN;
    signal ap_block_state21_pp1_stage0_iter13 : BOOLEAN;
    signal ap_block_state22_pp1_stage0_iter14 : BOOLEAN;
    signal ap_block_state23_pp1_stage0_iter15 : BOOLEAN;
    signal ap_block_state24_pp1_stage0_iter16 : BOOLEAN;
    signal ap_block_state25_pp1_stage0_iter17 : BOOLEAN;
    signal ap_block_state26_pp1_stage0_iter18 : BOOLEAN;
    signal ap_block_state27_pp1_stage0_iter19 : BOOLEAN;
    signal ap_block_state28_pp1_stage0_iter20 : BOOLEAN;
    signal ap_block_state29_pp1_stage0_iter21 : BOOLEAN;
    signal ap_block_state30_pp1_stage0_iter22 : BOOLEAN;
    signal ap_block_state31_pp1_stage0_iter23 : BOOLEAN;
    signal ap_block_state32_pp1_stage0_iter24 : BOOLEAN;
    signal ap_block_state33_pp1_stage0_iter25 : BOOLEAN;
    signal ap_block_state34_pp1_stage0_iter26 : BOOLEAN;
    signal ap_block_state35_pp1_stage0_iter27 : BOOLEAN;
    signal ap_block_state36_pp1_stage0_iter28 : BOOLEAN;
    signal ap_block_state37_pp1_stage0_iter29 : BOOLEAN;
    signal ap_block_state38_pp1_stage0_iter30 : BOOLEAN;
    signal ap_block_state39_pp1_stage0_iter31 : BOOLEAN;
    signal ap_block_state40_pp1_stage0_iter32 : BOOLEAN;
    signal ap_block_state41_pp1_stage0_iter33 : BOOLEAN;
    signal ap_block_state42_pp1_stage0_iter34 : BOOLEAN;
    signal ap_block_state43_pp1_stage0_iter35 : BOOLEAN;
    signal ap_block_state44_pp1_stage0_iter36 : BOOLEAN;
    signal ap_block_state45_pp1_stage0_iter37 : BOOLEAN;
    signal ap_block_state46_pp1_stage0_iter38 : BOOLEAN;
    signal ap_block_state47_pp1_stage0_iter39 : BOOLEAN;
    signal ap_block_state48_pp1_stage0_iter40 : BOOLEAN;
    signal ap_block_state49_pp1_stage0_iter41 : BOOLEAN;
    signal ap_block_state50_pp1_stage0_iter42 : BOOLEAN;
    signal ap_block_state51_pp1_stage0_iter43 : BOOLEAN;
    signal ap_block_state52_pp1_stage0_iter44 : BOOLEAN;
    signal ap_block_state53_pp1_stage0_iter45 : BOOLEAN;
    signal ap_block_state54_pp1_stage0_iter46 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal window_buffer_load_0_reg_419 : STD_LOGIC_VECTOR (63 downto 0);
    signal window_buffer_load_9_1_reg_430 : STD_LOGIC_VECTOR (63 downto 0);
    signal window_buffer_load_1_reg_440 : STD_LOGIC_VECTOR (63 downto 0);
    signal window_buffer_load_9_2_reg_451 : STD_LOGIC_VECTOR (63 downto 0);
    signal window_buffer_load_2_reg_461 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln31_fu_568_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln31_reg_967 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln42_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_reg_972 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub13_fu_580_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub13_reg_976 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub47_fu_586_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub47_reg_981 : STD_LOGIC_VECTOR (31 downto 0);
    signal cmp4827_fu_592_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp4827_reg_986 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln49_fu_598_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln49_reg_990 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln40_fu_634_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln40_reg_998 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal select_ln40_fu_646_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln40_reg_1003 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln40_fu_628_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln40_13_fu_686_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln40_13_reg_1011 : STD_LOGIC_VECTOR (4 downto 0);
    signal bias_conv1_load_reg_1066 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal kernel_conv1_load_reg_1071 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv1_load_1_reg_1076 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv1_load_2_reg_1081 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv1_load_3_reg_1086 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv1_load_4_reg_1091 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv1_load_5_reg_1096 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv1_load_6_reg_1101 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv1_load_7_reg_1106 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv1_load_8_reg_1111 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln45_fu_810_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln45_reg_1116 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_5_fu_820_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_5_reg_1121 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln42_fu_825_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal j_cast4_fu_831_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_cast4_reg_1130 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_1_2_addr_reg_1135 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln52_fu_876_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln64_fu_886_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1180 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal icmp_ln64_reg_1180_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1180_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1180_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1180_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1180_pp1_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1180_pp1_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1180_pp1_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1180_pp1_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1180_pp1_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1180_pp1_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1180_pp1_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1180_pp1_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1180_pp1_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1180_pp1_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1180_pp1_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1180_pp1_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1180_pp1_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1180_pp1_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1180_pp1_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1180_pp1_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1180_pp1_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1180_pp1_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1180_pp1_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1180_pp1_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1180_pp1_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1180_pp1_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1180_pp1_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1180_pp1_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1180_pp1_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1180_pp1_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1180_pp1_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1180_pp1_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1180_pp1_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1180_pp1_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1180_pp1_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1180_pp1_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1180_pp1_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1180_pp1_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1180_pp1_iter39_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1180_pp1_iter40_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1180_pp1_iter41_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1180_pp1_iter42_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1180_pp1_iter43_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1180_pp1_iter44_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1180_pp1_iter45_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln64_fu_891_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal p_cast5_fu_907_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast5_reg_1189 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast5_reg_1189_pp1_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast5_reg_1189_pp1_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast5_reg_1189_pp1_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast5_reg_1189_pp1_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast5_reg_1189_pp1_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast5_reg_1189_pp1_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast5_reg_1189_pp1_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast5_reg_1189_pp1_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast5_reg_1189_pp1_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast5_reg_1189_pp1_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast5_reg_1189_pp1_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast5_reg_1189_pp1_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast5_reg_1189_pp1_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast5_reg_1189_pp1_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast5_reg_1189_pp1_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast5_reg_1189_pp1_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast5_reg_1189_pp1_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast5_reg_1189_pp1_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast5_reg_1189_pp1_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast5_reg_1189_pp1_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast5_reg_1189_pp1_iter21_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast5_reg_1189_pp1_iter22_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast5_reg_1189_pp1_iter23_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_0_2_load_2_reg_1200 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal line_buffer_0_2_load_2_reg_1200_pp1_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_513_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_reg_1206 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_518_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_1_reg_1211 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_1_reg_1211_pp1_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_1_reg_1211_pp1_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_1_reg_1211_pp1_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_523_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_2_reg_1216 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_2_reg_1216_pp1_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_2_reg_1216_pp1_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_2_reg_1216_pp1_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_2_reg_1216_pp1_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_2_reg_1216_pp1_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_2_reg_1216_pp1_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_472_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_s_reg_1221 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_477_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_18_0_1_reg_1231 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_1_2_load_3_reg_1236 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp1_iter13 : STD_LOGIC := '0';
    signal line_buffer_1_2_load_3_reg_1236_pp1_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_481_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_18_0_2_reg_1242 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_527_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_reg_1247 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_532_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_1_reg_1252 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_1_reg_1252_pp1_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_1_reg_1252_pp1_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_1_reg_1252_pp1_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_537_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_1257 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_1257_pp1_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_1257_pp1_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_1257_pp1_iter21_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_1257_pp1_iter22_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_1257_pp1_iter23_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_1257_pp1_iter24_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_485_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_18_1_reg_1262 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_489_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_18_1_1_reg_1272 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_2_2_load_3_reg_1277 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp1_iter25 : STD_LOGIC := '0';
    signal line_buffer_2_2_load_3_reg_1277_pp1_iter26_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_493_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_18_1_2_reg_1283 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_541_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_reg_1288 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_546_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_1_reg_1293 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_1_reg_1293_pp1_iter30_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_1_reg_1293_pp1_iter31_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_1_reg_1293_pp1_iter32_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_551_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1298 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1298_pp1_iter31_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1298_pp1_iter32_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1298_pp1_iter33_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1298_pp1_iter34_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1298_pp1_iter35_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1298_pp1_iter36_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_497_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_18_2_reg_1303 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_501_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_18_2_1_reg_1308 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_505_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_18_2_2_reg_1313 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_509_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_reg_1318 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_reg_1318_pp1_iter45_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln41_fu_962_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter26 : STD_LOGIC := '0';
    signal ap_condition_pp1_exit_iter25_state33 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter41 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter42 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter43 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter44 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter45 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter46 : STD_LOGIC := '0';
    signal indvar_flatten_reg_354 : STD_LOGIC_VECTOR (8 downto 0);
    signal num_ker_reg_365 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_376 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_window_buffer_load_0_phi_fu_422_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_window_buffer_load_1_phi_fu_443_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_window_buffer_load_2_phi_fu_464_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_28_fu_694_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_29_fu_707_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_30_fu_718_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_31_fu_729_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_32_fu_740_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_33_fu_751_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_34_fu_762_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_35_fu_773_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_36_fu_784_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_37_fu_795_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal shl_ln_fu_560_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_606_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_fu_610_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_45_fu_622_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_45_fu_622_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln41_fu_640_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln40_36_fu_654_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_51_fu_664_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_mid1_fu_668_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_mid1_fu_680_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_mid1_fu_680_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_mid1_fu_680_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_45_fu_622_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln40_14_fu_699_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln40_28_fu_712_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln40_29_fu_723_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln40_30_fu_734_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln40_31_fu_745_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln40_32_fu_756_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln40_33_fu_767_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln40_34_fu_778_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln40_35_fu_789_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln45_10_fu_800_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_11_fu_805_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_cast_fu_816_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln45_5_fu_843_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_fu_837_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln45_9_fu_848_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln45_10_fu_854_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_867_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_cast_fu_882_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_49_fu_901_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_49_fu_901_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal bitcast_ln11_fu_912_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_915_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln11_fu_925_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln11_5_fu_935_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_fu_929_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_fu_941_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_fu_947_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp1_stage0_00001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component CNN_CNN_dcmp_64ns_64ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component CNN_CNN_add_32ns_32ns_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CNN_CNN_add_8ns_8ns_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component CNN_CNN_add_9ns_9ns_9_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component CNN_CNN_add_5ns_5ns_5_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component CNN_CNN_add_31ns_31ns_31_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component CNN_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_line_buffebkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component CNN_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_line_buffecud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component CNN_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_bias_conv1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component CNN_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_kernel_conv1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address3 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address4 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address5 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce5 : IN STD_LOGIC;
        q5 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address6 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce6 : IN STD_LOGIC;
        q6 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address7 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce7 : IN STD_LOGIC;
        q7 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address8 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce8 : IN STD_LOGIC;
        q8 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    line_buffer_1_2_U : component CNN_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_line_buffebkb
    generic map (
        DataWidth => 64,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_1_2_address0,
        ce0 => line_buffer_1_2_ce0,
        q0 => line_buffer_1_2_q0,
        address1 => line_buffer_1_2_address1,
        ce1 => line_buffer_1_2_ce1,
        we1 => line_buffer_1_2_we1,
        d1 => line_buffer_2_2_q0,
        q1 => line_buffer_1_2_q1);

    line_buffer_0_2_U : component CNN_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_line_buffecud
    generic map (
        DataWidth => 64,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_0_2_address0,
        ce0 => line_buffer_0_2_ce0,
        we0 => line_buffer_0_2_we0,
        d0 => line_buffer_1_2_q0,
        q0 => line_buffer_0_2_q0,
        address1 => line_buffer_0_2_address1,
        ce1 => line_buffer_0_2_ce1,
        q1 => line_buffer_0_2_q1);

    line_buffer_2_2_U : component CNN_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_line_buffecud
    generic map (
        DataWidth => 64,
        AddressRange => 28,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_2_2_address0,
        ce0 => line_buffer_2_2_ce0,
        we0 => line_buffer_2_2_we0,
        d0 => line_buffer_2_2_d0,
        q0 => line_buffer_2_2_q0,
        address1 => line_buffer_2_2_address1,
        ce1 => line_buffer_2_2_ce1,
        q1 => line_buffer_2_2_q1);

    bias_conv1_U : component CNN_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_bias_conv1
    generic map (
        DataWidth => 64,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bias_conv1_address0,
        ce0 => bias_conv1_ce0,
        q0 => bias_conv1_q0);

    kernel_conv1_U : component CNN_convolution_double_double_double_double_28_28_1_16_28_28_3_3_1_1_s_kernel_conv1
    generic map (
        DataWidth => 64,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => kernel_conv1_address0,
        ce0 => kernel_conv1_ce0,
        q0 => kernel_conv1_q0,
        address1 => kernel_conv1_address1,
        ce1 => kernel_conv1_ce1,
        q1 => kernel_conv1_q1,
        address2 => kernel_conv1_address2,
        ce2 => kernel_conv1_ce2,
        q2 => kernel_conv1_q2,
        address3 => kernel_conv1_address3,
        ce3 => kernel_conv1_ce3,
        q3 => kernel_conv1_q3,
        address4 => kernel_conv1_address4,
        ce4 => kernel_conv1_ce4,
        q4 => kernel_conv1_q4,
        address5 => kernel_conv1_address5,
        ce5 => kernel_conv1_ce5,
        q5 => kernel_conv1_q5,
        address6 => kernel_conv1_address6,
        ce6 => kernel_conv1_ce6,
        q6 => kernel_conv1_q6,
        address7 => kernel_conv1_address7,
        ce7 => kernel_conv1_ce7,
        q7 => kernel_conv1_q7,
        address8 => kernel_conv1_address8,
        ce8 => kernel_conv1_ce8,
        q8 => kernel_conv1_q8);

    CNN_dadd_64ns_64ns_64_4_full_dsp_1_U1 : component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_reg_1206,
        din1 => ap_const_lv64_0,
        ce => ap_const_logic_1,
        dout => grp_fu_472_p2);

    CNN_dadd_64ns_64ns_64_4_full_dsp_1_U2 : component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_s_reg_1221,
        din1 => mul_0_1_reg_1211_pp1_iter8_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_477_p2);

    CNN_dadd_64ns_64ns_64_4_full_dsp_1_U3 : component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_18_0_1_reg_1231,
        din1 => mul_0_2_reg_1216_pp1_iter12_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_481_p2);

    CNN_dadd_64ns_64ns_64_4_full_dsp_1_U4 : component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_18_0_2_reg_1242,
        din1 => mul_1_reg_1247,
        ce => ap_const_logic_1,
        dout => grp_fu_485_p2);

    CNN_dadd_64ns_64ns_64_4_full_dsp_1_U5 : component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_18_1_reg_1262,
        din1 => mul_1_1_reg_1252_pp1_iter20_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_489_p2);

    CNN_dadd_64ns_64ns_64_4_full_dsp_1_U6 : component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_18_1_1_reg_1272,
        din1 => mul_1_2_reg_1257_pp1_iter24_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_493_p2);

    CNN_dadd_64ns_64ns_64_4_full_dsp_1_U7 : component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_18_1_2_reg_1283,
        din1 => mul_2_reg_1288,
        ce => ap_const_logic_1,
        dout => grp_fu_497_p2);

    CNN_dadd_64ns_64ns_64_4_full_dsp_1_U8 : component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_18_2_reg_1303,
        din1 => mul_2_1_reg_1293_pp1_iter32_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_501_p2);

    CNN_dadd_64ns_64ns_64_4_full_dsp_1_U9 : component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_18_2_1_reg_1308,
        din1 => mul_2_2_reg_1298_pp1_iter36_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_505_p2);

    CNN_dadd_64ns_64ns_64_4_full_dsp_1_U10 : component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_18_2_2_reg_1313,
        din1 => bias_conv1_load_reg_1066,
        ce => ap_const_logic_1,
        dout => grp_fu_509_p2);

    CNN_dmul_64ns_64ns_64_4_max_dsp_1_U11 : component CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_phi_mux_window_buffer_load_0_phi_fu_422_p4,
        din1 => kernel_conv1_load_reg_1071,
        ce => ap_const_logic_1,
        dout => grp_fu_513_p2);

    CNN_dmul_64ns_64ns_64_4_max_dsp_1_U12 : component CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => window_buffer_load_9_0_reg_409,
        din1 => kernel_conv1_load_1_reg_1076,
        ce => ap_const_logic_1,
        dout => grp_fu_518_p2);

    CNN_dmul_64ns_64ns_64_4_max_dsp_1_U13 : component CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => line_buffer_0_2_load_2_reg_1200_pp1_iter2_reg,
        din1 => kernel_conv1_load_2_reg_1081,
        ce => ap_const_logic_1,
        dout => grp_fu_523_p2);

    CNN_dmul_64ns_64ns_64_4_max_dsp_1_U14 : component CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_phi_mux_window_buffer_load_1_phi_fu_443_p4,
        din1 => kernel_conv1_load_3_reg_1086,
        ce => ap_const_logic_1,
        dout => grp_fu_527_p2);

    CNN_dmul_64ns_64ns_64_4_max_dsp_1_U15 : component CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => window_buffer_load_9_1_reg_430,
        din1 => kernel_conv1_load_4_reg_1091,
        ce => ap_const_logic_1,
        dout => grp_fu_532_p2);

    CNN_dmul_64ns_64ns_64_4_max_dsp_1_U16 : component CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => line_buffer_1_2_load_3_reg_1236_pp1_iter14_reg,
        din1 => kernel_conv1_load_5_reg_1096,
        ce => ap_const_logic_1,
        dout => grp_fu_537_p2);

    CNN_dmul_64ns_64ns_64_4_max_dsp_1_U17 : component CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_phi_mux_window_buffer_load_2_phi_fu_464_p4,
        din1 => kernel_conv1_load_6_reg_1101,
        ce => ap_const_logic_1,
        dout => grp_fu_541_p2);

    CNN_dmul_64ns_64ns_64_4_max_dsp_1_U18 : component CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => window_buffer_load_9_2_reg_451,
        din1 => kernel_conv1_load_7_reg_1106,
        ce => ap_const_logic_1,
        dout => grp_fu_546_p2);

    CNN_dmul_64ns_64ns_64_4_max_dsp_1_U19 : component CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => line_buffer_2_2_load_3_reg_1277_pp1_iter26_reg,
        din1 => kernel_conv1_load_8_reg_1111,
        ce => ap_const_logic_1,
        dout => grp_fu_551_p2);

    CNN_dcmp_64ns_64ns_1_2_no_dsp_1_U20 : component CNN_CNN_dcmp_64ns_64ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_reg_1318,
        din1 => ap_const_lv64_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_555_p2);

    CNN_add_32ns_32ns_32_1_1_U21 : component CNN_CNN_add_32ns_32ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => shl_ln_fu_560_p3,
        din1 => ap_const_lv32_1C,
        dout => add_ln31_fu_568_p2);

    CNN_add_32ns_32ns_32_1_1_U22 : component CNN_CNN_add_32ns_32ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => shl_ln_fu_560_p3,
        din1 => ap_const_lv32_1B,
        dout => sub13_fu_580_p2);

    CNN_add_32ns_32ns_32_1_1_U23 : component CNN_CNN_add_32ns_32ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => shl_ln_fu_560_p3,
        din1 => ap_const_lv32_1A,
        dout => sub47_fu_586_p2);

    CNN_add_8ns_8ns_8_1_1_U24 : component CNN_CNN_add_8ns_8ns_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => empty_45_fu_622_p0,
        din1 => empty_45_fu_622_p1,
        dout => empty_45_fu_622_p2);

    CNN_add_9ns_9ns_9_1_1_U25 : component CNN_CNN_add_9ns_9ns_9_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        din0 => ap_const_lv9_1,
        din1 => indvar_flatten_reg_354,
        dout => add_ln40_fu_634_p2);

    CNN_add_5ns_5ns_5_1_1_U26 : component CNN_CNN_add_5ns_5ns_5_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        din0 => ap_const_lv5_1,
        din1 => num_ker_reg_365,
        dout => add_ln40_36_fu_654_p2);

    CNN_add_8ns_8ns_8_1_1_U27 : component CNN_CNN_add_8ns_8ns_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => p_mid1_fu_680_p0,
        din1 => p_mid1_fu_680_p1,
        dout => p_mid1_fu_680_p2);

    CNN_add_8ns_8ns_8_1_1_U28 : component CNN_CNN_add_8ns_8ns_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_1,
        din1 => select_ln40_14_fu_699_p3,
        dout => add_ln40_28_fu_712_p2);

    CNN_add_8ns_8ns_8_1_1_U29 : component CNN_CNN_add_8ns_8ns_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_2,
        din1 => select_ln40_14_fu_699_p3,
        dout => add_ln40_29_fu_723_p2);

    CNN_add_8ns_8ns_8_1_1_U30 : component CNN_CNN_add_8ns_8ns_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_3,
        din1 => select_ln40_14_fu_699_p3,
        dout => add_ln40_30_fu_734_p2);

    CNN_add_8ns_8ns_8_1_1_U31 : component CNN_CNN_add_8ns_8ns_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_4,
        din1 => select_ln40_14_fu_699_p3,
        dout => add_ln40_31_fu_745_p2);

    CNN_add_8ns_8ns_8_1_1_U32 : component CNN_CNN_add_8ns_8ns_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_5,
        din1 => select_ln40_14_fu_699_p3,
        dout => add_ln40_32_fu_756_p2);

    CNN_add_8ns_8ns_8_1_1_U33 : component CNN_CNN_add_8ns_8ns_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_6,
        din1 => select_ln40_14_fu_699_p3,
        dout => add_ln40_33_fu_767_p2);

    CNN_add_8ns_8ns_8_1_1_U34 : component CNN_CNN_add_8ns_8ns_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_7,
        din1 => select_ln40_14_fu_699_p3,
        dout => add_ln40_34_fu_778_p2);

    CNN_add_8ns_8ns_8_1_1_U35 : component CNN_CNN_add_8ns_8ns_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_8,
        din1 => select_ln40_14_fu_699_p3,
        dout => add_ln40_35_fu_789_p2);

    CNN_add_5ns_5ns_5_1_1_U36 : component CNN_CNN_add_5ns_5ns_5_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        din0 => j_reg_387,
        din1 => ap_const_lv5_1,
        dout => add_ln42_fu_825_p2);

    CNN_add_31ns_31ns_31_1_1_U37 : component CNN_CNN_add_31ns_31ns_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        din0 => b_reg_398,
        din1 => ap_const_lv31_1,
        dout => add_ln64_fu_891_p2);

    CNN_add_5ns_5ns_5_1_1_U38 : component CNN_CNN_add_5ns_5ns_5_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        din0 => ap_const_lv5_2,
        din1 => empty_49_fu_901_p1,
        dout => empty_49_fu_901_p2);

    CNN_add_5ns_5ns_5_1_1_U39 : component CNN_CNN_add_5ns_5ns_5_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        din0 => select_ln40_reg_1003,
        din1 => ap_const_lv5_1,
        dout => add_ln41_fu_962_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln42_reg_972 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state4);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln42_reg_972 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp1_flush_enable)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((cmp4827_reg_986 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter11 <= ap_enable_reg_pp1_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter12 <= ap_enable_reg_pp1_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter13 <= ap_enable_reg_pp1_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter14 <= ap_enable_reg_pp1_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter15 <= ap_enable_reg_pp1_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter16 <= ap_enable_reg_pp1_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter17 <= ap_enable_reg_pp1_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter18 <= ap_enable_reg_pp1_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter19 <= ap_enable_reg_pp1_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter20 <= ap_enable_reg_pp1_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter21 <= ap_enable_reg_pp1_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter22 <= ap_enable_reg_pp1_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter23 <= ap_enable_reg_pp1_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter24 <= ap_enable_reg_pp1_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter25 <= ap_enable_reg_pp1_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter25_state33)) then 
                        ap_enable_reg_pp1_iter26 <= ap_enable_reg_pp1_iter24;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter26 <= ap_enable_reg_pp1_iter25;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter27 <= ap_enable_reg_pp1_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter28 <= ap_enable_reg_pp1_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter29 <= ap_enable_reg_pp1_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter30 <= ap_enable_reg_pp1_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter31 <= ap_enable_reg_pp1_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter32 <= ap_enable_reg_pp1_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter33 <= ap_enable_reg_pp1_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter34 <= ap_enable_reg_pp1_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter35 <= ap_enable_reg_pp1_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter36 <= ap_enable_reg_pp1_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter37 <= ap_enable_reg_pp1_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter38 <= ap_enable_reg_pp1_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter39 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter39 <= ap_enable_reg_pp1_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter40 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter40 <= ap_enable_reg_pp1_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter41 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter41 <= ap_enable_reg_pp1_iter40;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter42 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter42 <= ap_enable_reg_pp1_iter41;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter43 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter43 <= ap_enable_reg_pp1_iter42;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter44_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter44 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter44 <= ap_enable_reg_pp1_iter43;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter45_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter45 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter45 <= ap_enable_reg_pp1_iter44;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter46_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter46 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter46 <= ap_enable_reg_pp1_iter45;
                elsif (((cmp4827_reg_986 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_enable_reg_pp1_iter46 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
                end if; 
            end if;
        end if;
    end process;


    b_reg_398_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp4827_reg_986 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                b_reg_398 <= ap_const_lv31_0;
            elsif (((icmp_ln64_fu_886_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                b_reg_398 <= add_ln64_fu_891_p2;
            end if; 
        end if;
    end process;

    i_reg_376_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                i_reg_376 <= add_ln41_fu_962_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_376 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_354_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                indvar_flatten_reg_354 <= add_ln40_reg_998;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_354 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j_reg_387_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln42_reg_972 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_reg_387 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln42_5_fu_820_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_reg_387 <= add_ln42_fu_825_p2;
            end if; 
        end if;
    end process;

    num_ker_reg_365_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                num_ker_reg_365 <= select_ln40_13_reg_1011;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                num_ker_reg_365 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    window_buffer_load_0_reg_419_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp4827_reg_986 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                window_buffer_load_0_reg_419 <= line_buffer_0_2_q0;
            elsif (((icmp_ln64_reg_1180_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                window_buffer_load_0_reg_419 <= window_buffer_load_9_0_reg_409;
            end if; 
        end if;
    end process;

    window_buffer_load_1_reg_440_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp4827_reg_986 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                window_buffer_load_1_reg_440 <= line_buffer_1_2_q0;
            elsif (((icmp_ln64_reg_1180_pp1_iter13_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                window_buffer_load_1_reg_440 <= window_buffer_load_9_1_reg_430;
            end if; 
        end if;
    end process;

    window_buffer_load_2_reg_461_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp4827_reg_986 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                window_buffer_load_2_reg_461 <= line_buffer_2_2_q0;
            elsif (((icmp_ln64_reg_1180_pp1_iter25_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                window_buffer_load_2_reg_461 <= window_buffer_load_9_2_reg_451;
            end if; 
        end if;
    end process;

    window_buffer_load_9_0_reg_409_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp4827_reg_986 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                window_buffer_load_9_0_reg_409 <= line_buffer_0_2_q1;
            elsif (((icmp_ln64_reg_1180_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                window_buffer_load_9_0_reg_409 <= line_buffer_0_2_load_2_reg_1200;
            end if; 
        end if;
    end process;

    window_buffer_load_9_1_reg_430_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp4827_reg_986 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                window_buffer_load_9_1_reg_430 <= line_buffer_1_2_q1;
            elsif (((icmp_ln64_reg_1180_pp1_iter13_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                window_buffer_load_9_1_reg_430 <= line_buffer_1_2_load_3_reg_1236;
            end if; 
        end if;
    end process;

    window_buffer_load_9_2_reg_451_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp4827_reg_986 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                window_buffer_load_9_2_reg_451 <= line_buffer_2_2_q1;
            elsif (((icmp_ln64_reg_1180_pp1_iter25_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                window_buffer_load_9_2_reg_451 <= line_buffer_2_2_load_3_reg_1277;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                add_ln31_reg_967 <= add_ln31_fu_568_p2;
                bitcast_ln49_reg_990 <= bitcast_ln49_fu_598_p1;
                cmp4827_reg_986 <= cmp4827_fu_592_p2;
                icmp_ln42_reg_972 <= icmp_ln42_fu_574_p2;
                sub13_reg_976 <= sub13_fu_580_p2;
                sub47_reg_981 <= sub47_fu_586_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln40_reg_998 <= add_ln40_fu_634_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                bias_conv1_load_reg_1066 <= bias_conv1_q0;
                kernel_conv1_load_1_reg_1076 <= kernel_conv1_q1;
                kernel_conv1_load_2_reg_1081 <= kernel_conv1_q2;
                kernel_conv1_load_3_reg_1086 <= kernel_conv1_q3;
                kernel_conv1_load_4_reg_1091 <= kernel_conv1_q4;
                kernel_conv1_load_5_reg_1096 <= kernel_conv1_q5;
                kernel_conv1_load_6_reg_1101 <= kernel_conv1_q6;
                kernel_conv1_load_7_reg_1106 <= kernel_conv1_q7;
                kernel_conv1_load_8_reg_1111 <= kernel_conv1_q8;
                kernel_conv1_load_reg_1071 <= kernel_conv1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln42_5_reg_1121 <= icmp_ln42_5_fu_820_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln64_reg_1180 <= icmp_ln64_fu_886_p2;
                icmp_ln64_reg_1180_pp1_iter1_reg <= icmp_ln64_reg_1180;
                    p_cast5_reg_1189_pp1_iter1_reg(4 downto 0) <= p_cast5_reg_1189(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                icmp_ln64_reg_1180_pp1_iter10_reg <= icmp_ln64_reg_1180_pp1_iter9_reg;
                icmp_ln64_reg_1180_pp1_iter11_reg <= icmp_ln64_reg_1180_pp1_iter10_reg;
                icmp_ln64_reg_1180_pp1_iter12_reg <= icmp_ln64_reg_1180_pp1_iter11_reg;
                icmp_ln64_reg_1180_pp1_iter13_reg <= icmp_ln64_reg_1180_pp1_iter12_reg;
                icmp_ln64_reg_1180_pp1_iter14_reg <= icmp_ln64_reg_1180_pp1_iter13_reg;
                icmp_ln64_reg_1180_pp1_iter15_reg <= icmp_ln64_reg_1180_pp1_iter14_reg;
                icmp_ln64_reg_1180_pp1_iter16_reg <= icmp_ln64_reg_1180_pp1_iter15_reg;
                icmp_ln64_reg_1180_pp1_iter17_reg <= icmp_ln64_reg_1180_pp1_iter16_reg;
                icmp_ln64_reg_1180_pp1_iter18_reg <= icmp_ln64_reg_1180_pp1_iter17_reg;
                icmp_ln64_reg_1180_pp1_iter19_reg <= icmp_ln64_reg_1180_pp1_iter18_reg;
                icmp_ln64_reg_1180_pp1_iter20_reg <= icmp_ln64_reg_1180_pp1_iter19_reg;
                icmp_ln64_reg_1180_pp1_iter21_reg <= icmp_ln64_reg_1180_pp1_iter20_reg;
                icmp_ln64_reg_1180_pp1_iter22_reg <= icmp_ln64_reg_1180_pp1_iter21_reg;
                icmp_ln64_reg_1180_pp1_iter23_reg <= icmp_ln64_reg_1180_pp1_iter22_reg;
                icmp_ln64_reg_1180_pp1_iter24_reg <= icmp_ln64_reg_1180_pp1_iter23_reg;
                icmp_ln64_reg_1180_pp1_iter25_reg <= icmp_ln64_reg_1180_pp1_iter24_reg;
                icmp_ln64_reg_1180_pp1_iter26_reg <= icmp_ln64_reg_1180_pp1_iter25_reg;
                icmp_ln64_reg_1180_pp1_iter27_reg <= icmp_ln64_reg_1180_pp1_iter26_reg;
                icmp_ln64_reg_1180_pp1_iter28_reg <= icmp_ln64_reg_1180_pp1_iter27_reg;
                icmp_ln64_reg_1180_pp1_iter29_reg <= icmp_ln64_reg_1180_pp1_iter28_reg;
                icmp_ln64_reg_1180_pp1_iter2_reg <= icmp_ln64_reg_1180_pp1_iter1_reg;
                icmp_ln64_reg_1180_pp1_iter30_reg <= icmp_ln64_reg_1180_pp1_iter29_reg;
                icmp_ln64_reg_1180_pp1_iter31_reg <= icmp_ln64_reg_1180_pp1_iter30_reg;
                icmp_ln64_reg_1180_pp1_iter32_reg <= icmp_ln64_reg_1180_pp1_iter31_reg;
                icmp_ln64_reg_1180_pp1_iter33_reg <= icmp_ln64_reg_1180_pp1_iter32_reg;
                icmp_ln64_reg_1180_pp1_iter34_reg <= icmp_ln64_reg_1180_pp1_iter33_reg;
                icmp_ln64_reg_1180_pp1_iter35_reg <= icmp_ln64_reg_1180_pp1_iter34_reg;
                icmp_ln64_reg_1180_pp1_iter36_reg <= icmp_ln64_reg_1180_pp1_iter35_reg;
                icmp_ln64_reg_1180_pp1_iter37_reg <= icmp_ln64_reg_1180_pp1_iter36_reg;
                icmp_ln64_reg_1180_pp1_iter38_reg <= icmp_ln64_reg_1180_pp1_iter37_reg;
                icmp_ln64_reg_1180_pp1_iter39_reg <= icmp_ln64_reg_1180_pp1_iter38_reg;
                icmp_ln64_reg_1180_pp1_iter3_reg <= icmp_ln64_reg_1180_pp1_iter2_reg;
                icmp_ln64_reg_1180_pp1_iter40_reg <= icmp_ln64_reg_1180_pp1_iter39_reg;
                icmp_ln64_reg_1180_pp1_iter41_reg <= icmp_ln64_reg_1180_pp1_iter40_reg;
                icmp_ln64_reg_1180_pp1_iter42_reg <= icmp_ln64_reg_1180_pp1_iter41_reg;
                icmp_ln64_reg_1180_pp1_iter43_reg <= icmp_ln64_reg_1180_pp1_iter42_reg;
                icmp_ln64_reg_1180_pp1_iter44_reg <= icmp_ln64_reg_1180_pp1_iter43_reg;
                icmp_ln64_reg_1180_pp1_iter45_reg <= icmp_ln64_reg_1180_pp1_iter44_reg;
                icmp_ln64_reg_1180_pp1_iter4_reg <= icmp_ln64_reg_1180_pp1_iter3_reg;
                icmp_ln64_reg_1180_pp1_iter5_reg <= icmp_ln64_reg_1180_pp1_iter4_reg;
                icmp_ln64_reg_1180_pp1_iter6_reg <= icmp_ln64_reg_1180_pp1_iter5_reg;
                icmp_ln64_reg_1180_pp1_iter7_reg <= icmp_ln64_reg_1180_pp1_iter6_reg;
                icmp_ln64_reg_1180_pp1_iter8_reg <= icmp_ln64_reg_1180_pp1_iter7_reg;
                icmp_ln64_reg_1180_pp1_iter9_reg <= icmp_ln64_reg_1180_pp1_iter8_reg;
                line_buffer_0_2_load_2_reg_1200_pp1_iter2_reg <= line_buffer_0_2_load_2_reg_1200;
                line_buffer_1_2_load_3_reg_1236_pp1_iter14_reg <= line_buffer_1_2_load_3_reg_1236;
                line_buffer_2_2_load_3_reg_1277_pp1_iter26_reg <= line_buffer_2_2_load_3_reg_1277;
                mul_0_1_reg_1211_pp1_iter6_reg <= mul_0_1_reg_1211;
                mul_0_1_reg_1211_pp1_iter7_reg <= mul_0_1_reg_1211_pp1_iter6_reg;
                mul_0_1_reg_1211_pp1_iter8_reg <= mul_0_1_reg_1211_pp1_iter7_reg;
                mul_0_2_reg_1216_pp1_iter10_reg <= mul_0_2_reg_1216_pp1_iter9_reg;
                mul_0_2_reg_1216_pp1_iter11_reg <= mul_0_2_reg_1216_pp1_iter10_reg;
                mul_0_2_reg_1216_pp1_iter12_reg <= mul_0_2_reg_1216_pp1_iter11_reg;
                mul_0_2_reg_1216_pp1_iter7_reg <= mul_0_2_reg_1216;
                mul_0_2_reg_1216_pp1_iter8_reg <= mul_0_2_reg_1216_pp1_iter7_reg;
                mul_0_2_reg_1216_pp1_iter9_reg <= mul_0_2_reg_1216_pp1_iter8_reg;
                mul_1_1_reg_1252_pp1_iter18_reg <= mul_1_1_reg_1252;
                mul_1_1_reg_1252_pp1_iter19_reg <= mul_1_1_reg_1252_pp1_iter18_reg;
                mul_1_1_reg_1252_pp1_iter20_reg <= mul_1_1_reg_1252_pp1_iter19_reg;
                mul_1_2_reg_1257_pp1_iter19_reg <= mul_1_2_reg_1257;
                mul_1_2_reg_1257_pp1_iter20_reg <= mul_1_2_reg_1257_pp1_iter19_reg;
                mul_1_2_reg_1257_pp1_iter21_reg <= mul_1_2_reg_1257_pp1_iter20_reg;
                mul_1_2_reg_1257_pp1_iter22_reg <= mul_1_2_reg_1257_pp1_iter21_reg;
                mul_1_2_reg_1257_pp1_iter23_reg <= mul_1_2_reg_1257_pp1_iter22_reg;
                mul_1_2_reg_1257_pp1_iter24_reg <= mul_1_2_reg_1257_pp1_iter23_reg;
                mul_2_1_reg_1293_pp1_iter30_reg <= mul_2_1_reg_1293;
                mul_2_1_reg_1293_pp1_iter31_reg <= mul_2_1_reg_1293_pp1_iter30_reg;
                mul_2_1_reg_1293_pp1_iter32_reg <= mul_2_1_reg_1293_pp1_iter31_reg;
                mul_2_2_reg_1298_pp1_iter31_reg <= mul_2_2_reg_1298;
                mul_2_2_reg_1298_pp1_iter32_reg <= mul_2_2_reg_1298_pp1_iter31_reg;
                mul_2_2_reg_1298_pp1_iter33_reg <= mul_2_2_reg_1298_pp1_iter32_reg;
                mul_2_2_reg_1298_pp1_iter34_reg <= mul_2_2_reg_1298_pp1_iter33_reg;
                mul_2_2_reg_1298_pp1_iter35_reg <= mul_2_2_reg_1298_pp1_iter34_reg;
                mul_2_2_reg_1298_pp1_iter36_reg <= mul_2_2_reg_1298_pp1_iter35_reg;
                    p_cast5_reg_1189_pp1_iter10_reg(4 downto 0) <= p_cast5_reg_1189_pp1_iter9_reg(4 downto 0);
                    p_cast5_reg_1189_pp1_iter11_reg(4 downto 0) <= p_cast5_reg_1189_pp1_iter10_reg(4 downto 0);
                    p_cast5_reg_1189_pp1_iter12_reg(4 downto 0) <= p_cast5_reg_1189_pp1_iter11_reg(4 downto 0);
                    p_cast5_reg_1189_pp1_iter13_reg(4 downto 0) <= p_cast5_reg_1189_pp1_iter12_reg(4 downto 0);
                    p_cast5_reg_1189_pp1_iter14_reg(4 downto 0) <= p_cast5_reg_1189_pp1_iter13_reg(4 downto 0);
                    p_cast5_reg_1189_pp1_iter15_reg(4 downto 0) <= p_cast5_reg_1189_pp1_iter14_reg(4 downto 0);
                    p_cast5_reg_1189_pp1_iter16_reg(4 downto 0) <= p_cast5_reg_1189_pp1_iter15_reg(4 downto 0);
                    p_cast5_reg_1189_pp1_iter17_reg(4 downto 0) <= p_cast5_reg_1189_pp1_iter16_reg(4 downto 0);
                    p_cast5_reg_1189_pp1_iter18_reg(4 downto 0) <= p_cast5_reg_1189_pp1_iter17_reg(4 downto 0);
                    p_cast5_reg_1189_pp1_iter19_reg(4 downto 0) <= p_cast5_reg_1189_pp1_iter18_reg(4 downto 0);
                    p_cast5_reg_1189_pp1_iter20_reg(4 downto 0) <= p_cast5_reg_1189_pp1_iter19_reg(4 downto 0);
                    p_cast5_reg_1189_pp1_iter21_reg(4 downto 0) <= p_cast5_reg_1189_pp1_iter20_reg(4 downto 0);
                    p_cast5_reg_1189_pp1_iter22_reg(4 downto 0) <= p_cast5_reg_1189_pp1_iter21_reg(4 downto 0);
                    p_cast5_reg_1189_pp1_iter23_reg(4 downto 0) <= p_cast5_reg_1189_pp1_iter22_reg(4 downto 0);
                    p_cast5_reg_1189_pp1_iter2_reg(4 downto 0) <= p_cast5_reg_1189_pp1_iter1_reg(4 downto 0);
                    p_cast5_reg_1189_pp1_iter3_reg(4 downto 0) <= p_cast5_reg_1189_pp1_iter2_reg(4 downto 0);
                    p_cast5_reg_1189_pp1_iter4_reg(4 downto 0) <= p_cast5_reg_1189_pp1_iter3_reg(4 downto 0);
                    p_cast5_reg_1189_pp1_iter5_reg(4 downto 0) <= p_cast5_reg_1189_pp1_iter4_reg(4 downto 0);
                    p_cast5_reg_1189_pp1_iter6_reg(4 downto 0) <= p_cast5_reg_1189_pp1_iter5_reg(4 downto 0);
                    p_cast5_reg_1189_pp1_iter7_reg(4 downto 0) <= p_cast5_reg_1189_pp1_iter6_reg(4 downto 0);
                    p_cast5_reg_1189_pp1_iter8_reg(4 downto 0) <= p_cast5_reg_1189_pp1_iter7_reg(4 downto 0);
                    p_cast5_reg_1189_pp1_iter9_reg(4 downto 0) <= p_cast5_reg_1189_pp1_iter8_reg(4 downto 0);
                sum_reg_1318_pp1_iter45_reg <= sum_reg_1318;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln42_5_fu_820_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    j_cast4_reg_1130(4 downto 0) <= j_cast4_fu_831_p1(4 downto 0);
                line_buffer_1_2_addr_reg_1135 <= j_cast4_fu_831_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1180 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                line_buffer_0_2_load_2_reg_1200 <= line_buffer_0_2_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1180_pp1_iter12_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                line_buffer_1_2_load_3_reg_1236 <= line_buffer_1_2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1180_pp1_iter24_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter25 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                line_buffer_2_2_load_3_reg_1277 <= line_buffer_2_2_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1180_pp1_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                mul_0_1_reg_1211 <= grp_fu_518_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1180_pp1_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                mul_0_2_reg_1216 <= grp_fu_523_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1180_pp1_iter16_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                mul_1_1_reg_1252 <= grp_fu_532_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1180_pp1_iter17_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                mul_1_2_reg_1257 <= grp_fu_537_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1180_pp1_iter15_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                mul_1_reg_1247 <= grp_fu_527_p2;
                sum_18_0_2_reg_1242 <= grp_fu_481_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1180_pp1_iter28_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                mul_2_1_reg_1293 <= grp_fu_546_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1180_pp1_iter29_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                mul_2_2_reg_1298 <= grp_fu_551_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1180_pp1_iter27_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                mul_2_reg_1288 <= grp_fu_541_p2;
                sum_18_1_2_reg_1283 <= grp_fu_493_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1180_pp1_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                mul_reg_1206 <= grp_fu_513_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln42_reg_972 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                or_ln45_reg_1116 <= or_ln45_fu_810_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_fu_886_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                    p_cast5_reg_1189(4 downto 0) <= p_cast5_fu_907_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln40_fu_628_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                select_ln40_13_reg_1011 <= select_ln40_13_fu_686_p3;
                select_ln40_reg_1003 <= select_ln40_fu_646_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1180_pp1_iter11_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                sum_18_0_1_reg_1231 <= grp_fu_477_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1180_pp1_iter23_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                sum_18_1_1_reg_1272 <= grp_fu_489_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1180_pp1_iter19_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                sum_18_1_reg_1262 <= grp_fu_485_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1180_pp1_iter35_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                sum_18_2_1_reg_1308 <= grp_fu_501_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1180_pp1_iter39_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                sum_18_2_2_reg_1313 <= grp_fu_505_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1180_pp1_iter31_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                sum_18_2_reg_1303 <= grp_fu_497_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1180_pp1_iter43_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                sum_reg_1318 <= grp_fu_509_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1180_pp1_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                sum_s_reg_1221 <= grp_fu_472_p2;
            end if;
        end if;
    end process;
    j_cast4_reg_1130(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast5_reg_1189(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast5_reg_1189_pp1_iter1_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast5_reg_1189_pp1_iter2_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast5_reg_1189_pp1_iter3_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast5_reg_1189_pp1_iter4_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast5_reg_1189_pp1_iter5_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast5_reg_1189_pp1_iter6_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast5_reg_1189_pp1_iter7_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast5_reg_1189_pp1_iter8_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast5_reg_1189_pp1_iter9_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast5_reg_1189_pp1_iter10_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast5_reg_1189_pp1_iter11_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast5_reg_1189_pp1_iter12_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast5_reg_1189_pp1_iter13_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast5_reg_1189_pp1_iter14_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast5_reg_1189_pp1_iter15_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast5_reg_1189_pp1_iter16_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast5_reg_1189_pp1_iter17_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast5_reg_1189_pp1_iter18_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast5_reg_1189_pp1_iter19_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast5_reg_1189_pp1_iter20_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast5_reg_1189_pp1_iter21_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast5_reg_1189_pp1_iter22_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    p_cast5_reg_1189_pp1_iter23_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln42_reg_972, cmp4827_reg_986, ap_CS_fsm_state2, icmp_ln40_fu_628_p2, ap_CS_fsm_state3, icmp_ln42_5_fu_820_p2, ap_enable_reg_pp0_iter0, icmp_ln52_fu_876_p2, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_enable_reg_pp1_iter25, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter24, ap_enable_reg_pp1_iter26, ap_enable_reg_pp1_iter45, ap_enable_reg_pp1_iter46)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln40_fu_628_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln42_reg_972 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln42_5_fu_820_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln42_5_fu_820_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln52_fu_876_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((cmp4827_reg_986 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state55;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter26 = ap_const_logic_0) and (ap_enable_reg_pp1_iter24 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter25 = ap_const_logic_1))) and not(((ap_enable_reg_pp1_iter45 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter46 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter45 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter46 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter26 = ap_const_logic_0) and (ap_enable_reg_pp1_iter24 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter25 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    and_ln11_fu_947_p2 <= (or_ln11_fu_941_p2 and grp_fu_555_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state55 <= ap_CS_fsm(7);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp1_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp1_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp1_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp1_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp1_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp1_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp1_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp1_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp1_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp1_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp1_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp1_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp1_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp1_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp1_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp1_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp1_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp1_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp1_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp1_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp1_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp1_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp1_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp1_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp1_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp1_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp1_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp1_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp1_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp1_stage0_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp1_stage0_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp1_stage0_iter36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp1_stage0_iter37 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp1_stage0_iter38 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp1_stage0_iter39 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp1_stage0_iter40 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp1_stage0_iter41 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp1_stage0_iter42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp1_stage0_iter43 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp1_stage0_iter44 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp1_stage0_iter45 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp1_stage0_iter46 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(icmp_ln42_5_fu_820_p2)
    begin
        if ((icmp_ln42_5_fu_820_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter25_state33_assign_proc : process(ap_enable_reg_pp1_iter25, ap_enable_reg_pp1_iter24)
    begin
        if (((ap_enable_reg_pp1_iter24 = ap_const_logic_0) and (ap_enable_reg_pp1_iter25 = ap_const_logic_1))) then 
            ap_condition_pp1_exit_iter25_state33 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter25_state33 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_flush_enable_assign_proc : process(icmp_ln64_fu_886_p2, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln64_fu_886_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_condition_pp1_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp1_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln40_fu_628_p2)
    begin
        if ((((icmp_ln40_fu_628_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter13, ap_enable_reg_pp1_iter25, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter5, ap_enable_reg_pp1_iter6, ap_enable_reg_pp1_iter7, ap_enable_reg_pp1_iter8, ap_enable_reg_pp1_iter9, ap_enable_reg_pp1_iter10, ap_enable_reg_pp1_iter11, ap_enable_reg_pp1_iter12, ap_enable_reg_pp1_iter14, ap_enable_reg_pp1_iter15, ap_enable_reg_pp1_iter16, ap_enable_reg_pp1_iter17, ap_enable_reg_pp1_iter18, ap_enable_reg_pp1_iter19, ap_enable_reg_pp1_iter20, ap_enable_reg_pp1_iter21, ap_enable_reg_pp1_iter22, ap_enable_reg_pp1_iter23, ap_enable_reg_pp1_iter24, ap_enable_reg_pp1_iter26, ap_enable_reg_pp1_iter27, ap_enable_reg_pp1_iter28, ap_enable_reg_pp1_iter29, ap_enable_reg_pp1_iter30, ap_enable_reg_pp1_iter31, ap_enable_reg_pp1_iter32, ap_enable_reg_pp1_iter33, ap_enable_reg_pp1_iter34, ap_enable_reg_pp1_iter35, ap_enable_reg_pp1_iter36, ap_enable_reg_pp1_iter37, ap_enable_reg_pp1_iter38, ap_enable_reg_pp1_iter39, ap_enable_reg_pp1_iter40, ap_enable_reg_pp1_iter41, ap_enable_reg_pp1_iter42, ap_enable_reg_pp1_iter43, ap_enable_reg_pp1_iter44, ap_enable_reg_pp1_iter45, ap_enable_reg_pp1_iter46)
    begin
        if (((ap_enable_reg_pp1_iter46 = ap_const_logic_0) and (ap_enable_reg_pp1_iter45 = ap_const_logic_0) and (ap_enable_reg_pp1_iter44 = ap_const_logic_0) and (ap_enable_reg_pp1_iter43 = ap_const_logic_0) and (ap_enable_reg_pp1_iter42 = ap_const_logic_0) and (ap_enable_reg_pp1_iter41 = ap_const_logic_0) and (ap_enable_reg_pp1_iter40 = ap_const_logic_0) and (ap_enable_reg_pp1_iter39 = ap_const_logic_0) and (ap_enable_reg_pp1_iter38 = ap_const_logic_0) and (ap_enable_reg_pp1_iter37 = ap_const_logic_0) and (ap_enable_reg_pp1_iter36 = ap_const_logic_0) and (ap_enable_reg_pp1_iter35 = ap_const_logic_0) and (ap_enable_reg_pp1_iter34 = ap_const_logic_0) and (ap_enable_reg_pp1_iter33 = ap_const_logic_0) and (ap_enable_reg_pp1_iter32 = ap_const_logic_0) and (ap_enable_reg_pp1_iter31 = ap_const_logic_0) and (ap_enable_reg_pp1_iter30 = ap_const_logic_0) and (ap_enable_reg_pp1_iter29 = ap_const_logic_0) and (ap_enable_reg_pp1_iter28 = ap_const_logic_0) and (ap_enable_reg_pp1_iter27 = ap_const_logic_0) and (ap_enable_reg_pp1_iter26 = ap_const_logic_0) and (ap_enable_reg_pp1_iter24 = ap_const_logic_0) and (ap_enable_reg_pp1_iter23 = ap_const_logic_0) and (ap_enable_reg_pp1_iter22 = ap_const_logic_0) and (ap_enable_reg_pp1_iter21 = ap_const_logic_0) and (ap_enable_reg_pp1_iter20 = ap_const_logic_0) and (ap_enable_reg_pp1_iter19 = ap_const_logic_0) and (ap_enable_reg_pp1_iter18 = ap_const_logic_0) and (ap_enable_reg_pp1_iter17 = ap_const_logic_0) and (ap_enable_reg_pp1_iter16 = ap_const_logic_0) and (ap_enable_reg_pp1_iter15 = ap_const_logic_0) and (ap_enable_reg_pp1_iter14 = ap_const_logic_0) and (ap_enable_reg_pp1_iter12 = ap_const_logic_0) and (ap_enable_reg_pp1_iter11 = ap_const_logic_0) and (ap_enable_reg_pp1_iter10 = ap_const_logic_0) and (ap_enable_reg_pp1_iter9 = ap_const_logic_0) and (ap_enable_reg_pp1_iter8 = ap_const_logic_0) and (ap_enable_reg_pp1_iter7 = ap_const_logic_0) and (ap_enable_reg_pp1_iter6 = ap_const_logic_0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter25 = ap_const_logic_0) and (ap_enable_reg_pp1_iter13 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_window_buffer_load_0_phi_fu_422_p4_assign_proc : process(window_buffer_load_9_0_reg_409, window_buffer_load_0_reg_419, icmp_ln64_reg_1180_pp1_iter1_reg, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln64_reg_1180_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            ap_phi_mux_window_buffer_load_0_phi_fu_422_p4 <= window_buffer_load_9_0_reg_409;
        else 
            ap_phi_mux_window_buffer_load_0_phi_fu_422_p4 <= window_buffer_load_0_reg_419;
        end if; 
    end process;


    ap_phi_mux_window_buffer_load_1_phi_fu_443_p4_assign_proc : process(window_buffer_load_9_1_reg_430, window_buffer_load_1_reg_440, icmp_ln64_reg_1180_pp1_iter13_reg, ap_enable_reg_pp1_iter14, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln64_reg_1180_pp1_iter13_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter14 = ap_const_logic_1))) then 
            ap_phi_mux_window_buffer_load_1_phi_fu_443_p4 <= window_buffer_load_9_1_reg_430;
        else 
            ap_phi_mux_window_buffer_load_1_phi_fu_443_p4 <= window_buffer_load_1_reg_440;
        end if; 
    end process;


    ap_phi_mux_window_buffer_load_2_phi_fu_464_p4_assign_proc : process(window_buffer_load_9_2_reg_451, window_buffer_load_2_reg_461, icmp_ln64_reg_1180_pp1_iter25_reg, ap_enable_reg_pp1_iter26, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln64_reg_1180_pp1_iter25_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter26 = ap_const_logic_1))) then 
            ap_phi_mux_window_buffer_load_2_phi_fu_464_p4 <= window_buffer_load_9_2_reg_451;
        else 
            ap_phi_mux_window_buffer_load_2_phi_fu_464_p4 <= window_buffer_load_2_reg_461;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln40_fu_628_p2)
    begin
        if (((icmp_ln40_fu_628_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_cast_fu_882_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_reg_398),32));
    bias_conv1_address0 <= zext_ln40_28_fu_694_p1(4 - 1 downto 0);

    bias_conv1_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            bias_conv1_ce0 <= ap_const_logic_1;
        else 
            bias_conv1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln11_fu_912_p1 <= sum_reg_1318_pp1_iter45_reg;
    bitcast_ln49_fu_598_p1 <= p_read;
    cmp4827_fu_592_p2 <= "1" when (signed(sub47_fu_586_p2) > signed(ap_const_lv32_0)) else "0";
    empty_45_fu_622_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(num_ker_reg_365),8));
    empty_45_fu_622_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_610_p3),8));
    empty_49_fu_901_p1 <= b_reg_398(5 - 1 downto 0);
    empty_51_fu_664_p1 <= add_ln40_36_fu_654_p2(4 - 1 downto 0);
    empty_fu_606_p1 <= num_ker_reg_365(4 - 1 downto 0);
    icmp_ln11_5_fu_935_p2 <= "1" when (trunc_ln11_fu_925_p1 = ap_const_lv52_0) else "0";
    icmp_ln11_fu_929_p2 <= "0" when (tmp_fu_915_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln40_fu_628_p2 <= "1" when (indvar_flatten_reg_354 = ap_const_lv9_1E0) else "0";
    icmp_ln41_fu_640_p2 <= "1" when (i_reg_376 = ap_const_lv5_1E) else "0";
    icmp_ln42_5_fu_820_p2 <= "1" when (j_cast_fu_816_p1 = add_ln31_reg_967) else "0";
    icmp_ln42_fu_574_p2 <= "1" when (signed(add_ln31_fu_568_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln45_10_fu_800_p2 <= "1" when (select_ln40_reg_1003 = ap_const_lv5_0) else "0";
    icmp_ln45_11_fu_805_p2 <= "1" when (select_ln40_reg_1003 = ap_const_lv5_1D) else "0";
    icmp_ln45_5_fu_843_p2 <= "1" when (j_cast_fu_816_p1 = sub13_reg_976) else "0";
    icmp_ln45_fu_837_p2 <= "1" when (j_reg_387 = ap_const_lv5_0) else "0";
    icmp_ln52_fu_876_p2 <= "1" when (tmp_4_fu_867_p4 = ap_const_lv4_0) else "0";
    icmp_ln64_fu_886_p2 <= "1" when (b_cast_fu_882_p1 = sub47_reg_981) else "0";
    j_cast4_fu_831_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_387),64));
    j_cast_fu_816_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_387),32));
    kernel_conv1_address0 <= zext_ln40_29_fu_707_p1(8 - 1 downto 0);
    kernel_conv1_address1 <= zext_ln40_30_fu_718_p1(8 - 1 downto 0);
    kernel_conv1_address2 <= zext_ln40_31_fu_729_p1(8 - 1 downto 0);
    kernel_conv1_address3 <= zext_ln40_32_fu_740_p1(8 - 1 downto 0);
    kernel_conv1_address4 <= zext_ln40_33_fu_751_p1(8 - 1 downto 0);
    kernel_conv1_address5 <= zext_ln40_34_fu_762_p1(8 - 1 downto 0);
    kernel_conv1_address6 <= zext_ln40_35_fu_773_p1(8 - 1 downto 0);
    kernel_conv1_address7 <= zext_ln40_36_fu_784_p1(8 - 1 downto 0);
    kernel_conv1_address8 <= zext_ln40_37_fu_795_p1(8 - 1 downto 0);

    kernel_conv1_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            kernel_conv1_ce0 <= ap_const_logic_1;
        else 
            kernel_conv1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_conv1_ce1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            kernel_conv1_ce1 <= ap_const_logic_1;
        else 
            kernel_conv1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_conv1_ce2_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            kernel_conv1_ce2 <= ap_const_logic_1;
        else 
            kernel_conv1_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_conv1_ce3_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            kernel_conv1_ce3 <= ap_const_logic_1;
        else 
            kernel_conv1_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_conv1_ce4_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            kernel_conv1_ce4 <= ap_const_logic_1;
        else 
            kernel_conv1_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_conv1_ce5_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            kernel_conv1_ce5 <= ap_const_logic_1;
        else 
            kernel_conv1_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_conv1_ce6_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            kernel_conv1_ce6 <= ap_const_logic_1;
        else 
            kernel_conv1_ce6 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_conv1_ce7_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            kernel_conv1_ce7 <= ap_const_logic_1;
        else 
            kernel_conv1_ce7 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_conv1_ce8_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            kernel_conv1_ce8 <= ap_const_logic_1;
        else 
            kernel_conv1_ce8 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_0_2_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, j_cast4_reg_1130, ap_CS_fsm_state6, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            line_buffer_0_2_address0 <= ap_const_lv5_0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_0_2_address0 <= j_cast4_reg_1130(5 - 1 downto 0);
        else 
            line_buffer_0_2_address0 <= "XXXXX";
        end if; 
    end process;


    line_buffer_0_2_address1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, p_cast5_fu_907_p1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            line_buffer_0_2_address1 <= p_cast5_fu_907_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            line_buffer_0_2_address1 <= ap_const_lv5_1;
        else 
            line_buffer_0_2_address1 <= "XXXXX";
        end if; 
    end process;


    line_buffer_0_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state6, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            line_buffer_0_2_ce0 <= ap_const_logic_1;
        else 
            line_buffer_0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_0_2_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_state6, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            line_buffer_0_2_ce1 <= ap_const_logic_1;
        else 
            line_buffer_0_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_0_2_we0_assign_proc : process(icmp_ln42_5_reg_1121, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln42_5_reg_1121 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_0_2_we0 <= ap_const_logic_1;
        else 
            line_buffer_0_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_1_2_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, j_cast4_fu_831_p1, ap_CS_fsm_state6, p_cast5_reg_1189_pp1_iter11_reg, ap_enable_reg_pp1_iter12, ap_block_pp1_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter12 = ap_const_logic_1))) then 
            line_buffer_1_2_address0 <= p_cast5_reg_1189_pp1_iter11_reg(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            line_buffer_1_2_address0 <= ap_const_lv5_0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_1_2_address0 <= j_cast4_fu_831_p1(5 - 1 downto 0);
        else 
            line_buffer_1_2_address0 <= "XXXXX";
        end if; 
    end process;


    line_buffer_1_2_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, line_buffer_1_2_addr_reg_1135, ap_CS_fsm_state6, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            line_buffer_1_2_address1 <= ap_const_lv5_1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_1_2_address1 <= line_buffer_1_2_addr_reg_1135;
        else 
            line_buffer_1_2_address1 <= "XXXXX";
        end if; 
    end process;


    line_buffer_1_2_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state6, ap_enable_reg_pp1_iter12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp1_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            line_buffer_1_2_ce0 <= ap_const_logic_1;
        else 
            line_buffer_1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_1_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state6, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            line_buffer_1_2_ce1 <= ap_const_logic_1;
        else 
            line_buffer_1_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_1_2_we1_assign_proc : process(icmp_ln42_5_reg_1121, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln42_5_reg_1121 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_1_2_we1 <= ap_const_logic_1;
        else 
            line_buffer_1_2_we1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_2_2_address0_assign_proc : process(icmp_ln42_5_fu_820_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, j_cast4_fu_831_p1, ap_CS_fsm_state6, ap_block_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            line_buffer_2_2_address0 <= ap_const_lv5_0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln42_5_fu_820_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_2_2_address0 <= j_cast4_fu_831_p1(5 - 1 downto 0);
        else 
            line_buffer_2_2_address0 <= "XXXXX";
        end if; 
    end process;


    line_buffer_2_2_address1_assign_proc : process(ap_CS_fsm_state6, p_cast5_reg_1189_pp1_iter23_reg, ap_enable_reg_pp1_iter24, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter24 = ap_const_logic_1))) then 
            line_buffer_2_2_address1 <= p_cast5_reg_1189_pp1_iter23_reg(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            line_buffer_2_2_address1 <= ap_const_lv5_1;
        else 
            line_buffer_2_2_address1 <= "XXXXX";
        end if; 
    end process;


    line_buffer_2_2_ce0_assign_proc : process(icmp_ln42_5_fu_820_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln42_5_fu_820_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            line_buffer_2_2_ce0 <= ap_const_logic_1;
        else 
            line_buffer_2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_2_2_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_state6, ap_enable_reg_pp1_iter24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_enable_reg_pp1_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            line_buffer_2_2_ce1 <= ap_const_logic_1;
        else 
            line_buffer_2_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_2_2_d0 <= 
        ap_const_lv64_0 when (or_ln45_10_fu_854_p2(0) = '1') else 
        bitcast_ln49_reg_990;

    line_buffer_2_2_we0_assign_proc : process(icmp_ln42_5_fu_820_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln42_5_fu_820_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_2_2_we0 <= ap_const_logic_1;
        else 
            line_buffer_2_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln11_fu_941_p2 <= (icmp_ln11_fu_929_p2 or icmp_ln11_5_fu_935_p2);
    or_ln45_10_fu_854_p2 <= (or_ln45_reg_1116 or or_ln45_9_fu_848_p2);
    or_ln45_9_fu_848_p2 <= (icmp_ln45_fu_837_p2 or icmp_ln45_5_fu_843_p2);
    or_ln45_fu_810_p2 <= (icmp_ln45_11_fu_805_p2 or icmp_ln45_10_fu_800_p2);
    output_conv1 <= 
        bitcast_ln11_fu_912_p1 when (and_ln11_fu_947_p2(0) = '1') else 
        ap_const_lv64_0;

    output_conv1_ap_vld_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln64_reg_1180_pp1_iter45_reg, ap_enable_reg_pp1_iter46)
    begin
        if (((icmp_ln64_reg_1180_pp1_iter45_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter46 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            output_conv1_ap_vld <= ap_const_logic_1;
        else 
            output_conv1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_cast5_fu_907_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_49_fu_901_p2),64));
    p_mid1_fu_680_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_36_fu_654_p2),8));
    p_mid1_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_mid1_fu_668_p3),8));
    p_shl_fu_610_p3 <= (empty_fu_606_p1 & ap_const_lv3_0);
    p_shl_mid1_fu_668_p3 <= (empty_51_fu_664_p1 & ap_const_lv3_0);
    select_ln40_13_fu_686_p3 <= 
        add_ln40_36_fu_654_p2 when (icmp_ln41_fu_640_p2(0) = '1') else 
        num_ker_reg_365;
    select_ln40_14_fu_699_p3 <= 
        p_mid1_fu_680_p2 when (icmp_ln41_fu_640_p2(0) = '1') else 
        empty_45_fu_622_p2;
    select_ln40_fu_646_p3 <= 
        ap_const_lv5_0 when (icmp_ln41_fu_640_p2(0) = '1') else 
        i_reg_376;
    shl_ln_fu_560_p3 <= (padding & ap_const_lv1_0);
    tmp_4_fu_867_p4 <= select_ln40_reg_1003(4 downto 1);
    tmp_fu_915_p4 <= bitcast_ln11_fu_912_p1(62 downto 52);
    trunc_ln11_fu_925_p1 <= bitcast_ln11_fu_912_p1(52 - 1 downto 0);
    zext_ln40_28_fu_694_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln40_13_fu_686_p3),64));
    zext_ln40_29_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln40_14_fu_699_p3),64));
    zext_ln40_30_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_28_fu_712_p2),64));
    zext_ln40_31_fu_729_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_29_fu_723_p2),64));
    zext_ln40_32_fu_740_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_30_fu_734_p2),64));
    zext_ln40_33_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_31_fu_745_p2),64));
    zext_ln40_34_fu_762_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_32_fu_756_p2),64));
    zext_ln40_35_fu_773_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_33_fu_767_p2),64));
    zext_ln40_36_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_34_fu_778_p2),64));
    zext_ln40_37_fu_795_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_35_fu_789_p2),64));
end behav;
