-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CNN_convolution_double_double_double_double_4_4_8_8_4_4_3_3_1_1_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (63 downto 0);
    output_conv4 : OUT STD_LOGIC_VECTOR (63 downto 0);
    output_conv4_ap_vld : OUT STD_LOGIC;
    padding : IN STD_LOGIC_VECTOR (30 downto 0) );
end;


architecture behav of CNN_convolution_double_double_double_double_4_4_8_8_4_4_3_3_1_1_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv9_180 : STD_LOGIC_VECTOR (8 downto 0) := "110000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv7_30 : STD_LOGIC_VECTOR (6 downto 0) := "0110000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv10_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000011";
    constant ap_const_lv10_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_const_lv10_5 : STD_LOGIC_VECTOR (9 downto 0) := "0000000101";
    constant ap_const_lv10_6 : STD_LOGIC_VECTOR (9 downto 0) := "0000000110";
    constant ap_const_lv10_7 : STD_LOGIC_VECTOR (9 downto 0) := "0000000111";
    constant ap_const_lv10_8 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_const_lv64_3FE4B7C63FEAD19B : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100100101101111100011000111111111010101101000110011011";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal bias_conv4_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal bias_conv4_ce0 : STD_LOGIC;
    signal bias_conv4_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_1_10_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal line_buffer_1_10_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal line_buffer_1_10_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal line_buffer_1_10_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal line_buffer_2_10_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal line_buffer_2_10_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal line_buffer_2_10_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal line_buffer_2_10_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal line_buffer_0_10_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal line_buffer_0_10_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal line_buffer_0_10_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal line_buffer_0_10_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal kernel_conv4_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal kernel_conv4_ce0 : STD_LOGIC;
    signal kernel_conv4_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv4_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal kernel_conv4_ce1 : STD_LOGIC;
    signal kernel_conv4_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv4_address2 : STD_LOGIC_VECTOR (9 downto 0);
    signal kernel_conv4_ce2 : STD_LOGIC;
    signal kernel_conv4_q2 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv4_address3 : STD_LOGIC_VECTOR (9 downto 0);
    signal kernel_conv4_ce3 : STD_LOGIC;
    signal kernel_conv4_q3 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv4_address4 : STD_LOGIC_VECTOR (9 downto 0);
    signal kernel_conv4_ce4 : STD_LOGIC;
    signal kernel_conv4_q4 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv4_address5 : STD_LOGIC_VECTOR (9 downto 0);
    signal kernel_conv4_ce5 : STD_LOGIC;
    signal kernel_conv4_q5 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv4_address6 : STD_LOGIC_VECTOR (9 downto 0);
    signal kernel_conv4_ce6 : STD_LOGIC;
    signal kernel_conv4_q6 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv4_address7 : STD_LOGIC_VECTOR (9 downto 0);
    signal kernel_conv4_ce7 : STD_LOGIC;
    signal kernel_conv4_q7 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv4_address8 : STD_LOGIC_VECTOR (9 downto 0);
    signal kernel_conv4_ce8 : STD_LOGIC;
    signal kernel_conv4_q8 : STD_LOGIC_VECTOR (63 downto 0);
    signal window_buffer_load_5_2_reg_372 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state7_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state10_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state11_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_state12_pp1_stage0_iter5 : BOOLEAN;
    signal ap_block_state13_pp1_stage0_iter6 : BOOLEAN;
    signal ap_block_state14_pp1_stage0_iter7 : BOOLEAN;
    signal ap_block_state15_pp1_stage0_iter8 : BOOLEAN;
    signal ap_block_state16_pp1_stage0_iter9 : BOOLEAN;
    signal ap_block_state17_pp1_stage0_iter10 : BOOLEAN;
    signal ap_block_state18_pp1_stage0_iter11 : BOOLEAN;
    signal ap_block_state19_pp1_stage0_iter12 : BOOLEAN;
    signal ap_block_state20_pp1_stage0_iter13 : BOOLEAN;
    signal ap_block_state21_pp1_stage0_iter14 : BOOLEAN;
    signal ap_block_state22_pp1_stage0_iter15 : BOOLEAN;
    signal ap_block_state23_pp1_stage0_iter16 : BOOLEAN;
    signal ap_block_state24_pp1_stage0_iter17 : BOOLEAN;
    signal ap_block_state25_pp1_stage0_iter18 : BOOLEAN;
    signal ap_block_state26_pp1_stage0_iter19 : BOOLEAN;
    signal ap_block_state27_pp1_stage0_iter20 : BOOLEAN;
    signal ap_block_state28_pp1_stage0_iter21 : BOOLEAN;
    signal ap_block_state29_pp1_stage0_iter22 : BOOLEAN;
    signal ap_block_state30_pp1_stage0_iter23 : BOOLEAN;
    signal ap_block_state31_pp1_stage0_iter24 : BOOLEAN;
    signal ap_block_state32_pp1_stage0_iter25 : BOOLEAN;
    signal ap_block_state33_pp1_stage0_iter26 : BOOLEAN;
    signal ap_block_state34_pp1_stage0_iter27 : BOOLEAN;
    signal ap_block_state35_pp1_stage0_iter28 : BOOLEAN;
    signal ap_block_state36_pp1_stage0_iter29 : BOOLEAN;
    signal ap_block_state37_pp1_stage0_iter30 : BOOLEAN;
    signal ap_block_state38_pp1_stage0_iter31 : BOOLEAN;
    signal ap_block_state39_pp1_stage0_iter32 : BOOLEAN;
    signal ap_block_state40_pp1_stage0_iter33 : BOOLEAN;
    signal ap_block_state41_pp1_stage0_iter34 : BOOLEAN;
    signal ap_block_state42_pp1_stage0_iter35 : BOOLEAN;
    signal ap_block_state43_pp1_stage0_iter36 : BOOLEAN;
    signal ap_block_state44_pp1_stage0_iter37 : BOOLEAN;
    signal ap_block_state45_pp1_stage0_iter38 : BOOLEAN;
    signal ap_block_state46_pp1_stage0_iter39 : BOOLEAN;
    signal ap_block_state47_pp1_stage0_iter40 : BOOLEAN;
    signal ap_block_state48_pp1_stage0_iter41 : BOOLEAN;
    signal ap_block_state49_pp1_stage0_iter42 : BOOLEAN;
    signal ap_block_state50_pp1_stage0_iter43 : BOOLEAN;
    signal ap_block_state51_pp1_stage0_iter44 : BOOLEAN;
    signal ap_block_state52_pp1_stage0_iter45 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal window_buffer_load_2_reg_382 : STD_LOGIC_VECTOR (63 downto 0);
    signal window_buffer_load_5_1_reg_393 : STD_LOGIC_VECTOR (63 downto 0);
    signal window_buffer_load_1_reg_403 : STD_LOGIC_VECTOR (63 downto 0);
    signal window_buffer_load_5_0_reg_414 : STD_LOGIC_VECTOR (63 downto 0);
    signal window_buffer_load_0_reg_424 : STD_LOGIC_VECTOR (63 downto 0);
    signal b_reg_435 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln31_fu_574_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln31_reg_1242 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln42_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_reg_1247 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub13_fu_586_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub13_reg_1251 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub47_fu_592_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub47_reg_1256 : STD_LOGIC_VECTOR (31 downto 0);
    signal cmp4827_fu_598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp4827_reg_1261 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln49_fu_604_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln49_reg_1265 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_31_fu_613_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_31_reg_1270 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal bias_conv4_load_reg_1281 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln39_fu_667_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln39_reg_1289 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln40_fu_673_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_reg_1294 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_fu_661_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln39_fu_751_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln39_reg_1301 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln39_12_fu_757_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln39_12_reg_1307 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln40_11_fu_901_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln40_11_reg_1362 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln40_fu_919_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln40_reg_1367 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal select_ln40_9_fu_927_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln40_9_reg_1373 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv4_load_reg_1378 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv4_load_1_reg_1383 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv4_load_2_reg_1388 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv4_load_3_reg_1393 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv4_load_4_reg_1398 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv4_load_5_reg_1403 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv4_load_6_reg_1408 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv4_load_7_reg_1413 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_conv4_load_8_reg_1418 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln45_fu_946_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln45_reg_1423 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln42_fu_961_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln52_fu_1109_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal line_buffer_0_10_2_load_reg_1473 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_0_10_3_load_reg_1478 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_1_10_2_load_reg_1483 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_1_10_3_load_reg_1488 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_2_10_2_load_reg_1493 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_buffer_2_10_3_load_reg_1498 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln64_fu_1135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1503 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1503_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1503_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1503_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1503_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1503_pp1_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1503_pp1_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1503_pp1_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1503_pp1_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1503_pp1_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1503_pp1_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1503_pp1_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1503_pp1_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1503_pp1_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1503_pp1_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1503_pp1_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1503_pp1_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1503_pp1_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1503_pp1_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1503_pp1_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1503_pp1_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1503_pp1_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1503_pp1_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1503_pp1_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1503_pp1_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1503_pp1_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1503_pp1_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1503_pp1_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1503_pp1_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1503_pp1_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1503_pp1_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1503_pp1_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1503_pp1_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1503_pp1_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1503_pp1_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1503_pp1_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1503_pp1_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1503_pp1_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1503_pp1_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1503_pp1_iter39_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1503_pp1_iter40_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1503_pp1_iter41_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1503_pp1_iter42_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1503_pp1_iter43_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1503_pp1_iter44_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln64_fu_1140_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal select_ln69_fu_1156_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln69_reg_1512 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln69_reg_1512_pp1_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln72_fu_1162_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln72_reg_1518 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln72_reg_1518_pp1_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln75_fu_1168_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln75_reg_1524 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln75_reg_1524_pp1_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_487_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_reg_1530 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_492_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_reg_1535 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_reg_1535_pp1_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_reg_1535_pp1_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_reg_1535_pp1_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_reg_1535_pp1_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_reg_1535_pp1_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_reg_1535_pp1_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_reg_1535_pp1_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_reg_1535_pp1_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_reg_1535_pp1_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_reg_1535_pp1_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_reg_1535_pp1_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_reg_1535_pp1_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_497_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_reg_1540 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_reg_1540_pp1_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_reg_1540_pp1_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_reg_1540_pp1_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_reg_1540_pp1_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_reg_1540_pp1_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_reg_1540_pp1_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_reg_1540_pp1_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_reg_1540_pp1_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_reg_1540_pp1_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_reg_1540_pp1_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_reg_1540_pp1_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_reg_1540_pp1_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_reg_1540_pp1_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_reg_1540_pp1_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_reg_1540_pp1_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_reg_1540_pp1_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_reg_1540_pp1_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_reg_1540_pp1_iter21_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_reg_1540_pp1_iter22_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_reg_1540_pp1_iter23_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_reg_1540_pp1_iter24_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_reg_1540_pp1_iter25_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_reg_1540_pp1_iter26_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_reg_1540_pp1_iter27_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_502_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_1_reg_1545 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_1_reg_1545_pp1_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_1_reg_1545_pp1_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_1_reg_1545_pp1_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_507_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_1_reg_1550 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_1_reg_1550_pp1_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_1_reg_1550_pp1_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_1_reg_1550_pp1_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_1_reg_1550_pp1_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_1_reg_1550_pp1_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_1_reg_1550_pp1_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_1_reg_1550_pp1_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_1_reg_1550_pp1_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_1_reg_1550_pp1_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_1_reg_1550_pp1_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_1_reg_1550_pp1_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_1_reg_1550_pp1_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_1_reg_1550_pp1_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_1_reg_1550_pp1_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_1_reg_1550_pp1_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_512_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_1_reg_1555 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_1_reg_1555_pp1_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_1_reg_1555_pp1_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_1_reg_1555_pp1_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_1_reg_1555_pp1_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_1_reg_1555_pp1_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_1_reg_1555_pp1_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_1_reg_1555_pp1_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_1_reg_1555_pp1_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_1_reg_1555_pp1_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_1_reg_1555_pp1_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_1_reg_1555_pp1_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_1_reg_1555_pp1_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_1_reg_1555_pp1_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_1_reg_1555_pp1_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_1_reg_1555_pp1_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_1_reg_1555_pp1_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_1_reg_1555_pp1_iter21_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_1_reg_1555_pp1_iter22_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_1_reg_1555_pp1_iter23_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_1_reg_1555_pp1_iter24_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_1_reg_1555_pp1_iter25_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_1_reg_1555_pp1_iter26_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_1_reg_1555_pp1_iter27_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_1_reg_1555_pp1_iter28_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_1_reg_1555_pp1_iter29_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_1_reg_1555_pp1_iter30_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_1_reg_1555_pp1_iter31_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_517_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_2_reg_1560 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_2_reg_1560_pp1_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_2_reg_1560_pp1_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_2_reg_1560_pp1_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_2_reg_1560_pp1_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_2_reg_1560_pp1_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_0_2_reg_1560_pp1_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_521_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_1565 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_1565_pp1_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_1565_pp1_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_1565_pp1_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_1565_pp1_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_1565_pp1_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_1565_pp1_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_1565_pp1_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_1565_pp1_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_1565_pp1_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_1565_pp1_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_1565_pp1_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_1565_pp1_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_1565_pp1_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_1565_pp1_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_1565_pp1_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_1565_pp1_iter21_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_1565_pp1_iter22_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_2_reg_1565_pp1_iter23_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_525_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1570 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1570_pp1_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1570_pp1_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1570_pp1_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1570_pp1_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1570_pp1_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1570_pp1_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1570_pp1_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1570_pp1_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1570_pp1_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1570_pp1_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1570_pp1_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1570_pp1_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1570_pp1_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1570_pp1_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1570_pp1_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1570_pp1_iter21_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1570_pp1_iter22_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1570_pp1_iter23_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1570_pp1_iter24_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1570_pp1_iter25_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1570_pp1_iter26_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1570_pp1_iter27_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1570_pp1_iter28_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1570_pp1_iter29_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1570_pp1_iter30_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1570_pp1_iter31_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1570_pp1_iter32_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1570_pp1_iter33_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1570_pp1_iter34_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_2_reg_1570_pp1_iter35_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_446_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_7_reg_1575 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_451_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_7_0_1_reg_1580 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_455_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_7_0_2_reg_1585 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_459_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_7_1_reg_1590 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_463_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_7_1_1_reg_1595 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_467_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_7_1_2_reg_1600 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_471_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_7_2_reg_1605 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_475_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_7_2_1_reg_1610 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_479_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_7_2_2_reg_1615 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_483_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_reg_1620 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_reg_1620_pp1_iter44_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln41_fu_1224_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal select_ln40_12_fu_1235_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state7 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter41 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter42 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter43 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter44 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter45 : STD_LOGIC := '0';
    signal num_ker_reg_303 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten109_reg_315 : STD_LOGIC_VECTOR (8 downto 0);
    signal num_channel_reg_326 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_reg_337 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_349 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_361 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln42_3_fu_956_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_window_buffer_load_2_phi_fu_385_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_window_buffer_load_1_phi_fu_406_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_window_buffer_load_0_phi_fu_427_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_fu_608_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_19_fu_771_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln83_12_fu_808_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_20_fu_819_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_21_fu_830_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_22_fu_841_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_23_fu_852_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_24_fu_863_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_25_fu_874_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_26_fu_885_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_27_fu_896_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_985_p6 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln43_fu_967_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln45_fu_1069_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_971_p6 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal shl_ln_fu_566_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_621_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln83_7_fu_633_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln83_7_fu_633_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln83_7_fu_633_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp5_fu_643_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln83_fu_655_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln83_fu_655_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln39_3_fu_687_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_36_fu_697_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln83_8_fu_709_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln83_8_fu_709_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln83_8_fu_709_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln39_9_fu_719_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln83_10_fu_715_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln83_fu_655_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln41_fu_745_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln39_fu_739_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln39_fu_679_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln40_fu_765_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_37_fu_776_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp5_mid1_fu_780_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln83_9_fu_794_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln83_9_fu_794_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln83_9_fu_794_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln39_11_fu_731_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln40_10_fu_800_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln40_19_fu_813_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln40_20_fu_824_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln40_21_fu_835_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln40_22_fu_846_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln40_23_fu_857_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln40_24_fu_868_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln40_25_fu_879_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln40_26_fu_890_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln40_fu_915_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln39_10_fu_909_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln45_6_fu_934_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_7_fu_940_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_cast_fu_952_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln45_3_fu_1053_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_fu_1047_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln45_5_fu_1058_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln45_6_fu_1064_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_1100_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal b_cast_fu_1131_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_34_fu_1146_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln69_fu_1150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln11_fu_1174_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_1177_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln11_fu_1187_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln11_3_fu_1197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_fu_1191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_fu_1203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_fu_1209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln40_27_fu_1229_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp1_stage0_00001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component CNN_CNN_dcmp_64ns_64ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component CNN_CNN_add_32ns_32ns_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CNN_CNN_add_6ns_6ns_6_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component CNN_CNN_add_10ns_10ns_10_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component CNN_CNN_add_9ns_9ns_9_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component CNN_CNN_add_4ns_4ns_4_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component CNN_CNN_add_31ns_31ns_31_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component CNN_CNN_mux_42_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (63 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component CNN_CNN_add_3ns_3ns_3_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component CNN_CNN_add_7ns_7ns_7_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component CNN_convolution_double_double_double_double_4_4_8_8_4_4_3_3_1_1_s_bias_conv4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component CNN_convolution_double_double_double_double_4_4_8_8_4_4_3_3_1_1_s_kernel_conv4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address3 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address4 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address5 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce5 : IN STD_LOGIC;
        q5 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address6 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce6 : IN STD_LOGIC;
        q6 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address7 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce7 : IN STD_LOGIC;
        q7 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address8 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce8 : IN STD_LOGIC;
        q8 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    bias_conv4_U : component CNN_convolution_double_double_double_double_4_4_8_8_4_4_3_3_1_1_s_bias_conv4
    generic map (
        DataWidth => 64,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bias_conv4_address0,
        ce0 => bias_conv4_ce0,
        q0 => bias_conv4_q0);

    kernel_conv4_U : component CNN_convolution_double_double_double_double_4_4_8_8_4_4_3_3_1_1_s_kernel_conv4
    generic map (
        DataWidth => 64,
        AddressRange => 576,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => kernel_conv4_address0,
        ce0 => kernel_conv4_ce0,
        q0 => kernel_conv4_q0,
        address1 => kernel_conv4_address1,
        ce1 => kernel_conv4_ce1,
        q1 => kernel_conv4_q1,
        address2 => kernel_conv4_address2,
        ce2 => kernel_conv4_ce2,
        q2 => kernel_conv4_q2,
        address3 => kernel_conv4_address3,
        ce3 => kernel_conv4_ce3,
        q3 => kernel_conv4_q3,
        address4 => kernel_conv4_address4,
        ce4 => kernel_conv4_ce4,
        q4 => kernel_conv4_q4,
        address5 => kernel_conv4_address5,
        ce5 => kernel_conv4_ce5,
        q5 => kernel_conv4_q5,
        address6 => kernel_conv4_address6,
        ce6 => kernel_conv4_ce6,
        q6 => kernel_conv4_q6,
        address7 => kernel_conv4_address7,
        ce7 => kernel_conv4_ce7,
        q7 => kernel_conv4_q7,
        address8 => kernel_conv4_address8,
        ce8 => kernel_conv4_ce8,
        q8 => kernel_conv4_q8);

    CNN_dadd_64ns_64ns_64_4_full_dsp_1_U161 : component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_reg_1530,
        din1 => ap_const_lv64_0,
        ce => ap_const_logic_1,
        dout => grp_fu_446_p2);

    CNN_dadd_64ns_64ns_64_4_full_dsp_1_U162 : component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_7_reg_1575,
        din1 => mul_0_1_reg_1545_pp1_iter7_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_451_p2);

    CNN_dadd_64ns_64ns_64_4_full_dsp_1_U163 : component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_7_0_1_reg_1580,
        din1 => mul_0_2_reg_1560_pp1_iter11_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_455_p2);

    CNN_dadd_64ns_64ns_64_4_full_dsp_1_U164 : component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_7_0_2_reg_1585,
        din1 => mul_1_reg_1535_pp1_iter15_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_459_p2);

    CNN_dadd_64ns_64ns_64_4_full_dsp_1_U165 : component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_7_1_reg_1590,
        din1 => mul_1_1_reg_1550_pp1_iter19_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_463_p2);

    CNN_dadd_64ns_64ns_64_4_full_dsp_1_U166 : component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_7_1_1_reg_1595,
        din1 => mul_1_2_reg_1565_pp1_iter23_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_467_p2);

    CNN_dadd_64ns_64ns_64_4_full_dsp_1_U167 : component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_7_1_2_reg_1600,
        din1 => mul_2_reg_1540_pp1_iter27_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_471_p2);

    CNN_dadd_64ns_64ns_64_4_full_dsp_1_U168 : component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_7_2_reg_1605,
        din1 => mul_2_1_reg_1555_pp1_iter31_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_475_p2);

    CNN_dadd_64ns_64ns_64_4_full_dsp_1_U169 : component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_7_2_1_reg_1610,
        din1 => mul_2_2_reg_1570_pp1_iter35_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_479_p2);

    CNN_dadd_64ns_64ns_64_4_full_dsp_1_U170 : component CNN_CNN_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_7_2_2_reg_1615,
        din1 => select_ln40_9_reg_1373,
        ce => ap_const_logic_1,
        dout => grp_fu_483_p2);

    CNN_dmul_64ns_64ns_64_4_max_dsp_1_U171 : component CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_phi_mux_window_buffer_load_0_phi_fu_427_p4,
        din1 => kernel_conv4_load_reg_1378,
        ce => ap_const_logic_1,
        dout => grp_fu_487_p2);

    CNN_dmul_64ns_64ns_64_4_max_dsp_1_U172 : component CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_phi_mux_window_buffer_load_1_phi_fu_406_p4,
        din1 => kernel_conv4_load_3_reg_1393,
        ce => ap_const_logic_1,
        dout => grp_fu_492_p2);

    CNN_dmul_64ns_64ns_64_4_max_dsp_1_U173 : component CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_phi_mux_window_buffer_load_2_phi_fu_385_p4,
        din1 => kernel_conv4_load_6_reg_1408,
        ce => ap_const_logic_1,
        dout => grp_fu_497_p2);

    CNN_dmul_64ns_64ns_64_4_max_dsp_1_U174 : component CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => window_buffer_load_5_0_reg_414,
        din1 => kernel_conv4_load_1_reg_1383,
        ce => ap_const_logic_1,
        dout => grp_fu_502_p2);

    CNN_dmul_64ns_64ns_64_4_max_dsp_1_U175 : component CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => window_buffer_load_5_1_reg_393,
        din1 => kernel_conv4_load_4_reg_1398,
        ce => ap_const_logic_1,
        dout => grp_fu_507_p2);

    CNN_dmul_64ns_64ns_64_4_max_dsp_1_U176 : component CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => window_buffer_load_5_2_reg_372,
        din1 => kernel_conv4_load_7_reg_1413,
        ce => ap_const_logic_1,
        dout => grp_fu_512_p2);

    CNN_dmul_64ns_64ns_64_4_max_dsp_1_U177 : component CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln69_reg_1512_pp1_iter1_reg,
        din1 => kernel_conv4_load_2_reg_1388,
        ce => ap_const_logic_1,
        dout => grp_fu_517_p2);

    CNN_dmul_64ns_64ns_64_4_max_dsp_1_U178 : component CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln72_reg_1518_pp1_iter1_reg,
        din1 => kernel_conv4_load_5_reg_1403,
        ce => ap_const_logic_1,
        dout => grp_fu_521_p2);

    CNN_dmul_64ns_64ns_64_4_max_dsp_1_U179 : component CNN_CNN_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln75_reg_1524_pp1_iter1_reg,
        din1 => kernel_conv4_load_8_reg_1418,
        ce => ap_const_logic_1,
        dout => grp_fu_525_p2);

    CNN_dcmp_64ns_64ns_1_2_no_dsp_1_U180 : component CNN_CNN_dcmp_64ns_64ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_reg_1620,
        din1 => ap_const_lv64_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_529_p2);

    CNN_add_32ns_32ns_32_1_1_U181 : component CNN_CNN_add_32ns_32ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => shl_ln_fu_566_p3,
        din1 => ap_const_lv32_4,
        dout => add_ln31_fu_574_p2);

    CNN_add_32ns_32ns_32_1_1_U182 : component CNN_CNN_add_32ns_32ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => shl_ln_fu_566_p3,
        din1 => ap_const_lv32_3,
        dout => sub13_fu_586_p2);

    CNN_add_32ns_32ns_32_1_1_U183 : component CNN_CNN_add_32ns_32ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => shl_ln_fu_566_p3,
        din1 => ap_const_lv32_2,
        dout => sub47_fu_592_p2);

    CNN_add_6ns_6ns_6_1_1_U184 : component CNN_CNN_add_6ns_6ns_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        dout_WIDTH => 6)
    port map (
        din0 => add_ln83_7_fu_633_p0,
        din1 => add_ln83_7_fu_633_p1,
        dout => add_ln83_7_fu_633_p2);

    CNN_add_10ns_10ns_10_1_1_U185 : component CNN_CNN_add_10ns_10ns_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => add_ln83_fu_655_p0,
        din1 => add_ln83_fu_655_p1,
        dout => add_ln83_fu_655_p2);

    CNN_add_9ns_9ns_9_1_1_U186 : component CNN_CNN_add_9ns_9ns_9_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        din0 => ap_const_lv9_1,
        din1 => indvar_flatten109_reg_315,
        dout => add_ln39_fu_667_p2);

    CNN_add_4ns_4ns_4_1_1_U187 : component CNN_CNN_add_4ns_4ns_4_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        dout_WIDTH => 4)
    port map (
        din0 => ap_const_lv4_1,
        din1 => num_channel_reg_326,
        dout => add_ln39_3_fu_687_p2);

    CNN_add_6ns_6ns_6_1_1_U188 : component CNN_CNN_add_6ns_6ns_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        dout_WIDTH => 6)
    port map (
        din0 => add_ln83_8_fu_709_p0,
        din1 => add_ln83_8_fu_709_p1,
        dout => add_ln83_8_fu_709_p2);

    CNN_add_4ns_4ns_4_1_1_U189 : component CNN_CNN_add_4ns_4ns_4_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        dout_WIDTH => 4)
    port map (
        din0 => ap_const_lv4_1,
        din1 => select_ln39_fu_679_p3,
        dout => add_ln40_fu_765_p2);

    CNN_add_10ns_10ns_10_1_1_U190 : component CNN_CNN_add_10ns_10ns_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => add_ln83_9_fu_794_p0,
        din1 => add_ln83_9_fu_794_p1,
        dout => add_ln83_9_fu_794_p2);

    CNN_add_10ns_10ns_10_1_1_U191 : component CNN_CNN_add_10ns_10ns_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => ap_const_lv10_1,
        din1 => select_ln40_10_fu_800_p3,
        dout => add_ln40_19_fu_813_p2);

    CNN_add_10ns_10ns_10_1_1_U192 : component CNN_CNN_add_10ns_10ns_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => ap_const_lv10_2,
        din1 => select_ln40_10_fu_800_p3,
        dout => add_ln40_20_fu_824_p2);

    CNN_add_10ns_10ns_10_1_1_U193 : component CNN_CNN_add_10ns_10ns_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => ap_const_lv10_3,
        din1 => select_ln40_10_fu_800_p3,
        dout => add_ln40_21_fu_835_p2);

    CNN_add_10ns_10ns_10_1_1_U194 : component CNN_CNN_add_10ns_10ns_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => ap_const_lv10_4,
        din1 => select_ln40_10_fu_800_p3,
        dout => add_ln40_22_fu_846_p2);

    CNN_add_10ns_10ns_10_1_1_U195 : component CNN_CNN_add_10ns_10ns_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => ap_const_lv10_5,
        din1 => select_ln40_10_fu_800_p3,
        dout => add_ln40_23_fu_857_p2);

    CNN_add_10ns_10ns_10_1_1_U196 : component CNN_CNN_add_10ns_10ns_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => ap_const_lv10_6,
        din1 => select_ln40_10_fu_800_p3,
        dout => add_ln40_24_fu_868_p2);

    CNN_add_10ns_10ns_10_1_1_U197 : component CNN_CNN_add_10ns_10ns_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => ap_const_lv10_7,
        din1 => select_ln40_10_fu_800_p3,
        dout => add_ln40_25_fu_879_p2);

    CNN_add_10ns_10ns_10_1_1_U198 : component CNN_CNN_add_10ns_10ns_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => ap_const_lv10_8,
        din1 => select_ln40_10_fu_800_p3,
        dout => add_ln40_26_fu_890_p2);

    CNN_add_31ns_31ns_31_1_1_U199 : component CNN_CNN_add_31ns_31ns_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        din0 => j_reg_361,
        din1 => ap_const_lv31_1,
        dout => add_ln42_fu_961_p2);

    CNN_mux_42_64_1_1_U200 : component CNN_CNN_mux_42_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 2,
        dout_WIDTH => 64)
    port map (
        din0 => line_buffer_1_10_0,
        din1 => line_buffer_1_10_1,
        din2 => line_buffer_1_10_2,
        din3 => line_buffer_1_10_3,
        din4 => trunc_ln43_fu_967_p1,
        dout => tmp_7_fu_971_p6);

    CNN_mux_42_64_1_1_U201 : component CNN_CNN_mux_42_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 2,
        dout_WIDTH => 64)
    port map (
        din0 => line_buffer_2_10_0,
        din1 => line_buffer_2_10_1,
        din2 => line_buffer_2_10_2,
        din3 => line_buffer_2_10_3,
        din4 => trunc_ln43_fu_967_p1,
        dout => tmp_8_fu_985_p6);

    CNN_add_31ns_31ns_31_1_1_U202 : component CNN_CNN_add_31ns_31ns_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        din0 => b_reg_435,
        din1 => ap_const_lv31_1,
        dout => add_ln64_fu_1140_p2);

    CNN_add_3ns_3ns_3_1_1_U203 : component CNN_CNN_add_3ns_3ns_3_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 3,
        dout_WIDTH => 3)
    port map (
        din0 => select_ln40_reg_1367,
        din1 => ap_const_lv3_1,
        dout => add_ln41_fu_1224_p2);

    CNN_add_7ns_7ns_7_1_1_U204 : component CNN_CNN_add_7ns_7ns_7_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 7,
        dout_WIDTH => 7)
    port map (
        din0 => indvar_flatten_reg_337,
        din1 => ap_const_lv7_1,
        dout => add_ln40_27_fu_1229_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln52_fu_1109_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (cmp4827_reg_1261 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state7);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter11 <= ap_enable_reg_pp1_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter12 <= ap_enable_reg_pp1_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter13 <= ap_enable_reg_pp1_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter14 <= ap_enable_reg_pp1_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter15 <= ap_enable_reg_pp1_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter16 <= ap_enable_reg_pp1_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter17 <= ap_enable_reg_pp1_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter18 <= ap_enable_reg_pp1_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter19 <= ap_enable_reg_pp1_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter20 <= ap_enable_reg_pp1_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter21 <= ap_enable_reg_pp1_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter22 <= ap_enable_reg_pp1_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter23 <= ap_enable_reg_pp1_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter24 <= ap_enable_reg_pp1_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter25 <= ap_enable_reg_pp1_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter26 <= ap_enable_reg_pp1_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter27 <= ap_enable_reg_pp1_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter28 <= ap_enable_reg_pp1_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter29 <= ap_enable_reg_pp1_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter30 <= ap_enable_reg_pp1_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter31 <= ap_enable_reg_pp1_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter32 <= ap_enable_reg_pp1_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter33 <= ap_enable_reg_pp1_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter34 <= ap_enable_reg_pp1_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter35 <= ap_enable_reg_pp1_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter36 <= ap_enable_reg_pp1_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter37 <= ap_enable_reg_pp1_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter38 <= ap_enable_reg_pp1_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter39 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter39 <= ap_enable_reg_pp1_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter40 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter40 <= ap_enable_reg_pp1_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter41 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter41 <= ap_enable_reg_pp1_iter40;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter42 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter42 <= ap_enable_reg_pp1_iter41;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter43 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter43 <= ap_enable_reg_pp1_iter42;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter44_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter44 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter44 <= ap_enable_reg_pp1_iter43;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter45_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter45 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter45 <= ap_enable_reg_pp1_iter44;
                elsif (((icmp_ln52_fu_1109_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (cmp4827_reg_1261 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp1_iter45 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
                end if; 
            end if;
        end if;
    end process;


    b_reg_435_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_fu_1109_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (cmp4827_reg_1261 = ap_const_lv1_1))) then 
                b_reg_435 <= ap_const_lv31_0;
            elsif (((icmp_ln64_fu_1135_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                b_reg_435 <= add_ln64_fu_1140_p2;
            end if; 
        end if;
    end process;

    i_reg_349_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
                i_reg_349 <= add_ln41_fu_1224_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_349 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    indvar_flatten109_reg_315_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
                indvar_flatten109_reg_315 <= add_ln39_reg_1289;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten109_reg_315 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_337_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
                indvar_flatten_reg_337 <= select_ln40_12_fu_1235_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_337 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_reg_361_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln42_reg_1247 = ap_const_lv1_1))) then 
                j_reg_361 <= ap_const_lv31_0;
            elsif (((icmp_ln42_3_fu_956_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                j_reg_361 <= add_ln42_fu_961_p2;
            end if; 
        end if;
    end process;

    num_channel_reg_326_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
                num_channel_reg_326 <= select_ln39_12_reg_1307;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                num_channel_reg_326 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    num_ker_reg_303_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
                num_ker_reg_303 <= select_ln40_11_reg_1362;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                num_ker_reg_303 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    window_buffer_load_0_reg_424_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_fu_1109_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (cmp4827_reg_1261 = ap_const_lv1_1))) then 
                window_buffer_load_0_reg_424 <= line_buffer_0_10_0;
            elsif (((icmp_ln64_reg_1503 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                window_buffer_load_0_reg_424 <= window_buffer_load_5_0_reg_414;
            end if; 
        end if;
    end process;

    window_buffer_load_1_reg_403_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_fu_1109_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (cmp4827_reg_1261 = ap_const_lv1_1))) then 
                window_buffer_load_1_reg_403 <= line_buffer_1_10_0;
            elsif (((icmp_ln64_reg_1503 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                window_buffer_load_1_reg_403 <= window_buffer_load_5_1_reg_393;
            end if; 
        end if;
    end process;

    window_buffer_load_2_reg_382_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_fu_1109_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (cmp4827_reg_1261 = ap_const_lv1_1))) then 
                window_buffer_load_2_reg_382 <= line_buffer_2_10_0;
            elsif (((icmp_ln64_reg_1503 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                window_buffer_load_2_reg_382 <= window_buffer_load_5_2_reg_372;
            end if; 
        end if;
    end process;

    window_buffer_load_5_0_reg_414_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_fu_1109_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (cmp4827_reg_1261 = ap_const_lv1_1))) then 
                window_buffer_load_5_0_reg_414 <= line_buffer_0_10_1;
            elsif (((icmp_ln64_reg_1503 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                window_buffer_load_5_0_reg_414 <= select_ln69_reg_1512;
            end if; 
        end if;
    end process;

    window_buffer_load_5_1_reg_393_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_fu_1109_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (cmp4827_reg_1261 = ap_const_lv1_1))) then 
                window_buffer_load_5_1_reg_393 <= line_buffer_1_10_1;
            elsif (((icmp_ln64_reg_1503 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                window_buffer_load_5_1_reg_393 <= select_ln72_reg_1518;
            end if; 
        end if;
    end process;

    window_buffer_load_5_2_reg_372_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_fu_1109_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (cmp4827_reg_1261 = ap_const_lv1_1))) then 
                window_buffer_load_5_2_reg_372 <= line_buffer_2_10_1;
            elsif (((icmp_ln64_reg_1503 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                window_buffer_load_5_2_reg_372 <= select_ln75_reg_1524;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                add_ln31_reg_1242 <= add_ln31_fu_574_p2;
                bitcast_ln49_reg_1265 <= bitcast_ln49_fu_604_p1;
                cmp4827_reg_1261 <= cmp4827_fu_598_p2;
                icmp_ln42_reg_1247 <= icmp_ln42_fu_580_p2;
                sub13_reg_1251 <= sub13_fu_586_p2;
                sub47_reg_1256 <= sub47_fu_592_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln39_reg_1289 <= add_ln39_fu_667_p2;
                bias_conv4_load_reg_1281 <= bias_conv4_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln39_fu_661_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                and_ln39_reg_1301 <= and_ln39_fu_751_p2;
                icmp_ln40_reg_1294 <= icmp_ln40_fu_673_p2;
                select_ln39_12_reg_1307 <= select_ln39_12_fu_757_p3;
                select_ln40_11_reg_1362 <= select_ln40_11_fu_901_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                empty_31_reg_1270 <= empty_31_fu_613_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln64_reg_1503 <= icmp_ln64_fu_1135_p2;
                icmp_ln64_reg_1503_pp1_iter1_reg <= icmp_ln64_reg_1503;
                select_ln69_reg_1512_pp1_iter1_reg <= select_ln69_reg_1512;
                select_ln72_reg_1518_pp1_iter1_reg <= select_ln72_reg_1518;
                select_ln75_reg_1524_pp1_iter1_reg <= select_ln75_reg_1524;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                icmp_ln64_reg_1503_pp1_iter10_reg <= icmp_ln64_reg_1503_pp1_iter9_reg;
                icmp_ln64_reg_1503_pp1_iter11_reg <= icmp_ln64_reg_1503_pp1_iter10_reg;
                icmp_ln64_reg_1503_pp1_iter12_reg <= icmp_ln64_reg_1503_pp1_iter11_reg;
                icmp_ln64_reg_1503_pp1_iter13_reg <= icmp_ln64_reg_1503_pp1_iter12_reg;
                icmp_ln64_reg_1503_pp1_iter14_reg <= icmp_ln64_reg_1503_pp1_iter13_reg;
                icmp_ln64_reg_1503_pp1_iter15_reg <= icmp_ln64_reg_1503_pp1_iter14_reg;
                icmp_ln64_reg_1503_pp1_iter16_reg <= icmp_ln64_reg_1503_pp1_iter15_reg;
                icmp_ln64_reg_1503_pp1_iter17_reg <= icmp_ln64_reg_1503_pp1_iter16_reg;
                icmp_ln64_reg_1503_pp1_iter18_reg <= icmp_ln64_reg_1503_pp1_iter17_reg;
                icmp_ln64_reg_1503_pp1_iter19_reg <= icmp_ln64_reg_1503_pp1_iter18_reg;
                icmp_ln64_reg_1503_pp1_iter20_reg <= icmp_ln64_reg_1503_pp1_iter19_reg;
                icmp_ln64_reg_1503_pp1_iter21_reg <= icmp_ln64_reg_1503_pp1_iter20_reg;
                icmp_ln64_reg_1503_pp1_iter22_reg <= icmp_ln64_reg_1503_pp1_iter21_reg;
                icmp_ln64_reg_1503_pp1_iter23_reg <= icmp_ln64_reg_1503_pp1_iter22_reg;
                icmp_ln64_reg_1503_pp1_iter24_reg <= icmp_ln64_reg_1503_pp1_iter23_reg;
                icmp_ln64_reg_1503_pp1_iter25_reg <= icmp_ln64_reg_1503_pp1_iter24_reg;
                icmp_ln64_reg_1503_pp1_iter26_reg <= icmp_ln64_reg_1503_pp1_iter25_reg;
                icmp_ln64_reg_1503_pp1_iter27_reg <= icmp_ln64_reg_1503_pp1_iter26_reg;
                icmp_ln64_reg_1503_pp1_iter28_reg <= icmp_ln64_reg_1503_pp1_iter27_reg;
                icmp_ln64_reg_1503_pp1_iter29_reg <= icmp_ln64_reg_1503_pp1_iter28_reg;
                icmp_ln64_reg_1503_pp1_iter2_reg <= icmp_ln64_reg_1503_pp1_iter1_reg;
                icmp_ln64_reg_1503_pp1_iter30_reg <= icmp_ln64_reg_1503_pp1_iter29_reg;
                icmp_ln64_reg_1503_pp1_iter31_reg <= icmp_ln64_reg_1503_pp1_iter30_reg;
                icmp_ln64_reg_1503_pp1_iter32_reg <= icmp_ln64_reg_1503_pp1_iter31_reg;
                icmp_ln64_reg_1503_pp1_iter33_reg <= icmp_ln64_reg_1503_pp1_iter32_reg;
                icmp_ln64_reg_1503_pp1_iter34_reg <= icmp_ln64_reg_1503_pp1_iter33_reg;
                icmp_ln64_reg_1503_pp1_iter35_reg <= icmp_ln64_reg_1503_pp1_iter34_reg;
                icmp_ln64_reg_1503_pp1_iter36_reg <= icmp_ln64_reg_1503_pp1_iter35_reg;
                icmp_ln64_reg_1503_pp1_iter37_reg <= icmp_ln64_reg_1503_pp1_iter36_reg;
                icmp_ln64_reg_1503_pp1_iter38_reg <= icmp_ln64_reg_1503_pp1_iter37_reg;
                icmp_ln64_reg_1503_pp1_iter39_reg <= icmp_ln64_reg_1503_pp1_iter38_reg;
                icmp_ln64_reg_1503_pp1_iter3_reg <= icmp_ln64_reg_1503_pp1_iter2_reg;
                icmp_ln64_reg_1503_pp1_iter40_reg <= icmp_ln64_reg_1503_pp1_iter39_reg;
                icmp_ln64_reg_1503_pp1_iter41_reg <= icmp_ln64_reg_1503_pp1_iter40_reg;
                icmp_ln64_reg_1503_pp1_iter42_reg <= icmp_ln64_reg_1503_pp1_iter41_reg;
                icmp_ln64_reg_1503_pp1_iter43_reg <= icmp_ln64_reg_1503_pp1_iter42_reg;
                icmp_ln64_reg_1503_pp1_iter44_reg <= icmp_ln64_reg_1503_pp1_iter43_reg;
                icmp_ln64_reg_1503_pp1_iter4_reg <= icmp_ln64_reg_1503_pp1_iter3_reg;
                icmp_ln64_reg_1503_pp1_iter5_reg <= icmp_ln64_reg_1503_pp1_iter4_reg;
                icmp_ln64_reg_1503_pp1_iter6_reg <= icmp_ln64_reg_1503_pp1_iter5_reg;
                icmp_ln64_reg_1503_pp1_iter7_reg <= icmp_ln64_reg_1503_pp1_iter6_reg;
                icmp_ln64_reg_1503_pp1_iter8_reg <= icmp_ln64_reg_1503_pp1_iter7_reg;
                icmp_ln64_reg_1503_pp1_iter9_reg <= icmp_ln64_reg_1503_pp1_iter8_reg;
                mul_0_1_reg_1545_pp1_iter5_reg <= mul_0_1_reg_1545;
                mul_0_1_reg_1545_pp1_iter6_reg <= mul_0_1_reg_1545_pp1_iter5_reg;
                mul_0_1_reg_1545_pp1_iter7_reg <= mul_0_1_reg_1545_pp1_iter6_reg;
                mul_0_2_reg_1560_pp1_iter10_reg <= mul_0_2_reg_1560_pp1_iter9_reg;
                mul_0_2_reg_1560_pp1_iter11_reg <= mul_0_2_reg_1560_pp1_iter10_reg;
                mul_0_2_reg_1560_pp1_iter6_reg <= mul_0_2_reg_1560;
                mul_0_2_reg_1560_pp1_iter7_reg <= mul_0_2_reg_1560_pp1_iter6_reg;
                mul_0_2_reg_1560_pp1_iter8_reg <= mul_0_2_reg_1560_pp1_iter7_reg;
                mul_0_2_reg_1560_pp1_iter9_reg <= mul_0_2_reg_1560_pp1_iter8_reg;
                mul_1_1_reg_1550_pp1_iter10_reg <= mul_1_1_reg_1550_pp1_iter9_reg;
                mul_1_1_reg_1550_pp1_iter11_reg <= mul_1_1_reg_1550_pp1_iter10_reg;
                mul_1_1_reg_1550_pp1_iter12_reg <= mul_1_1_reg_1550_pp1_iter11_reg;
                mul_1_1_reg_1550_pp1_iter13_reg <= mul_1_1_reg_1550_pp1_iter12_reg;
                mul_1_1_reg_1550_pp1_iter14_reg <= mul_1_1_reg_1550_pp1_iter13_reg;
                mul_1_1_reg_1550_pp1_iter15_reg <= mul_1_1_reg_1550_pp1_iter14_reg;
                mul_1_1_reg_1550_pp1_iter16_reg <= mul_1_1_reg_1550_pp1_iter15_reg;
                mul_1_1_reg_1550_pp1_iter17_reg <= mul_1_1_reg_1550_pp1_iter16_reg;
                mul_1_1_reg_1550_pp1_iter18_reg <= mul_1_1_reg_1550_pp1_iter17_reg;
                mul_1_1_reg_1550_pp1_iter19_reg <= mul_1_1_reg_1550_pp1_iter18_reg;
                mul_1_1_reg_1550_pp1_iter5_reg <= mul_1_1_reg_1550;
                mul_1_1_reg_1550_pp1_iter6_reg <= mul_1_1_reg_1550_pp1_iter5_reg;
                mul_1_1_reg_1550_pp1_iter7_reg <= mul_1_1_reg_1550_pp1_iter6_reg;
                mul_1_1_reg_1550_pp1_iter8_reg <= mul_1_1_reg_1550_pp1_iter7_reg;
                mul_1_1_reg_1550_pp1_iter9_reg <= mul_1_1_reg_1550_pp1_iter8_reg;
                mul_1_2_reg_1565_pp1_iter10_reg <= mul_1_2_reg_1565_pp1_iter9_reg;
                mul_1_2_reg_1565_pp1_iter11_reg <= mul_1_2_reg_1565_pp1_iter10_reg;
                mul_1_2_reg_1565_pp1_iter12_reg <= mul_1_2_reg_1565_pp1_iter11_reg;
                mul_1_2_reg_1565_pp1_iter13_reg <= mul_1_2_reg_1565_pp1_iter12_reg;
                mul_1_2_reg_1565_pp1_iter14_reg <= mul_1_2_reg_1565_pp1_iter13_reg;
                mul_1_2_reg_1565_pp1_iter15_reg <= mul_1_2_reg_1565_pp1_iter14_reg;
                mul_1_2_reg_1565_pp1_iter16_reg <= mul_1_2_reg_1565_pp1_iter15_reg;
                mul_1_2_reg_1565_pp1_iter17_reg <= mul_1_2_reg_1565_pp1_iter16_reg;
                mul_1_2_reg_1565_pp1_iter18_reg <= mul_1_2_reg_1565_pp1_iter17_reg;
                mul_1_2_reg_1565_pp1_iter19_reg <= mul_1_2_reg_1565_pp1_iter18_reg;
                mul_1_2_reg_1565_pp1_iter20_reg <= mul_1_2_reg_1565_pp1_iter19_reg;
                mul_1_2_reg_1565_pp1_iter21_reg <= mul_1_2_reg_1565_pp1_iter20_reg;
                mul_1_2_reg_1565_pp1_iter22_reg <= mul_1_2_reg_1565_pp1_iter21_reg;
                mul_1_2_reg_1565_pp1_iter23_reg <= mul_1_2_reg_1565_pp1_iter22_reg;
                mul_1_2_reg_1565_pp1_iter6_reg <= mul_1_2_reg_1565;
                mul_1_2_reg_1565_pp1_iter7_reg <= mul_1_2_reg_1565_pp1_iter6_reg;
                mul_1_2_reg_1565_pp1_iter8_reg <= mul_1_2_reg_1565_pp1_iter7_reg;
                mul_1_2_reg_1565_pp1_iter9_reg <= mul_1_2_reg_1565_pp1_iter8_reg;
                mul_1_reg_1535_pp1_iter10_reg <= mul_1_reg_1535_pp1_iter9_reg;
                mul_1_reg_1535_pp1_iter11_reg <= mul_1_reg_1535_pp1_iter10_reg;
                mul_1_reg_1535_pp1_iter12_reg <= mul_1_reg_1535_pp1_iter11_reg;
                mul_1_reg_1535_pp1_iter13_reg <= mul_1_reg_1535_pp1_iter12_reg;
                mul_1_reg_1535_pp1_iter14_reg <= mul_1_reg_1535_pp1_iter13_reg;
                mul_1_reg_1535_pp1_iter15_reg <= mul_1_reg_1535_pp1_iter14_reg;
                mul_1_reg_1535_pp1_iter4_reg <= mul_1_reg_1535;
                mul_1_reg_1535_pp1_iter5_reg <= mul_1_reg_1535_pp1_iter4_reg;
                mul_1_reg_1535_pp1_iter6_reg <= mul_1_reg_1535_pp1_iter5_reg;
                mul_1_reg_1535_pp1_iter7_reg <= mul_1_reg_1535_pp1_iter6_reg;
                mul_1_reg_1535_pp1_iter8_reg <= mul_1_reg_1535_pp1_iter7_reg;
                mul_1_reg_1535_pp1_iter9_reg <= mul_1_reg_1535_pp1_iter8_reg;
                mul_2_1_reg_1555_pp1_iter10_reg <= mul_2_1_reg_1555_pp1_iter9_reg;
                mul_2_1_reg_1555_pp1_iter11_reg <= mul_2_1_reg_1555_pp1_iter10_reg;
                mul_2_1_reg_1555_pp1_iter12_reg <= mul_2_1_reg_1555_pp1_iter11_reg;
                mul_2_1_reg_1555_pp1_iter13_reg <= mul_2_1_reg_1555_pp1_iter12_reg;
                mul_2_1_reg_1555_pp1_iter14_reg <= mul_2_1_reg_1555_pp1_iter13_reg;
                mul_2_1_reg_1555_pp1_iter15_reg <= mul_2_1_reg_1555_pp1_iter14_reg;
                mul_2_1_reg_1555_pp1_iter16_reg <= mul_2_1_reg_1555_pp1_iter15_reg;
                mul_2_1_reg_1555_pp1_iter17_reg <= mul_2_1_reg_1555_pp1_iter16_reg;
                mul_2_1_reg_1555_pp1_iter18_reg <= mul_2_1_reg_1555_pp1_iter17_reg;
                mul_2_1_reg_1555_pp1_iter19_reg <= mul_2_1_reg_1555_pp1_iter18_reg;
                mul_2_1_reg_1555_pp1_iter20_reg <= mul_2_1_reg_1555_pp1_iter19_reg;
                mul_2_1_reg_1555_pp1_iter21_reg <= mul_2_1_reg_1555_pp1_iter20_reg;
                mul_2_1_reg_1555_pp1_iter22_reg <= mul_2_1_reg_1555_pp1_iter21_reg;
                mul_2_1_reg_1555_pp1_iter23_reg <= mul_2_1_reg_1555_pp1_iter22_reg;
                mul_2_1_reg_1555_pp1_iter24_reg <= mul_2_1_reg_1555_pp1_iter23_reg;
                mul_2_1_reg_1555_pp1_iter25_reg <= mul_2_1_reg_1555_pp1_iter24_reg;
                mul_2_1_reg_1555_pp1_iter26_reg <= mul_2_1_reg_1555_pp1_iter25_reg;
                mul_2_1_reg_1555_pp1_iter27_reg <= mul_2_1_reg_1555_pp1_iter26_reg;
                mul_2_1_reg_1555_pp1_iter28_reg <= mul_2_1_reg_1555_pp1_iter27_reg;
                mul_2_1_reg_1555_pp1_iter29_reg <= mul_2_1_reg_1555_pp1_iter28_reg;
                mul_2_1_reg_1555_pp1_iter30_reg <= mul_2_1_reg_1555_pp1_iter29_reg;
                mul_2_1_reg_1555_pp1_iter31_reg <= mul_2_1_reg_1555_pp1_iter30_reg;
                mul_2_1_reg_1555_pp1_iter5_reg <= mul_2_1_reg_1555;
                mul_2_1_reg_1555_pp1_iter6_reg <= mul_2_1_reg_1555_pp1_iter5_reg;
                mul_2_1_reg_1555_pp1_iter7_reg <= mul_2_1_reg_1555_pp1_iter6_reg;
                mul_2_1_reg_1555_pp1_iter8_reg <= mul_2_1_reg_1555_pp1_iter7_reg;
                mul_2_1_reg_1555_pp1_iter9_reg <= mul_2_1_reg_1555_pp1_iter8_reg;
                mul_2_2_reg_1570_pp1_iter10_reg <= mul_2_2_reg_1570_pp1_iter9_reg;
                mul_2_2_reg_1570_pp1_iter11_reg <= mul_2_2_reg_1570_pp1_iter10_reg;
                mul_2_2_reg_1570_pp1_iter12_reg <= mul_2_2_reg_1570_pp1_iter11_reg;
                mul_2_2_reg_1570_pp1_iter13_reg <= mul_2_2_reg_1570_pp1_iter12_reg;
                mul_2_2_reg_1570_pp1_iter14_reg <= mul_2_2_reg_1570_pp1_iter13_reg;
                mul_2_2_reg_1570_pp1_iter15_reg <= mul_2_2_reg_1570_pp1_iter14_reg;
                mul_2_2_reg_1570_pp1_iter16_reg <= mul_2_2_reg_1570_pp1_iter15_reg;
                mul_2_2_reg_1570_pp1_iter17_reg <= mul_2_2_reg_1570_pp1_iter16_reg;
                mul_2_2_reg_1570_pp1_iter18_reg <= mul_2_2_reg_1570_pp1_iter17_reg;
                mul_2_2_reg_1570_pp1_iter19_reg <= mul_2_2_reg_1570_pp1_iter18_reg;
                mul_2_2_reg_1570_pp1_iter20_reg <= mul_2_2_reg_1570_pp1_iter19_reg;
                mul_2_2_reg_1570_pp1_iter21_reg <= mul_2_2_reg_1570_pp1_iter20_reg;
                mul_2_2_reg_1570_pp1_iter22_reg <= mul_2_2_reg_1570_pp1_iter21_reg;
                mul_2_2_reg_1570_pp1_iter23_reg <= mul_2_2_reg_1570_pp1_iter22_reg;
                mul_2_2_reg_1570_pp1_iter24_reg <= mul_2_2_reg_1570_pp1_iter23_reg;
                mul_2_2_reg_1570_pp1_iter25_reg <= mul_2_2_reg_1570_pp1_iter24_reg;
                mul_2_2_reg_1570_pp1_iter26_reg <= mul_2_2_reg_1570_pp1_iter25_reg;
                mul_2_2_reg_1570_pp1_iter27_reg <= mul_2_2_reg_1570_pp1_iter26_reg;
                mul_2_2_reg_1570_pp1_iter28_reg <= mul_2_2_reg_1570_pp1_iter27_reg;
                mul_2_2_reg_1570_pp1_iter29_reg <= mul_2_2_reg_1570_pp1_iter28_reg;
                mul_2_2_reg_1570_pp1_iter30_reg <= mul_2_2_reg_1570_pp1_iter29_reg;
                mul_2_2_reg_1570_pp1_iter31_reg <= mul_2_2_reg_1570_pp1_iter30_reg;
                mul_2_2_reg_1570_pp1_iter32_reg <= mul_2_2_reg_1570_pp1_iter31_reg;
                mul_2_2_reg_1570_pp1_iter33_reg <= mul_2_2_reg_1570_pp1_iter32_reg;
                mul_2_2_reg_1570_pp1_iter34_reg <= mul_2_2_reg_1570_pp1_iter33_reg;
                mul_2_2_reg_1570_pp1_iter35_reg <= mul_2_2_reg_1570_pp1_iter34_reg;
                mul_2_2_reg_1570_pp1_iter6_reg <= mul_2_2_reg_1570;
                mul_2_2_reg_1570_pp1_iter7_reg <= mul_2_2_reg_1570_pp1_iter6_reg;
                mul_2_2_reg_1570_pp1_iter8_reg <= mul_2_2_reg_1570_pp1_iter7_reg;
                mul_2_2_reg_1570_pp1_iter9_reg <= mul_2_2_reg_1570_pp1_iter8_reg;
                mul_2_reg_1540_pp1_iter10_reg <= mul_2_reg_1540_pp1_iter9_reg;
                mul_2_reg_1540_pp1_iter11_reg <= mul_2_reg_1540_pp1_iter10_reg;
                mul_2_reg_1540_pp1_iter12_reg <= mul_2_reg_1540_pp1_iter11_reg;
                mul_2_reg_1540_pp1_iter13_reg <= mul_2_reg_1540_pp1_iter12_reg;
                mul_2_reg_1540_pp1_iter14_reg <= mul_2_reg_1540_pp1_iter13_reg;
                mul_2_reg_1540_pp1_iter15_reg <= mul_2_reg_1540_pp1_iter14_reg;
                mul_2_reg_1540_pp1_iter16_reg <= mul_2_reg_1540_pp1_iter15_reg;
                mul_2_reg_1540_pp1_iter17_reg <= mul_2_reg_1540_pp1_iter16_reg;
                mul_2_reg_1540_pp1_iter18_reg <= mul_2_reg_1540_pp1_iter17_reg;
                mul_2_reg_1540_pp1_iter19_reg <= mul_2_reg_1540_pp1_iter18_reg;
                mul_2_reg_1540_pp1_iter20_reg <= mul_2_reg_1540_pp1_iter19_reg;
                mul_2_reg_1540_pp1_iter21_reg <= mul_2_reg_1540_pp1_iter20_reg;
                mul_2_reg_1540_pp1_iter22_reg <= mul_2_reg_1540_pp1_iter21_reg;
                mul_2_reg_1540_pp1_iter23_reg <= mul_2_reg_1540_pp1_iter22_reg;
                mul_2_reg_1540_pp1_iter24_reg <= mul_2_reg_1540_pp1_iter23_reg;
                mul_2_reg_1540_pp1_iter25_reg <= mul_2_reg_1540_pp1_iter24_reg;
                mul_2_reg_1540_pp1_iter26_reg <= mul_2_reg_1540_pp1_iter25_reg;
                mul_2_reg_1540_pp1_iter27_reg <= mul_2_reg_1540_pp1_iter26_reg;
                mul_2_reg_1540_pp1_iter4_reg <= mul_2_reg_1540;
                mul_2_reg_1540_pp1_iter5_reg <= mul_2_reg_1540_pp1_iter4_reg;
                mul_2_reg_1540_pp1_iter6_reg <= mul_2_reg_1540_pp1_iter5_reg;
                mul_2_reg_1540_pp1_iter7_reg <= mul_2_reg_1540_pp1_iter6_reg;
                mul_2_reg_1540_pp1_iter8_reg <= mul_2_reg_1540_pp1_iter7_reg;
                mul_2_reg_1540_pp1_iter9_reg <= mul_2_reg_1540_pp1_iter8_reg;
                sum_reg_1620_pp1_iter44_reg <= sum_reg_1620;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                kernel_conv4_load_1_reg_1383 <= kernel_conv4_q1;
                kernel_conv4_load_2_reg_1388 <= kernel_conv4_q2;
                kernel_conv4_load_3_reg_1393 <= kernel_conv4_q3;
                kernel_conv4_load_4_reg_1398 <= kernel_conv4_q4;
                kernel_conv4_load_5_reg_1403 <= kernel_conv4_q5;
                kernel_conv4_load_6_reg_1408 <= kernel_conv4_q6;
                kernel_conv4_load_7_reg_1413 <= kernel_conv4_q7;
                kernel_conv4_load_8_reg_1418 <= kernel_conv4_q8;
                kernel_conv4_load_reg_1378 <= kernel_conv4_q0;
                select_ln40_9_reg_1373 <= select_ln40_9_fu_927_p3;
                select_ln40_reg_1367 <= select_ln40_fu_919_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln43_fu_967_p1 = ap_const_lv2_0) and (icmp_ln42_3_fu_956_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                line_buffer_0_10_0 <= tmp_7_fu_971_p6;
                line_buffer_1_10_0 <= tmp_8_fu_985_p6;
                line_buffer_2_10_0 <= select_ln45_fu_1069_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln43_fu_967_p1 = ap_const_lv2_1) and (icmp_ln42_3_fu_956_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                line_buffer_0_10_1 <= tmp_7_fu_971_p6;
                line_buffer_1_10_1 <= tmp_8_fu_985_p6;
                line_buffer_2_10_1 <= select_ln45_fu_1069_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln43_fu_967_p1 = ap_const_lv2_2) and (icmp_ln42_3_fu_956_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                line_buffer_0_10_2 <= tmp_7_fu_971_p6;
                line_buffer_1_10_2 <= tmp_8_fu_985_p6;
                line_buffer_2_10_2 <= select_ln45_fu_1069_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_fu_1109_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (cmp4827_reg_1261 = ap_const_lv1_1))) then
                line_buffer_0_10_2_load_reg_1473 <= line_buffer_0_10_2;
                line_buffer_0_10_3_load_reg_1478 <= line_buffer_0_10_3;
                line_buffer_1_10_2_load_reg_1483 <= line_buffer_1_10_2;
                line_buffer_1_10_3_load_reg_1488 <= line_buffer_1_10_3;
                line_buffer_2_10_2_load_reg_1493 <= line_buffer_2_10_2;
                line_buffer_2_10_3_load_reg_1498 <= line_buffer_2_10_3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln43_fu_967_p1 = ap_const_lv2_3) and (icmp_ln42_3_fu_956_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                line_buffer_0_10_3 <= tmp_7_fu_971_p6;
                line_buffer_1_10_3 <= tmp_8_fu_985_p6;
                line_buffer_2_10_3 <= select_ln45_fu_1069_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1503_pp1_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                mul_0_1_reg_1545 <= grp_fu_502_p2;
                mul_1_1_reg_1550 <= grp_fu_507_p2;
                mul_2_1_reg_1555 <= grp_fu_512_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1503_pp1_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                mul_0_2_reg_1560 <= grp_fu_517_p2;
                mul_1_2_reg_1565 <= grp_fu_521_p2;
                mul_2_2_reg_1570 <= grp_fu_525_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1503_pp1_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                mul_1_reg_1535 <= grp_fu_492_p2;
                mul_2_reg_1540 <= grp_fu_497_p2;
                mul_reg_1530 <= grp_fu_487_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln42_reg_1247 = ap_const_lv1_1))) then
                or_ln45_reg_1423 <= or_ln45_fu_946_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_fu_1135_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                select_ln69_reg_1512 <= select_ln69_fu_1156_p3;
                select_ln72_reg_1518 <= select_ln72_fu_1162_p3;
                select_ln75_reg_1524 <= select_ln75_fu_1168_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1503_pp1_iter10_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                sum_7_0_1_reg_1580 <= grp_fu_451_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1503_pp1_iter14_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                sum_7_0_2_reg_1585 <= grp_fu_455_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1503_pp1_iter22_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                sum_7_1_1_reg_1595 <= grp_fu_463_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1503_pp1_iter26_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                sum_7_1_2_reg_1600 <= grp_fu_467_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1503_pp1_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                sum_7_1_reg_1590 <= grp_fu_459_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1503_pp1_iter34_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                sum_7_2_1_reg_1610 <= grp_fu_475_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1503_pp1_iter38_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                sum_7_2_2_reg_1615 <= grp_fu_479_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1503_pp1_iter30_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                sum_7_2_reg_1605 <= grp_fu_471_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1503_pp1_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                sum_7_reg_1575 <= grp_fu_446_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1503_pp1_iter42_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                sum_reg_1620 <= grp_fu_483_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln42_reg_1247, cmp4827_reg_1261, ap_CS_fsm_state3, icmp_ln39_fu_661_p2, ap_CS_fsm_state4, ap_CS_fsm_state5, icmp_ln52_fu_1109_p2, ap_CS_fsm_state6, icmp_ln64_fu_1135_p2, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter44, ap_enable_reg_pp1_iter45, icmp_ln42_3_fu_956_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln39_fu_661_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln42_reg_1247 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln42_3_fu_956_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln52_fu_1109_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (cmp4827_reg_1261 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln64_fu_1135_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp1_iter44 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter45 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter44 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter45 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln64_fu_1135_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln83_7_fu_633_p0 <= (empty_fu_621_p1 & ap_const_lv3_0);
    add_ln83_7_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(num_channel_reg_326),6));
    add_ln83_8_fu_709_p0 <= (empty_36_fu_697_p1 & ap_const_lv3_0);
    add_ln83_8_fu_709_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln39_3_fu_687_p2),6));
    add_ln83_9_fu_794_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_mid1_fu_780_p4),10));
    add_ln83_9_fu_794_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln39_9_fu_719_p3),10));
    add_ln83_fu_655_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_fu_643_p4),10));
    add_ln83_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln83_7_fu_633_p2),10));
    and_ln11_fu_1209_p2 <= (or_ln11_fu_1203_p2 and grp_fu_529_p2);
    and_ln39_fu_751_p2 <= (xor_ln39_fu_739_p2 and icmp_ln41_fu_745_p2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state53 <= ap_CS_fsm(7);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp1_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp1_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp1_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp1_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp1_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp1_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp1_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp1_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp1_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp1_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp1_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp1_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp1_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp1_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp1_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp1_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp1_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp1_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp1_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp1_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp1_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp1_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp1_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp1_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp1_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp1_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp1_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp1_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp1_stage0_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp1_stage0_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp1_stage0_iter36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp1_stage0_iter37 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp1_stage0_iter38 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp1_stage0_iter39 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp1_stage0_iter40 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp1_stage0_iter41 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp1_stage0_iter42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp1_stage0_iter43 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp1_stage0_iter44 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp1_stage0_iter45 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp1_exit_iter0_state7_assign_proc : process(icmp_ln64_fu_1135_p2)
    begin
        if ((icmp_ln64_fu_1135_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln39_fu_661_p2)
    begin
        if ((((icmp_ln39_fu_661_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter5, ap_enable_reg_pp1_iter6, ap_enable_reg_pp1_iter7, ap_enable_reg_pp1_iter8, ap_enable_reg_pp1_iter9, ap_enable_reg_pp1_iter10, ap_enable_reg_pp1_iter11, ap_enable_reg_pp1_iter12, ap_enable_reg_pp1_iter13, ap_enable_reg_pp1_iter14, ap_enable_reg_pp1_iter15, ap_enable_reg_pp1_iter16, ap_enable_reg_pp1_iter17, ap_enable_reg_pp1_iter18, ap_enable_reg_pp1_iter19, ap_enable_reg_pp1_iter20, ap_enable_reg_pp1_iter21, ap_enable_reg_pp1_iter22, ap_enable_reg_pp1_iter23, ap_enable_reg_pp1_iter24, ap_enable_reg_pp1_iter25, ap_enable_reg_pp1_iter26, ap_enable_reg_pp1_iter27, ap_enable_reg_pp1_iter28, ap_enable_reg_pp1_iter29, ap_enable_reg_pp1_iter30, ap_enable_reg_pp1_iter31, ap_enable_reg_pp1_iter32, ap_enable_reg_pp1_iter33, ap_enable_reg_pp1_iter34, ap_enable_reg_pp1_iter35, ap_enable_reg_pp1_iter36, ap_enable_reg_pp1_iter37, ap_enable_reg_pp1_iter38, ap_enable_reg_pp1_iter39, ap_enable_reg_pp1_iter40, ap_enable_reg_pp1_iter41, ap_enable_reg_pp1_iter42, ap_enable_reg_pp1_iter43, ap_enable_reg_pp1_iter44, ap_enable_reg_pp1_iter45)
    begin
        if (((ap_enable_reg_pp1_iter45 = ap_const_logic_0) and (ap_enable_reg_pp1_iter44 = ap_const_logic_0) and (ap_enable_reg_pp1_iter43 = ap_const_logic_0) and (ap_enable_reg_pp1_iter42 = ap_const_logic_0) and (ap_enable_reg_pp1_iter41 = ap_const_logic_0) and (ap_enable_reg_pp1_iter40 = ap_const_logic_0) and (ap_enable_reg_pp1_iter39 = ap_const_logic_0) and (ap_enable_reg_pp1_iter38 = ap_const_logic_0) and (ap_enable_reg_pp1_iter37 = ap_const_logic_0) and (ap_enable_reg_pp1_iter36 = ap_const_logic_0) and (ap_enable_reg_pp1_iter35 = ap_const_logic_0) and (ap_enable_reg_pp1_iter34 = ap_const_logic_0) and (ap_enable_reg_pp1_iter33 = ap_const_logic_0) and (ap_enable_reg_pp1_iter32 = ap_const_logic_0) and (ap_enable_reg_pp1_iter31 = ap_const_logic_0) and (ap_enable_reg_pp1_iter30 = ap_const_logic_0) and (ap_enable_reg_pp1_iter29 = ap_const_logic_0) and (ap_enable_reg_pp1_iter28 = ap_const_logic_0) and (ap_enable_reg_pp1_iter27 = ap_const_logic_0) and (ap_enable_reg_pp1_iter26 = ap_const_logic_0) and (ap_enable_reg_pp1_iter25 = ap_const_logic_0) and (ap_enable_reg_pp1_iter24 = ap_const_logic_0) and (ap_enable_reg_pp1_iter23 = ap_const_logic_0) and (ap_enable_reg_pp1_iter22 = ap_const_logic_0) and (ap_enable_reg_pp1_iter21 = ap_const_logic_0) and (ap_enable_reg_pp1_iter20 = ap_const_logic_0) and (ap_enable_reg_pp1_iter19 = ap_const_logic_0) and (ap_enable_reg_pp1_iter18 = ap_const_logic_0) and (ap_enable_reg_pp1_iter17 = ap_const_logic_0) and (ap_enable_reg_pp1_iter16 = ap_const_logic_0) and (ap_enable_reg_pp1_iter15 = ap_const_logic_0) and (ap_enable_reg_pp1_iter14 = ap_const_logic_0) and (ap_enable_reg_pp1_iter13 = ap_const_logic_0) and (ap_enable_reg_pp1_iter12 = ap_const_logic_0) and (ap_enable_reg_pp1_iter11 = ap_const_logic_0) and (ap_enable_reg_pp1_iter10 = ap_const_logic_0) and (ap_enable_reg_pp1_iter9 = ap_const_logic_0) and (ap_enable_reg_pp1_iter8 = ap_const_logic_0) and (ap_enable_reg_pp1_iter7 = ap_const_logic_0) and (ap_enable_reg_pp1_iter6 = ap_const_logic_0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_window_buffer_load_0_phi_fu_427_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, window_buffer_load_5_0_reg_414, window_buffer_load_0_reg_424, icmp_ln64_reg_1503, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln64_reg_1503 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_window_buffer_load_0_phi_fu_427_p4 <= window_buffer_load_5_0_reg_414;
        else 
            ap_phi_mux_window_buffer_load_0_phi_fu_427_p4 <= window_buffer_load_0_reg_424;
        end if; 
    end process;


    ap_phi_mux_window_buffer_load_1_phi_fu_406_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, window_buffer_load_5_1_reg_393, window_buffer_load_1_reg_403, icmp_ln64_reg_1503, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln64_reg_1503 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_window_buffer_load_1_phi_fu_406_p4 <= window_buffer_load_5_1_reg_393;
        else 
            ap_phi_mux_window_buffer_load_1_phi_fu_406_p4 <= window_buffer_load_1_reg_403;
        end if; 
    end process;


    ap_phi_mux_window_buffer_load_2_phi_fu_385_p4_assign_proc : process(window_buffer_load_5_2_reg_372, ap_CS_fsm_pp1_stage0, window_buffer_load_2_reg_382, icmp_ln64_reg_1503, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln64_reg_1503 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_window_buffer_load_2_phi_fu_385_p4 <= window_buffer_load_5_2_reg_372;
        else 
            ap_phi_mux_window_buffer_load_2_phi_fu_385_p4 <= window_buffer_load_2_reg_382;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, icmp_ln39_fu_661_p2)
    begin
        if (((icmp_ln39_fu_661_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_cast_fu_1131_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_reg_435),32));

    bias_conv4_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, zext_ln40_fu_608_p1, zext_ln40_19_fu_771_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bias_conv4_address0 <= zext_ln40_19_fu_771_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            bias_conv4_address0 <= zext_ln40_fu_608_p1(3 - 1 downto 0);
        else 
            bias_conv4_address0 <= "XXX";
        end if; 
    end process;


    bias_conv4_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            bias_conv4_ce0 <= ap_const_logic_1;
        else 
            bias_conv4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln11_fu_1174_p1 <= sum_reg_1620_pp1_iter44_reg;
    bitcast_ln49_fu_604_p1 <= p_read;
    cmp4827_fu_598_p2 <= "1" when (signed(sub47_fu_592_p2) > signed(ap_const_lv32_0)) else "0";
    empty_31_fu_613_p1 <= num_ker_reg_303(3 - 1 downto 0);
    empty_34_fu_1146_p1 <= b_reg_435(2 - 1 downto 0);
    empty_36_fu_697_p1 <= add_ln39_3_fu_687_p2(3 - 1 downto 0);
    empty_37_fu_776_p1 <= add_ln40_fu_765_p2(3 - 1 downto 0);
    empty_fu_621_p1 <= num_channel_reg_326(3 - 1 downto 0);
    icmp_ln11_3_fu_1197_p2 <= "1" when (trunc_ln11_fu_1187_p1 = ap_const_lv52_0) else "0";
    icmp_ln11_fu_1191_p2 <= "0" when (tmp_9_fu_1177_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln39_fu_661_p2 <= "1" when (indvar_flatten109_reg_315 = ap_const_lv9_180) else "0";
    icmp_ln40_fu_673_p2 <= "1" when (indvar_flatten_reg_337 = ap_const_lv7_30) else "0";
    icmp_ln41_fu_745_p2 <= "1" when (i_reg_349 = ap_const_lv3_6) else "0";
    icmp_ln42_3_fu_956_p2 <= "1" when (j_cast_fu_952_p1 = add_ln31_reg_1242) else "0";
    icmp_ln42_fu_580_p2 <= "1" when (signed(add_ln31_fu_574_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln45_3_fu_1053_p2 <= "1" when (j_cast_fu_952_p1 = sub13_reg_1251) else "0";
    icmp_ln45_6_fu_934_p2 <= "1" when (select_ln40_fu_919_p3 = ap_const_lv3_0) else "0";
    icmp_ln45_7_fu_940_p2 <= "1" when (select_ln40_fu_919_p3 = ap_const_lv3_5) else "0";
    icmp_ln45_fu_1047_p2 <= "1" when (j_reg_361 = ap_const_lv31_0) else "0";
    icmp_ln52_fu_1109_p2 <= "1" when (tmp_fu_1100_p4 = ap_const_lv2_0) else "0";
    icmp_ln64_fu_1135_p2 <= "1" when (b_cast_fu_1131_p1 = sub47_reg_1256) else "0";
    icmp_ln69_fu_1150_p2 <= "1" when (empty_34_fu_1146_p1 = ap_const_lv2_0) else "0";
    j_cast_fu_952_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_361),32));
    kernel_conv4_address0 <= zext_ln83_12_fu_808_p1(10 - 1 downto 0);
    kernel_conv4_address1 <= zext_ln40_20_fu_819_p1(10 - 1 downto 0);
    kernel_conv4_address2 <= zext_ln40_21_fu_830_p1(10 - 1 downto 0);
    kernel_conv4_address3 <= zext_ln40_22_fu_841_p1(10 - 1 downto 0);
    kernel_conv4_address4 <= zext_ln40_23_fu_852_p1(10 - 1 downto 0);
    kernel_conv4_address5 <= zext_ln40_24_fu_863_p1(10 - 1 downto 0);
    kernel_conv4_address6 <= zext_ln40_25_fu_874_p1(10 - 1 downto 0);
    kernel_conv4_address7 <= zext_ln40_26_fu_885_p1(10 - 1 downto 0);
    kernel_conv4_address8 <= zext_ln40_27_fu_896_p1(10 - 1 downto 0);

    kernel_conv4_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            kernel_conv4_ce0 <= ap_const_logic_1;
        else 
            kernel_conv4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_conv4_ce1_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            kernel_conv4_ce1 <= ap_const_logic_1;
        else 
            kernel_conv4_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_conv4_ce2_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            kernel_conv4_ce2 <= ap_const_logic_1;
        else 
            kernel_conv4_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_conv4_ce3_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            kernel_conv4_ce3 <= ap_const_logic_1;
        else 
            kernel_conv4_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_conv4_ce4_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            kernel_conv4_ce4 <= ap_const_logic_1;
        else 
            kernel_conv4_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_conv4_ce5_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            kernel_conv4_ce5 <= ap_const_logic_1;
        else 
            kernel_conv4_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_conv4_ce6_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            kernel_conv4_ce6 <= ap_const_logic_1;
        else 
            kernel_conv4_ce6 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_conv4_ce7_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            kernel_conv4_ce7 <= ap_const_logic_1;
        else 
            kernel_conv4_ce7 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_conv4_ce8_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            kernel_conv4_ce8 <= ap_const_logic_1;
        else 
            kernel_conv4_ce8 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln11_fu_1203_p2 <= (icmp_ln11_fu_1191_p2 or icmp_ln11_3_fu_1197_p2);
    or_ln40_fu_915_p2 <= (icmp_ln40_reg_1294 or and_ln39_reg_1301);
    or_ln45_5_fu_1058_p2 <= (icmp_ln45_fu_1047_p2 or icmp_ln45_3_fu_1053_p2);
    or_ln45_6_fu_1064_p2 <= (or_ln45_reg_1423 or or_ln45_5_fu_1058_p2);
    or_ln45_fu_946_p2 <= (icmp_ln45_7_fu_940_p2 or icmp_ln45_6_fu_934_p2);
    output_conv4 <= 
        bitcast_ln11_fu_1174_p1 when (and_ln11_fu_1209_p2(0) = '1') else 
        ap_const_lv64_0;

    output_conv4_ap_vld_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln64_reg_1503_pp1_iter44_reg, ap_enable_reg_pp1_iter45)
    begin
        if (((icmp_ln64_reg_1503_pp1_iter44_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter45 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            output_conv4_ap_vld <= ap_const_logic_1;
        else 
            output_conv4_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln39_10_fu_909_p3 <= 
        ap_const_lv64_3FE4B7C63FEAD19B when (icmp_ln40_reg_1294(0) = '1') else 
        bias_conv4_load_reg_1281;
    select_ln39_11_fu_731_p3 <= 
        zext_ln83_10_fu_715_p1 when (icmp_ln40_fu_673_p2(0) = '1') else 
        add_ln83_fu_655_p2;
    select_ln39_12_fu_757_p3 <= 
        add_ln39_3_fu_687_p2 when (icmp_ln40_fu_673_p2(0) = '1') else 
        num_channel_reg_326;
    select_ln39_9_fu_719_p3 <= 
        add_ln83_8_fu_709_p2 when (icmp_ln40_fu_673_p2(0) = '1') else 
        add_ln83_7_fu_633_p2;
    select_ln39_fu_679_p3 <= 
        ap_const_lv4_0 when (icmp_ln40_fu_673_p2(0) = '1') else 
        num_ker_reg_303;
    select_ln40_10_fu_800_p3 <= 
        add_ln83_9_fu_794_p2 when (and_ln39_fu_751_p2(0) = '1') else 
        select_ln39_11_fu_731_p3;
    select_ln40_11_fu_901_p3 <= 
        add_ln40_fu_765_p2 when (and_ln39_fu_751_p2(0) = '1') else 
        select_ln39_fu_679_p3;
    select_ln40_12_fu_1235_p3 <= 
        ap_const_lv7_1 when (icmp_ln40_reg_1294(0) = '1') else 
        add_ln40_27_fu_1229_p2;
    select_ln40_9_fu_927_p3 <= 
        bias_conv4_q0 when (and_ln39_reg_1301(0) = '1') else 
        select_ln39_10_fu_909_p3;
    select_ln40_fu_919_p3 <= 
        ap_const_lv3_0 when (or_ln40_fu_915_p2(0) = '1') else 
        i_reg_349;
    select_ln45_fu_1069_p3 <= 
        ap_const_lv64_0 when (or_ln45_6_fu_1064_p2(0) = '1') else 
        bitcast_ln49_reg_1265;
    select_ln69_fu_1156_p3 <= 
        line_buffer_0_10_2_load_reg_1473 when (icmp_ln69_fu_1150_p2(0) = '1') else 
        line_buffer_0_10_3_load_reg_1478;
    select_ln72_fu_1162_p3 <= 
        line_buffer_1_10_2_load_reg_1483 when (icmp_ln69_fu_1150_p2(0) = '1') else 
        line_buffer_1_10_3_load_reg_1488;
    select_ln75_fu_1168_p3 <= 
        line_buffer_2_10_2_load_reg_1493 when (icmp_ln69_fu_1150_p2(0) = '1') else 
        line_buffer_2_10_3_load_reg_1498;
    shl_ln_fu_566_p3 <= (padding & ap_const_lv1_0);
    tmp5_fu_643_p4 <= ((empty_31_reg_1270 & empty_31_reg_1270) & ap_const_lv3_0);
    tmp5_mid1_fu_780_p4 <= ((empty_37_fu_776_p1 & empty_37_fu_776_p1) & ap_const_lv3_0);
    tmp_9_fu_1177_p4 <= bitcast_ln11_fu_1174_p1(62 downto 52);
    tmp_fu_1100_p4 <= select_ln40_reg_1367(2 downto 1);
    trunc_ln11_fu_1187_p1 <= bitcast_ln11_fu_1174_p1(52 - 1 downto 0);
    trunc_ln43_fu_967_p1 <= j_reg_361(2 - 1 downto 0);
    xor_ln39_fu_739_p2 <= (icmp_ln40_fu_673_p2 xor ap_const_lv1_1);
    zext_ln40_19_fu_771_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_fu_765_p2),64));
    zext_ln40_20_fu_819_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_19_fu_813_p2),64));
    zext_ln40_21_fu_830_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_20_fu_824_p2),64));
    zext_ln40_22_fu_841_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_21_fu_835_p2),64));
    zext_ln40_23_fu_852_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_22_fu_846_p2),64));
    zext_ln40_24_fu_863_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_23_fu_857_p2),64));
    zext_ln40_25_fu_874_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_24_fu_868_p2),64));
    zext_ln40_26_fu_885_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_25_fu_879_p2),64));
    zext_ln40_27_fu_896_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_26_fu_890_p2),64));
    zext_ln40_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(num_ker_reg_303),64));
    zext_ln83_10_fu_715_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln83_8_fu_709_p2),10));
    zext_ln83_12_fu_808_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln40_10_fu_800_p3),64));
end behav;
